site_name(HOST_NAME)


set(CMAKE_C_COMPILER "$ENV{CC}" CACHE PATH "" FORCE)
set(CMAKE_CXX_COMPILER "$ENV{CXX}" CACHE PATH "" FORCE)
set(ENABLE_FORTRAN OFF CACHE BOOL "" FORCE)

set(ENABLE_MPI ON CACHE PATH "" FORCE)
set(MPI_C_COMPILER "$ENV{MPI_ROOT}/bin/mpicc" CACHE PATH "" FORCE)
set(MPI_CXX_COMPILER "$ENV{MPI_ROOT}/bin/mpic++" CACHE PATH "" FORCE)
set(MPI_Fortran_COMPILER "$ENV{MPI_ROOT}/bin/mpifort" CACHE PATH "" FORCE)
set(MPIEXEC_EXECUTABLE "$ENV{MPIEXEC}" CACHE PATH "" FORCE)

set(ENABLE_GTEST_DEATH_TESTS ON CACHE BOOL "" FORCE)
set(ENABLE_CALIPER ON CACHE BOOL "")

set(ENABLE_HYPRE ON CACHE BOOL "" FORCE)

# If not defined as argument, take from the environment...
if(NOT DEFINED ENABLE_HYPRE)
  set(ENABLE_HYPRE "$ENV{ENABLE_HYPRE}" CACHE BOOL "" FORCE)
endif()
# ... and then check the value.
if(ENABLE_HYPRE)
  set(GEOSX_LA_INTERFACE "Hypre" CACHE STRING "" FORCE)
else()
  set(ENABLE_HYPRE OFF CACHE BOOL "" FORCE)
endif()

# Same pattern
if(NOT DEFINED ENABLE_TRILINOS)
  set(ENABLE_TRILINOS "$ENV{ENABLE_TRILINOS}" CACHE BOOL "" FORCE)
endif()
if(ENABLE_TRILINOS)
  set(GEOSX_LA_INTERFACE "Trilinos" CACHE STRING "" FORCE)
else()
  set(ENABLE_TRILINOS FALSE CACHE BOOL "" FORCE)
endif()

if( (ENABLE_HYPRE AND ENABLE_TRILINOS) OR (NOT ENABLE_TRILINOS AND NOT ENABLE_HYPRE))
  MESSAGE(SEND_ERROR "Exactly one of ENABLE_HYPRE and ENABLE_TRILINOS must be defined.")
  MESSAGE(SEND_ERROR "ENABLE_HYPRE = ${ENABLE_HYPRE}.")
  MESSAGE(SEND_ERROR "ENABLE_TRILINOS = ${ENABLE_TRILINOS}.")
endif()

MESSAGE(STATUS "GEOSX_LA_INTERFACE = ${GEOSX_LA_INTERFACE}")

set(ENABLE_CUDA "$ENV{ENABLE_CUDA}" CACHE BOOL "" FORCE)
if(ENABLE_CUDA)

  set(CMAKE_CUDA_FLAGS "$ENV{CMAKE_CUDA_FLAGS}" CACHE STRING "" FORCE)
  if(NOT CMAKE_CUDA_FLAGS)
    set(CMAKE_CUDA_FLAGS "Unused" CACHE STRING "" FORCE)
  endif()

  set(CUDA_TOOLKIT_ROOT_DIR "$ENV{CUDA_TOOLKIT_ROOT_DIR}" CACHE PATH "" FORCE)
  if(NOT CUDA_TOOLKIT_ROOT_DIR)
    set(CUDA_TOOLKIT_ROOT_DIR "/usr/local/cuda" CACHE PATH "" FORCE)
  endif()

  set(CUDA_ARCH "$ENV{CUDA_ARCH}" CACHE STRING "" FORCE)
  if(NOT CUDA_ARCH)
    set(CUDA_ARCH "sm_70" CACHE STRING "" FORCE)
  endif()

  if(ENABLE_HYPRE)
    set(ENABLE_HYPRE_CUDA ON CACHE BOOL "" FORCE)
  endif()

  set(CMAKE_CUDA_FLAGS_RELEASE "-O3 -DNDEBUG -Xcompiler -DNDEBUG -Xcompiler -O3" CACHE STRING "")
  set(CMAKE_CUDA_FLAGS_RELWITHDEBINFO "-g -lineinfo ${CMAKE_CUDA_FLAGS_RELEASE}" CACHE STRING "")
  set(CMAKE_CUDA_FLAGS_DEBUG "-g -G -O0 -Xcompiler -O0" CACHE STRING "")

endif()


set(ENABLE_PETSC OFF CACHE BOOL "" FORCE)
set(ENABLE_FESAPI OFF CACHE BOOL "" FORCE)

#######################################
# Docs & schema generation
#######################################
set( ENABLE_XML_UPDATES ON CACHE BOOL "" FORCE ) 
set( ENABLE_DOCS ON CACHE BOOL "" FORCE )
set( ENABLE_DOXYGEN OFF CACHE BOOL "" FORCE )
set( ENABLE_SPHINX ON CACHE BOOL "" FORCE )
set( ENABLE_UNCRUSTIFY ON CACHE BOOL "" FORCE )


set(ENABLE_MKL OFF CACHE BOOL "" FORCE)
#set( ENABLE_MKL ON CACHE BOOL "" )
#set( MKL_ROOT /data_local/sw/intel/RHEL7/compilers_and_libraries_2019.3.199/linux/mkl )
#set( MKL_INCLUDE_DIRS ${MKL_ROOT}/include CACHE STRING "" )
#set( MKL_LIBRARIES ${MKL_ROOT}/lib/intel64/libmkl_intel_lp64.so
#                  ${MKL_ROOT}/lib/intel64/libmkl_sequential.so
#                  ${MKL_ROOT}/lib/intel64/libmkl_core.so
#                  CACHE STRING "" )


set(GEOSX_TPL_DIR "${CMAKE_CURRENT_LIST_DIR}/../../../thirdPartyLibs/install-xrai-gcc\@8.2.0-release" CACHE PATH "" FORCE)
if(EXISTS ${GEOSX_TPL_DIR})
  set(GEOSX_TPL_DIR_EXISTS "YES")
endif()

include(${CMAKE_CURRENT_LIST_DIR}/../tpls.cmake)




MESSAGE(STATUS "Host config verifications : ")
MESSAGE(STATUS "    ENABLE_PETSC =     ${ENABLE_PETSC}")
MESSAGE(STATUS "    ENABLE_FESAPI =    ${ENABLE_FESAPI}")
MESSAGE(STATUS "    ENABLE_MKL =       ${ENABLE_MKL}")
MESSAGE(STATUS "    ENABLE_DOXYGEN =   ${ENABLE_DOXYGEN}")
MESSAGE(STATUS "    ENABLE_SPHINX =    ${ENABLE_SPHINX}")
MESSAGE(STATUS "    ENABLE_UNCRUSTIFY =${ENABLE_UNCRUSTIFY}")
MESSAGE(STATUS "    TPL_DIR =       '${GEOSX_TPL_DIR}'")
MESSAGE(STATUS "    TPL_DIR_EXISTS ='${GEOSX_TPL_DIR_EXISTS}'")
MESSAGE(STATUS "    HDF5_DIR =      '${HDF5_DIR}'")
MESSAGE(STATUS "    CONDUIT_DIR =   '${CONDUIT_DIR}'")
MESSAGE(STATUS "    MPICXXCompiler ='${MPI_CXX_COMPILER}'")
MESSAGE(STATUS "    MPIEXECUTABLE = '${MPIEXEC_EXECUTABLE}'")

