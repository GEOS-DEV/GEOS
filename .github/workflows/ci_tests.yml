name: GEOS CI 
on: pull_request

# Cancels in-progress workflows for a PR when updated
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Please define `build.args.GEOS_TPL_TAG` in `.devcontainer/devcontainer.json`

jobs:

  # Jobs will be cancelled if PR is a draft.
  # PR status must be "Open" to run CI.
  check_pull_request_is_not_a_draft:
    # We use the most recent ubuntu distribution available in Github Actions to ensure maximum support of google cloud's sdk.
    runs-on: ubuntu-22.04
    outputs:
      NUM_ASSIGNEES: ${{ steps.extract_pr_info.outputs.NUM_ASSIGNEES }}
      DOCKER_IMAGE_TAG: ${{ steps.extract_docker_image_tag.outputs.DOCKER_IMAGE_TAG }}
      LABELS: ${{ steps.extract_pr_info.outputs.LABELS }}
    steps:
    - name: Check that the PR is not a draft (cancel rest of jobs otherwise)
      id: extract_pr_info
      run: |
        # We do not rely on the `github.event.pull_request.labels` information since it's cached at the job.
        # Changing labels or assignee in the PR would not allow to simply re-run the job with a different outcome.
        pr_json=$(curl -H "Accept: application/vnd.github+json" https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }})
        draft_status=$(echo ${pr_json} | jq '.draft')
        echo "Draft status of PR is ${draft_status}."
        if [[ $draft_status == true ]]; then exit 1 ; fi
        echo "NUM_ASSIGNEES=$(echo ${pr_json} | jq '.assignees | length')" >> "$GITHUB_OUTPUT"
        echo "LABELS=$(echo ${pr_json} | jq -crM '[.labels[].name]')" >> "$GITHUB_OUTPUT"
    - name: Checkout .devcontainer/devcontainer.json
      uses: actions/checkout@v3
      with:
        sparse-checkout: |
          .devcontainer/devcontainer.json
        sparse-checkout-cone-mode: false
        submodules: false
        lfs: false
        fetch-depth: 1
    - name: Extract docker image tag
      id: extract_docker_image_tag
      run: |
        echo "DOCKER_IMAGE_TAG=$(jq '.build.args.GEOS_TPL_TAG' -r .devcontainer/devcontainer.json)" >> "$GITHUB_OUTPUT"

  # PR must be assigned to be merged.
  # This job will fail if this is not the case.
  check_pull_request_is_assigned:
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-22.04
    steps:
    - name: Check that the PR is assigned
      run: |
        echo "There are ${{ needs.check_pull_request_is_not_a_draft.outputs.NUM_ASSIGNEES }} on this PR."
        ${{ needs.check_pull_request_is_not_a_draft.outputs.NUM_ASSIGNEES > 0 }}
        # if [[ ${{ needs.check_pull_request_is_not_a_draft.outputs.NUM_ASSIGNEES }} != null ]]; then "true" ; else "false"; fi

  check_integrated_tests_are_requested:
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-22.04
    steps:
    - name: Check if running the integrated tests is requested
      run: |
        echo 'Labels are ${{ needs.check_pull_request_is_not_a_draft.outputs.LABELS }}'
        ${{ contains( fromJSON( needs.check_pull_request_is_not_a_draft.outputs.LABELS ), 'ci: run integrated tests') }}

  # PR must be labeled "ci: ready to be merged" to run CUDA jobs.
  # This job will fail if this is not the case.
  # Note: Label should only be added if PR is in merge queue.
  check_cuda_builds_are_requested:
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-22.04
    steps:
    - name: Check that the PR is ready to be merged
      run: |
        echo 'Labels are ${{ needs.check_pull_request_is_not_a_draft.outputs.LABELS }}'
        ${{ contains( fromJSON( needs.check_pull_request_is_not_a_draft.outputs.LABELS ), 'ci: ready to be merged') }}

  check_submodules:
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-22.04
    steps:
    # The integrated test submodule repository contains large data (using git lfs).
    # To save time (and money) we do not let Github Actions automatically clone all our (lfs) subrepositories and do it by hand.
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        # Let script update submodules; Github Actions submodule history causes error
        submodules: false
        lfs: false
        fetch-depth: 1
    - name: Check that submodules are up to date
      run: "scripts/test_submodule_updated.sh"

  check_code_style:
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: true
        lfs: false
        fetch-depth: 1
    - name: Check style
      env:
        BUILD_AND_TEST_ARGS: --test-code-style --no-use-sccache
      run: |
        ./scripts/ci_build_and_test.sh \
          --docker-repository geosx/ubuntu20.04-gcc9 \
          --docker-tag ${{ needs.check_pull_request_is_not_a_draft.outputs.DOCKER_IMAGE_TAG }} \
          --cmake-build-type Release

  check_documentation:
    needs: [check_pull_request_is_not_a_draft]
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        submodules: true
        lfs: false
        fetch-depth: 1
    - name: Check documentation
      env:
        BUILD_AND_TEST_ARGS: --test-documentation --no-use-sccache
      run: |
        ./scripts/ci_build_and_test.sh \
          --docker-repository geosx/ubuntu20.04-gcc9 \
          --docker-tag ${{ needs.check_pull_request_is_not_a_draft.outputs.DOCKER_IMAGE_TAG }} \
          --cmake-build-type Release

  cpu_builds:
    name: ${{ matrix.name }}
    needs: [check_pull_request_is_not_a_draft]
    strategy:

      # In-progress jobs will not be cancelled if there is a failure
      fail-fast : false
      matrix:
        include:
          - name: Ubuntu (20.04, gcc 9.3.0, open-mpi 4.0.3)
            DOCKER_REPOSITORY: geosx/ubuntu20.04-gcc9
            CMAKE_BUILD_TYPE: Release

          - name: Ubuntu debug (20.04, gcc 10.3.0, open-mpi 4.0.3) - github codespaces
            DOCKER_REPOSITORY: geosx/ubuntu20.04-gcc10
            CMAKE_BUILD_TYPE: Debug

          - name: Ubuntu (20.04, gcc 10.3.0, open-mpi 4.0.3) - github codespaces
            DOCKER_REPOSITORY: geosx/ubuntu20.04-gcc10
            CMAKE_BUILD_TYPE: Release

          # Matrix jobs that deploy to Google Cloud
          - name: Pecan CPU (centos 7.7, gcc 8.2.0, open-mpi 4.0.1, mkl 2019.5)
            DOCKER_REPOSITORY: geosx/pecan-cpu-gcc8.2.0-openmpi4.0.1-mkl2019.5
            CMAKE_BUILD_TYPE: Release
            HOST_CONFIG: host-configs/TOTAL/pecan-CPU.cmake
            GCP_BUCKET: geosx/Pecan-CPU

          - name: Pangea 2 (centos 7.6, gcc 8.3.0, open-mpi 2.1.5, mkl 2019.3)
            DOCKER_REPOSITORY: geosx/pangea2-gcc8.3.0-openmpi2.1.5-mkl2019.3
            CMAKE_BUILD_TYPE: Release
            GCP_BUCKET: geosx/Pangea2
            ENABLE_HYPRE: ON
            ENABLE_TRILINOS: OFF

          - name: Sherlock CPU (centos 7.9.2009, gcc 10.1.0, open-mpi 4.1.2, openblas 0.3.10)
            DOCKER_REPOSITORY: geosx/sherlock-gcc10.1.0-openmpi4.1.2-openblas0.3.10-zlib1.2.11
            CMAKE_BUILD_TYPE: Release
            HOST_CONFIG: host-configs/Stanford/sherlock-gcc10-ompi4.1.2-openblas0.3.10.cmake
            GCP_BUCKET: geosx/Sherlock-CPU
            ENABLE_HYPRE: ON
            ENABLE_TRILINOS: OFF

          - name: Ubuntu (22.04, gcc 11.2.0, open-mpi 4.1.2)
            DOCKER_REPOSITORY: geosx/ubuntu22.04-gcc11
            CMAKE_BUILD_TYPE: Release
            GCP_BUCKET: geosx/ubuntu22.04-gcc11
    uses: ./.github/workflows/build_and_test.yml
    with:
      DOCKER_IMAGE_TAG: ${{ needs.check_pull_request_is_not_a_draft.outputs.DOCKER_IMAGE_TAG }}
      DOCKER_REPOSITORY: ${{ matrix.DOCKER_REPOSITORY }}
      CMAKE_BUILD_TYPE: ${{ matrix.CMAKE_BUILD_TYPE }}
      HOST_CONFIG: ${{ matrix.HOST_CONFIG }}
      ENABLE_HYPRE: ${{ matrix.ENABLE_HYPRE }}
      ENABLE_TRILINOS: ${{ matrix.ENABLE_TRILINOS }}
      GCP_BUCKET: ${{ matrix.GCP_BUCKET }}
      COMMIT: ${{ github.event.pull_request.head.sha }}
      RUNS_ON: ubuntu-22.04
    secrets: inherit

  run_integrated_tests:
    needs:
      - check_integrated_tests_are_requested
      - check_pull_request_is_not_a_draft
      # - cpu_builds
    uses: ./.github/workflows/build_and_test.yml
    secrets: inherit
    with:
      DOCKER_IMAGE_TAG: ${{ needs.check_pull_request_is_not_a_draft.outputs.DOCKER_IMAGE_TAG }}
      BUILD_AND_TEST_ARGS: --run-integrated-tests
      CMAKE_BUILD_TYPE: Release
      build_type: integrated_tests
      DOCKER_REPOSITORY: geosx/ubuntu22.04-gcc11
      COMMIT: ${{ github.event.pull_request.head.sha }}
      RUNS_ON: ubuntu-22.04

  # If "ci: ready to be merged" PR label found, cuda jobs run immediately along side linux jobs.
  # CUDA jobs should only be run if PR is ready to merge.
  cuda_builds:
    name: ${{ matrix.name }}
    needs:
    - check_pull_request_is_not_a_draft
    - check_cuda_builds_are_requested
    strategy:

      # In-progress jobs will not be cancelled if there is a failure
      fail-fast : false
      matrix:
        include:
          - name: Ubuntu CUDA debug (20.04, clang 10.0.0 + gcc 9.4.0, open-mpi 4.0.3, cuda-11.8.89)
            DOCKER_REPOSITORY: geosx/ubuntu20.04-clang10.0.0-cuda11.8.89
            RUNS_ON: Runner_4core_16GB
            CMAKE_BUILD_TYPE: Debug
            BUILD_AND_TEST_ARGS: "--build-exe-only --no-install-schema"
            ENABLE_HYPRE: ON
            ENABLE_HYPRE_DEVICE: CUDA
            ENABLE_TRILINOS: OFF

          - name: Ubuntu CUDA (20.04, clang 10.0.0 + gcc 9.4.0, open-mpi 4.0.3, cuda-11.8.89)
            DOCKER_REPOSITORY: geosx/ubuntu20.04-clang10.0.0-cuda11.8.89
            RUNS_ON: Runner_4core_16GB
            CMAKE_BUILD_TYPE: Release
            BUILD_AND_TEST_ARGS: "--no-run-unit-tests --no-install-schema"
            ENABLE_HYPRE: ON
            ENABLE_HYPRE_DEVICE: CUDA
            ENABLE_TRILINOS: OFF

          - name: Centos (7.7, gcc 8.3.1, open-mpi 1.10.7, cuda 11.8.89)
            DOCKER_REPOSITORY: geosx/centos7.7-gcc8.3.1-cuda11.8.89
            RUNS_ON: Runner_4core_16GB
            CMAKE_BUILD_TYPE: Release
            BUILD_AND_TEST_ARGS: "--no-run-unit-tests --no-install-schema"

          # Matrix job that deploys to Google Cloud
          - name: Pecan GPU (centos 7.7, gcc 8.2.0, open-mpi 4.0.1, mkl 2019.5, cuda 11.5.119)
            DOCKER_REPOSITORY: geosx/pecan-gpu-gcc8.2.0-openmpi4.0.1-mkl2019.5-cuda11.5.119
            RUNS_ON: Runner_4core_16GB
            CMAKE_BUILD_TYPE: Release
            BUILD_AND_TEST_ARGS: "--build-exe-only --no-install-schema"
            HOST_CONFIG: host-configs/TOTAL/pecan-GPU.cmake
            GCP_BUCKET: geosx/Pecan-GPU
    uses: ./.github/workflows/build_and_test.yml
    with:
      DOCKER_IMAGE_TAG: ${{ needs.check_pull_request_is_not_a_draft.outputs.DOCKER_IMAGE_TAG }}
      DOCKER_REPOSITORY: ${{ matrix.DOCKER_REPOSITORY }}
      CMAKE_BUILD_TYPE: ${{ matrix.CMAKE_BUILD_TYPE }}
      BUILD_AND_TEST_ARGS: ${{ matrix.BUILD_AND_TEST_ARGS }}
      HOST_CONFIG: ${{ matrix.HOST_CONFIG }}
      ENABLE_HYPRE: ${{ matrix.ENABLE_HYPRE }}
      ENABLE_HYPRE_DEVICE: ${{ matrix.ENABLE_HYPRE_DEVICE }}
      ENABLE_TRILINOS: ${{ matrix.ENABLE_TRILINOS }}
      GCP_BUCKET: ${{ matrix.GCP_BUCKET }}
      COMMIT: ${{ github.event.pull_request.head.sha }}
      RUNS_ON: ${{ matrix.RUNS_ON }}
    secrets: inherit

  # # Convenience job - passes when all other jobs have passed
  # # (must pass the CUDA jobs)
  # check_that_all_jobs_succeeded:
  #   runs-on: ubuntu-22.04
  #   needs:
  #   - check_pull_request_is_not_a_draft
  #   - check_pull_request_is_assigned
  #   - check_cuda_builds_are_requested
  #   - check_submodules
  #   - check_code_style
  #   - check_documentation
  #   - cpu_builds
  #   - run_integrated_tests
  #   - cuda_builds
  #   if: ${{ always() }}
  #   env:
  #     RETURN_VAL: |
  #       ${{
  #       needs.check_pull_request_is_not_a_draft.result == 'success' &&
  #       needs.check_pull_request_is_assigned.result == 'success' &&
  #       needs.check_submodules.result == 'success' &&
  #       needs.check_code_style.result == 'success' &&
  #       needs.check_documentation.result == 'success' &&
  #       needs.cpu_builds.result == 'success' &&
  #       needs.run_integrated_tests.result == 'success' &&
  #       needs.cuda_builds.result == 'success'
  #       }}
  #   steps:
  #   - name: PR Success
  #     if: ${{ contains(env.RETURN_VAL, 'true') }}
  #     run: "true"
  #   - name: PR Failure
  #     if: ${{ contains(env.RETURN_VAL, 'false') }}
  #     run: "false"
