import geos_ats
from geos_ats.test_builder import TestDeck, RestartcheckParameters, generate_geos_tests


class Description(object):

    def __init__(self, description_builder, label, owner, isIndependent):
        """
        The ATS description of the test case for poro-elastic coupling.

        description_builder: callable
            A callable taking the partition tuple in argument and returning the TestCase description.
        label: str
            The label of the TestCase
        owner: str
            The owner of the TestCase
        isIndependent: boolean
            Is the TestCase independent from other cases?
        """
        self.description_builder = description_builder
        self.label = label
        self.owner = owner
        self.isIndependent = isIndependent


def _n_ranks(partition):
    """
    Returns the number of ranks for a given MPI partitioning.

    partition: iterable
        The MPI cartesian partitioning.
        (x, y, z) ranks are supposed to be integers (or None which will be considered as 1).
    """
    result = 1
    # I wanted to do `filter( None, partition )` with the `filter` builtin function
    # but it has been rewritten by ATS. This is sooo wrong :(
    for n in partition:
        result *= n if n else 1
    return result


def _build_poro_elastic_coupling_case(deck, cycles, partitions, description,
                                      restartcheck_params):
    """
    Generic function that build the poro-elastic cases.
    A first run is done and a second takes an intermediate timestep to validate the restart.

    deck: str
        XML input file
    cycles: pair of integers
        The (intermediate_cycle, last_cycle). First being the restart initial timestep.
        The second being the last simulated cycle.
    partitions: Iterable of length-3 iterables
        The (x, y, z) parallel partitioning.
        `None` can be provided when nothing has to be done in the considered direction.
    description: Description
        Description of the TestCase
    restartcheck_params: dict
        Restart validation parameters (relative or absolute tolerance mainly).
    test_name_builder: callable
        A callable taking the partition tuple in argument and returning the test name.
    """

    # The simulation will generate data for two cycles
    intermediate_cycle, last_cycle = cycles

    return TestDeck(
        name=deck.split(".")[0],
        description=description.description_builder,
        partitions=partitions,
        restart_step=intermediate_cycle,
        check_step=last_cycle,
        restartcheck_params=RestartcheckParameters(**restartcheck_params))


def _build_NonlinearAccelerationValidation_cases():
    description = Description("Nonlinear acceleration validation problem ",
                              "auto", "Sohail Waziri", True)
    restartcheck_params = {"atol": 1.0e-4, "rtol": 2.0e-6}
    return _build_poro_elastic_coupling_case("validationCase.xml", (3, 6),
                                             ((1, 1, 1), ), description,
                                             restartcheck_params)


def test_poro_elastic_coupling_cases():
    deck_instances = [_build_NonlinearAccelerationValidation_cases()]

    generate_geos_tests(deck_instances)


test_poro_elastic_coupling_cases()
