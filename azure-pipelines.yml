variables:
  GEOSX_TPL_TAG: 191-760

# only build non-draft, merge target PR's to develop
trigger: none
pr:
  branches:
    include:
    - develop
  drafts: false

stages:
- stage: checks
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
  - job: code_style
    variables:
      DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc9'
      CMAKE_BUILD_TYPE: 'Release'
      BUILD_AND_TEST_ARGS: '--test-code-style'
    steps:
    - checkout: self
      clean: true
      submodules: false
    - script: scripts/ci_build_and_test.sh
  - job: documentation
    variables:
      DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc9'
      CMAKE_BUILD_TYPE: 'Release'
      BUILD_AND_TEST_ARGS: '--test-documentation'
    steps:
    - checkout: self
      clean: true
      submodules: false
    - script: scripts/ci_build_and_test.sh
  - job: check_submodules
    steps:
    - script: scripts/test_submodule_updated.sh
      displayName: 'Run test_submodule_updated.sh'
  - job: check_pr_is_assigned
    steps:
    - script: |
        is_assigned=$(curl -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/$(Build.Repository.Name)/pulls/$(System.PullRequest.PullRequestNumber) | \
        jq ".assignees|length");
        if [[ $is_assigned == 0 ]]; then exit 1; else exit 0; fi
      displayName: 'Check PR is assigned'
- stage: builds
  condition: succeededOrFailed()
  jobs:
  - job: build_and_test
    # Use maximum time limit
    timeoutInMinutes: 0
    strategy:
      matrix:
        # Builds only the geosx executable (timeout when building tests)
        ubuntu18_cuda10_clang8_gcc8_3_1_openmpi2_debug:
          JOB_NAME: 'Ubuntu CUDA debug (18.04, clang 8.0.0 + gcc 8.3.1, open-mpi 2.1.1, cuda-10.1.243)'
          DOCKER_REPOSITORY: 'geosx/ubuntu18.04-clang8.0.0-cuda10.1.243'
          CMAKE_BUILD_TYPE: 'Debug'
          BUILD_AND_TEST_ARGS: "--disable-unit-tests --build-exe-only"
          ENABLE_HYPRE: ON
          ENABLE_HYPRE_CUDA: ON
          ENABLE_TRILINOS: OFF
          VM_ImageName: 'ubuntu-latest'
        ubuntu18_cuda10_clang8_gcc8_3_1_openmpi2_release:
          JOB_NAME: 'Ubuntu CUDA (18.04, clang 8.0.0 + gcc 8.3.1, open-mpi 2.1.1, cuda-10.1.243)'
          DOCKER_REPOSITORY: 'geosx/ubuntu18.04-clang8.0.0-cuda10.1.243'
          CMAKE_BUILD_TYPE: 'Release'
          BUILD_AND_TEST_ARGS: "--disable-unit-tests"
          ENABLE_HYPRE: ON
          ENABLE_HYPRE_CUDA: ON
          ENABLE_TRILINOS: OFF
          VM_ImageName: 'ubuntu-latest'
        centos7_6_cuda10_gcc8_3_1_openmpi1_10_release:
          JOB_NAME: 'Centos (7.6, gcc 8.3.1, open-mpi 1.10.7, cuda 10.1.243)'
          DOCKER_REPOSITORY: 'geosx/centos7.6.1810-gcc8.3.1-cuda10.1.243'
          CMAKE_BUILD_TYPE: 'Release'
          BUILD_AND_TEST_ARGS: "--disable-unit-tests"
          VM_ImageName: 'ubuntu-latest'
        centos7_7_clang9_openmpi1_10_release:
          JOB_NAME: 'Centos (7.7, clang 9.0.0 + gcc 4.9.3, open-mpi 1.10.7)'
          DOCKER_REPOSITORY: 'geosx/centos7.7.1908-clang9.0.0'
          CMAKE_BUILD_TYPE: 'Release'
          VM_ImageName: 'ubuntu-latest'
        ubuntu20_gcc9_openmpi4_release:
          JOB_NAME: 'Ubuntu (20.04, gcc 9.3.0, open-mpi 4.0.3)'
          DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc9'
          CMAKE_BUILD_TYPE: 'Release'
          VM_ImageName: 'ubuntu-latest'
        ubuntu20_gcc10_openmpi4_release:
          JOB_NAME: 'Ubuntu (20.04, gcc 10.3.0, open-mpi 4.0.3)'
          DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc10'
          CMAKE_BUILD_TYPE: 'Release'
          VM_ImageName: 'ubuntu-latest'

    pool:
      vmImage: $(VM_ImageName)

    steps:
    - checkout: self
      clean: true
      submodules: false
    - script: scripts/ci_build_and_test.sh
      displayName: '($(JOB_NAME))'

