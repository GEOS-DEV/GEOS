variables:
  GEOSX_TPL_TAG: 188-750

# only build non-draft, merge target PR's to develop
trigger: none
pr:
  branches:
    include:
    - develop
  drafts: false

stages:
- stage: checks
  jobs:
  - job: code_style
    variables:
      DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc9'
      CMAKE_BUILD_TYPE: 'Release'
      BUILD_AND_TEST_ARGS: '--test-code-style'
    steps:
    - checkout: self
      clean: true
      submodules: false
    - script: |
        git submodule update --init --recursive src/cmake/blt
        git submodule update --init --recursive src/coreComponents/LvArray
        git submodule update --init --recursive src/coreComponents/constitutive/PVTPackage
        git submodule update --init src/coreComponents/mesh/PAMELA
        git submodule update --init --recursive src/coreComponents/fileIO/coupling/hdf5_interface
        # The linux build relies on two environment variables DOCKER_REPOSITORY and GEOSX_TPL_TAG to define the TPL version.
        # And another CMAKE_BUILD_TYPE to define the build type we want for GEOSX.
        # Optional BUILD_AND_TEST_ARGS to pass arguments to travis_build_and_test.sh script.
        #
        # We extract the location of the GEOSX_TPL from the container...
        GEOSX_TPL_DIR=$(docker run --rm ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG} /bin/bash -c 'echo ${GEOSX_TPL_DIR}')
        # ... so we can install GEOSX alongside. This is assumed for bundling the binaries, so consider modifying with care.
        GEOSX_DIR=${GEOSX_TPL_DIR}/../GEOSX-INSTALL
        # We need to know where the code folder is mounted inside the container so we can run the script at the proper location!
        # Since this information is repeated twice, we use a variable.
        TRAVIS_BUILD_DIR_MOUNT_POINT=/tmp/GEOSX
        # We need to keep track of the building container (hence the `CONTAINER_NAME`)
        # so we can extract the data from it later (if needed). Another solution would have been to use a mount point,
        # but that would not have solved the problem for the TPLs (we would require extra action to copy them to the mount point).
        CONTAINER_NAME=geosx_build
        # Now we can build GEOSX.
        while sleep 5m; do echo "... still building ..."; done & 
        docker run \
        --name=${CONTAINER_NAME} \
        --volume=${BUILD_SOURCESDIRECTORY}:${TRAVIS_BUILD_DIR_MOUNT_POINT} \
        --cap-add=ALL \
        -e HOST_CONFIG=${HOST_CONFIG:-host-configs/environment.cmake} \
        -e CMAKE_BUILD_TYPE \
        -e GEOSX_DIR=${GEOSX_DIR} \
        -e ENABLE_HYPRE=${ENABLE_HYPRE:-OFF} \
        -e ENABLE_HYPRE_CUDA=${ENABLE_HYPRE_CUDA:-OFF} \
        -e ENABLE_TRILINOS=${ENABLE_TRILINOS:-ON} \
        ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG} \
        ${TRAVIS_BUILD_DIR_MOUNT_POINT}/scripts/travis_build_and_test.sh ${BUILD_AND_TEST_ARGS};
  - job: documentation
    variables:
      DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc9'
      CMAKE_BUILD_TYPE: 'Release'
      BUILD_AND_TEST_ARGS: '--test-documentation'
    steps:
    - checkout: self
      clean: true
      submodules: false
    - script: |
        git submodule update --init --recursive src/cmake/blt
        git submodule update --init --recursive src/coreComponents/LvArray
        git submodule update --init --recursive src/coreComponents/constitutive/PVTPackage
        git submodule update --init src/coreComponents/mesh/PAMELA
        git submodule update --init --recursive src/coreComponents/fileIO/coupling/hdf5_interface
        # The linux build relies on two environment variables DOCKER_REPOSITORY and GEOSX_TPL_TAG to define the TPL version.
        # And another CMAKE_BUILD_TYPE to define the build type we want for GEOSX.
        # Optional BUILD_AND_TEST_ARGS to pass arguments to travis_build_and_test.sh script.
        #
        # We extract the location of the GEOSX_TPL from the container...
        GEOSX_TPL_DIR=$(docker run --rm ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG} /bin/bash -c 'echo ${GEOSX_TPL_DIR}')
        # ... so we can install GEOSX alongside. This is assumed for bundling the binaries, so consider modifying with care.
        GEOSX_DIR=${GEOSX_TPL_DIR}/../GEOSX-INSTALL
        # We need to know where the code folder is mounted inside the container so we can run the script at the proper location!
        # Since this information is repeated twice, we use a variable.
        TRAVIS_BUILD_DIR_MOUNT_POINT=/tmp/GEOSX
        # We need to keep track of the building container (hence the `CONTAINER_NAME`)
        # so we can extract the data from it later (if needed). Another solution would have been to use a mount point,
        # but that would not have solved the problem for the TPLs (we would require extra action to copy them to the mount point).
        CONTAINER_NAME=geosx_build
        # Now we can build GEOSX.
        while sleep 5m; do echo "... still building ..."; done & 
        docker run \
        --name=${CONTAINER_NAME} \
        --volume=${BUILD_SOURCESDIRECTORY}:${TRAVIS_BUILD_DIR_MOUNT_POINT} \
        --cap-add=ALL \
        -e HOST_CONFIG=${HOST_CONFIG:-host-configs/environment.cmake} \
        -e CMAKE_BUILD_TYPE \
        -e GEOSX_DIR=${GEOSX_DIR} \
        -e ENABLE_HYPRE=${ENABLE_HYPRE:-OFF} \
        -e ENABLE_HYPRE_CUDA=${ENABLE_HYPRE_CUDA:-OFF} \
        -e ENABLE_TRILINOS=${ENABLE_TRILINOS:-ON} \
        ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG} \
        ${TRAVIS_BUILD_DIR_MOUNT_POINT}/scripts/travis_build_and_test.sh ${BUILD_AND_TEST_ARGS};
  - job: check_submodules
    steps:
    - script: scripts/test_submodule_updated.sh
      displayName: 'Run test_submodule_updated.sh'
  - job: check_pr_is_assigned
    steps:
    - script: |
        is_assigned=$(curl -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/$(Build.Repository.Name)/pulls/$(System.PullRequest.PullRequestNumber) | \
        jq ".assignees|length");
        if [[ $is_assigned == 0 ]]; then exit 1; else exit 0; fi
      displayName: 'Check PR is assigned'
- stage: builds
  condition: succeededOrFailed()
  jobs:
  - job: build_and_test
    # Use maximum time limit
    timeoutInMinutes: 0
    strategy:
      matrix:
        # Builds only the geosx executable (timeout when building tests)
        ubuntu18_cuda10_clang8_gcc8_3_1_openmpi2_debug:
          JOB_NAME: 'Ubuntu CUDA debug (18.04, clang 8.0.0 + gcc 8.3.1, open-mpi 2.1.1, cuda-10.1.243)'
          DOCKER_REPOSITORY: 'geosx/ubuntu18.04-clang8.0.0-cuda10.1.243'
          CMAKE_BUILD_TYPE: 'Debug'
          BUILD_AND_TEST_ARGS: "--disable-unit-tests --build-exe-only"
          ENABLE_HYPRE: ON
          ENABLE_HYPRE_CUDA: ON
          ENABLE_TRILINOS: OFF
        ubuntu18_cuda10_clang8_gcc8_3_1_openmpi2_release:
          JOB_NAME: 'Ubuntu CUDA (18.04, clang 8.0.0 + gcc 8.3.1, open-mpi 2.1.1, cuda-10.1.243)'
          DOCKER_REPOSITORY: 'geosx/ubuntu18.04-clang8.0.0-cuda10.1.243'
          CMAKE_BUILD_TYPE: 'Release'
          BUILD_AND_TEST_ARGS: "--disable-unit-tests"
          ENABLE_HYPRE: ON
          ENABLE_HYPRE_CUDA: ON
          ENABLE_TRILINOS: OFF
        centos7_6_cuda10_gcc8_3_1_openmpi1_10_release:
          JOB_NAME: 'Centos (7.6, gcc 8.3.1, open-mpi 1.10.7, cuda 10.1.243)'
          DOCKER_REPOSITORY: 'geosx/centos7.6.1810-gcc8.3.1-cuda10.1.243'
          CMAKE_BUILD_TYPE: 'Release'
          BUILD_AND_TEST_ARGS: "--disable-unit-tests"
        centos7_7_clang9_openmpi1_10_release:
          JOB_NAME: 'Centos (7.7, clang 9.0.0 + gcc 4.9.3, open-mpi 1.10.7)'
          DOCKER_REPOSITORY: 'geosx/centos7.7.1908-clang9.0.0'
          CMAKE_BUILD_TYPE: 'Release'
        ubuntu20_gcc9_openmpi4_release:
          JOB_NAME: 'Ubuntu (20.04, gcc 9.3.0, open-mpi 4.0.3)'
          DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc9'
          CMAKE_BUILD_TYPE: 'Release'
        ubuntu20_gcc10_openmpi4_debug:
          JOB_NAME: 'Ubuntu debug (20.04, gcc 10.3.0, open-mpi 4.0.3)'
          DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc10'
          CMAKE_BUILD_TYPE: 'Debug'
        ubuntu20_gcc10_openmpi4_release:
          JOB_NAME: 'Ubuntu (20.04, gcc 10.3.0, open-mpi 4.0.3)'
          DOCKER_REPOSITORY: 'geosx/ubuntu20.04-gcc10'
          CMAKE_BUILD_TYPE: 'Release'
    steps:
    - checkout: self
      clean: true
      submodules: false
    - script: |
        git submodule update --init --recursive src/cmake/blt
        git submodule update --init --recursive src/coreComponents/LvArray
        git submodule update --init --recursive src/coreComponents/constitutive/PVTPackage
        git submodule update --init src/coreComponents/mesh/PAMELA
        git submodule update --init --recursive src/coreComponents/fileIO/coupling/hdf5_interface
        # The linux build relies on two environment variables DOCKER_REPOSITORY and GEOSX_TPL_TAG to define the TPL version.
        # And another CMAKE_BUILD_TYPE to define the build type we want for GEOSX.
        # Optional BUILD_AND_TEST_ARGS to pass arguments to travis_build_and_test.sh script.
        #
        # We extract the location of the GEOSX_TPL from the container...
        GEOSX_TPL_DIR=$(docker run --rm ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG} /bin/bash -c 'echo ${GEOSX_TPL_DIR}')
        # ... so we can install GEOSX alongside. This is assumed for bundling the binaries, so consider modifying with care.
        GEOSX_DIR=${GEOSX_TPL_DIR}/../GEOSX-INSTALL
        # We need to know where the code folder is mounted inside the container so we can run the script at the proper location!
        # Since this information is repeated twice, we use a variable.
        TRAVIS_BUILD_DIR_MOUNT_POINT=/tmp/GEOSX
        # We need to keep track of the building container (hence the `CONTAINER_NAME`)
        # so we can extract the data from it later (if needed). Another solution would have been to use a mount point,
        # but that would not have solved the problem for the TPLs (we would require extra action to copy them to the mount point).
        CONTAINER_NAME=geosx_build
        # Now we can build GEOSX.
        while sleep 5m; do echo "... still building ..."; done & 
        docker run \
        --name=${CONTAINER_NAME} \
        --volume=${BUILD_SOURCESDIRECTORY}:${TRAVIS_BUILD_DIR_MOUNT_POINT} \
        --cap-add=ALL \
        -e HOST_CONFIG=${HOST_CONFIG:-host-configs/environment.cmake} \
        -e CMAKE_BUILD_TYPE \
        -e GEOSX_DIR=${GEOSX_DIR} \
        -e ENABLE_HYPRE=${ENABLE_HYPRE:-OFF} \
        -e ENABLE_HYPRE_CUDA=${ENABLE_HYPRE_CUDA:-OFF} \
        -e ENABLE_TRILINOS=${ENABLE_TRILINOS:-ON} \
        ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG} \
        ${TRAVIS_BUILD_DIR_MOUNT_POINT}/scripts/travis_build_and_test.sh ${BUILD_AND_TEST_ARGS};
      displayName: '($(JOB_NAME))'
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'cTest'
        testResultsFiles: '**/Test.xml'
        testRunTitle: '$(JOB_NAME) Tests'
        failTaskOnFailedTests: true

