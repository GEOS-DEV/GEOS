<?xml version="1.0"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<xsd:annotation>
		<xsd:documentation xml:lang="en">GEOSX Input Schema</xsd:documentation>
	</xsd:annotation>
	<xsd:simpleType name="R1Tensor">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="R1Tensor32">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*){2}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="R2SymTensor">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\s*\{\s*([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*){5}[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="geosx_dataRepository_PlotLevel">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|[+-]?[\d]+" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="globalIndex">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|[+-]?[\d]+" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="globalIndex_array">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="globalIndex_array2d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\},\s*)*\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="globalIndex_array3d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\},\s*)*\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}\s*\},\s*)*\{\s*(\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\},\s*)*\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="integer">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|[+-]?[\d]+" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="integer_array">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="integer_array2d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\},\s*)*\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="integer_array3d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\},\s*)*\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}\s*\},\s*)*\{\s*(\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\},\s*)*\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="localIndex">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|[+-]?[\d]+" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="localIndex_array">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="localIndex_array2d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\},\s*)*\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="localIndex_array3d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\},\s*)*\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}\s*\},\s*)*\{\s*(\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\},\s*)*\{\s*(([+-]?[\d]+,\s*)*[+-]?[\d]+)?\s*\}\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="mapPair">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|[^,\{\}]*" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="path">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|[^,\{\}]*" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="path_array">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(([^,\{\}]*,\s*)*[^,\{\}]*)?\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="real32">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="real32_array">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="real32_array2d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\},\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="real32_array3d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\},\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}\s*\},\s*)*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\},\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="real64">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*)" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="real64_array">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="real64_array2d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\},\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="real64_array3d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\},\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}\s*\},\s*)*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\},\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="real64_array4d">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(\{\s*(\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\},\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}\s*\},\s*)*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\},\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}\s*\}\s*\},\s*)*\{\s*(\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\},\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}\s*\},\s*)*\{\s*(\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\},\s*)*\{\s*(([+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*),\s*)*[+-]?[\d]*([\d]\.?|\.[\d])[\d]*([eE][-+]?[\d]+|\s*))?\s*\}\s*\}\s*\}\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="string">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|[^,\{\}]*" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="string_array">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|\{\s*(([^,\{\}]*,\s*)*[^,\{\}]*)?\s*\}" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:element name="Problem" type="ProblemType" />
	<xsd:complexType name="ProblemType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="Benchmarks" type="BenchmarksType" maxOccurs="1" />
			<xsd:element name="Events" type="EventsType" minOccurs="1" maxOccurs="1" />
			<xsd:element name="FieldSpecifications" type="FieldSpecificationsType" maxOccurs="1" />
			<xsd:element name="Functions" type="FunctionsType" maxOccurs="1" />
			<xsd:element name="Geometry" type="GeometryType" maxOccurs="1" />
			<xsd:element name="Included" type="IncludedType" maxOccurs="1" />
			<xsd:element name="Mesh" type="MeshType" minOccurs="1" maxOccurs="1" />
			<xsd:element name="NumericalMethods" type="NumericalMethodsType" maxOccurs="1" />
			<xsd:element name="Outputs" type="OutputsType" minOccurs="1" maxOccurs="1" />
			<xsd:element name="Parameters" type="ParametersType" maxOccurs="1" />
			<xsd:element name="Solvers" type="SolversType" minOccurs="1" maxOccurs="1" />
			<xsd:element name="Tasks" type="TasksType" maxOccurs="1" />
			<xsd:element name="commandLine" type="commandLineType" />
			<xsd:element name="domain" type="domainType" />
			<xsd:element name="Constitutive" type="ConstitutiveType" maxOccurs="1" />
			<xsd:element name="ElementRegions" type="ElementRegionsType" maxOccurs="1" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="BenchmarksType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="lassen" type="lassenType" maxOccurs="1" />
			<xsd:element name="quartz" type="quartzType" maxOccurs="1" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="lassenType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="Run" type="RunType" maxOccurs="1" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="RunType" />
	<xsd:complexType name="quartzType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="Run" type="RunType" maxOccurs="1" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="EventsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="HaltEvent" type="HaltEventType" />
			<xsd:element name="PeriodicEvent" type="PeriodicEventType" />
			<xsd:element name="SoloEvent" type="SoloEventType" />
		</xsd:choice>
		<!--currentSubEvent => Index of the current subevent.-->
		<xsd:attribute name="currentSubEvent" type="integer" />
		<!--cycle => Current simulation cycle number.-->
		<xsd:attribute name="cycle" type="integer" />
		<!--dt => Current simulation timestep.-->
		<xsd:attribute name="dt" type="real64" />
		<!--time => Current simulation time.-->
		<xsd:attribute name="time" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="HaltEventType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="HaltEvent" type="HaltEventType" />
			<xsd:element name="PeriodicEvent" type="PeriodicEventType" />
			<xsd:element name="SoloEvent" type="SoloEventType" />
		</xsd:choice>
		<!--currentSubEvent => Index of the current subevent-->
		<xsd:attribute name="currentSubEvent" type="integer" />
		<!--eventForecast => Indicates when the event is expected to execute-->
		<xsd:attribute name="eventForecast" type="integer" />
		<!--isTargetExecuting => Index of the current subevent-->
		<xsd:attribute name="isTargetExecuting" type="integer" />
		<!--lastCycle => Last event occurrence (cycle)-->
		<xsd:attribute name="lastCycle" type="integer" />
		<!--lastTime => Last event occurrence (time)-->
		<xsd:attribute name="lastTime" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="PeriodicEventType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="HaltEvent" type="HaltEventType" />
			<xsd:element name="PeriodicEvent" type="PeriodicEventType" />
			<xsd:element name="SoloEvent" type="SoloEventType" />
		</xsd:choice>
		<!--currentSubEvent => Index of the current subevent-->
		<xsd:attribute name="currentSubEvent" type="integer" />
		<!--eventForecast => Indicates when the event is expected to execute-->
		<xsd:attribute name="eventForecast" type="integer" />
		<!--isTargetExecuting => Index of the current subevent-->
		<xsd:attribute name="isTargetExecuting" type="integer" />
		<!--lastCycle => Last event occurrence (cycle)-->
		<xsd:attribute name="lastCycle" type="integer" />
		<!--lastTime => Last event occurrence (time)-->
		<xsd:attribute name="lastTime" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="SoloEventType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="HaltEvent" type="HaltEventType" />
			<xsd:element name="PeriodicEvent" type="PeriodicEventType" />
			<xsd:element name="SoloEvent" type="SoloEventType" />
		</xsd:choice>
		<!--currentSubEvent => Index of the current subevent-->
		<xsd:attribute name="currentSubEvent" type="integer" />
		<!--eventForecast => Indicates when the event is expected to execute-->
		<xsd:attribute name="eventForecast" type="integer" />
		<!--isTargetExecuting => Index of the current subevent-->
		<xsd:attribute name="isTargetExecuting" type="integer" />
		<!--lastCycle => Last event occurrence (cycle)-->
		<xsd:attribute name="lastCycle" type="integer" />
		<!--lastTime => Last event occurrence (time)-->
		<xsd:attribute name="lastTime" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="FieldSpecificationsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="Aquifer" type="AquiferType" />
			<xsd:element name="Dirichlet" type="DirichletType" />
			<xsd:element name="FieldSpecification" type="FieldSpecificationType" />
			<xsd:element name="HydrostaticEquilibrium" type="HydrostaticEquilibriumType" />
			<xsd:element name="PML" type="PMLType" />
			<xsd:element name="SourceFlux" type="SourceFluxType" />
			<xsd:element name="Traction" type="TractionType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="AquiferType">
		<!--component => Component of field (if tensor) to apply boundary condition to.-->
		<xsd:attribute name="component" type="integer" />
		<!--cumulativeFlux => (no description available)-->
		<xsd:attribute name="cumulativeFlux" type="real64" />
		<!--fieldName => Name of field that boundary condition is applied to.-->
		<xsd:attribute name="fieldName" type="string" />
		<!--objectPath => Path to the target field-->
		<xsd:attribute name="objectPath" type="string" />
	</xsd:complexType>
	<xsd:complexType name="DirichletType" />
	<xsd:complexType name="FieldSpecificationType" />
	<xsd:complexType name="HydrostaticEquilibriumType">
		<!--component => Component of field (if tensor) to apply boundary condition to.-->
		<xsd:attribute name="component" type="integer" />
		<!--fieldName => Name of field that boundary condition is applied to.-->
		<xsd:attribute name="fieldName" type="string" />
		<!--initialCondition => Boundary condition is applied as an initial condition.-->
		<xsd:attribute name="initialCondition" type="integer" />
		<!--setNames => Name of sets that boundary condition is applied to.-->
		<xsd:attribute name="setNames" type="string_array" />
	</xsd:complexType>
	<xsd:complexType name="PMLType">
		<!--fieldName => Name of field that boundary condition is applied to.-->
		<xsd:attribute name="fieldName" type="string" />
		<!--initialCondition => Boundary condition is applied as an initial condition.-->
		<xsd:attribute name="initialCondition" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="SourceFluxType" />
	<xsd:complexType name="TractionType">
		<!--component => Component of field (if tensor) to apply boundary condition to.-->
		<xsd:attribute name="component" type="integer" />
		<!--fieldName => Name of field that boundary condition is applied to.-->
		<xsd:attribute name="fieldName" type="string" />
	</xsd:complexType>
	<xsd:complexType name="FunctionsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="CompositeFunction" type="CompositeFunctionType" />
			<xsd:element name="MultivariableTableFunction" type="MultivariableTableFunctionType" />
			<xsd:element name="SymbolicFunction" type="SymbolicFunctionType" />
			<xsd:element name="TableFunction" type="TableFunctionType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="CompositeFunctionType" />
	<xsd:complexType name="MultivariableTableFunctionType" />
	<xsd:complexType name="SymbolicFunctionType" />
	<xsd:complexType name="TableFunctionType" />
	<xsd:complexType name="GeometryType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="BoundedPlane" type="BoundedPlaneType" />
			<xsd:element name="Box" type="BoxType" />
			<xsd:element name="Cylinder" type="CylinderType" />
			<xsd:element name="ThickPlane" type="ThickPlaneType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="BoundedPlaneType" />
	<xsd:complexType name="BoxType">
		<!--center => (no description available)-->
		<xsd:attribute name="center" type="R1Tensor" />
		<!--cosStrike => (no description available)-->
		<xsd:attribute name="cosStrike" type="real64" />
		<!--sinStrike => (no description available)-->
		<xsd:attribute name="sinStrike" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="CylinderType" />
	<xsd:complexType name="ThickPlaneType" />
	<xsd:complexType name="IncludedType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="File" type="FileType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="FileType" />
	<xsd:complexType name="MeshType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="InternalMesh" type="InternalMeshType" />
			<xsd:element name="InternalWell" type="InternalWellType" />
			<xsd:element name="InternalWellbore" type="InternalWellboreType" />
			<xsd:element name="VTKMesh" type="VTKMeshType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="InternalMeshType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="meshLevels" type="meshLevelsType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="InternalWellType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="Perforation" type="PerforationType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="PerforationType" />
	<xsd:complexType name="InternalWellboreType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="meshLevels" type="meshLevelsType" />
		</xsd:choice>
		<!--nx => Number of elements in the x-direction within each mesh block-->
		<xsd:attribute name="nx" type="integer_array" />
		<!--ny => Number of elements in the y-direction within each mesh block-->
		<xsd:attribute name="ny" type="integer_array" />
		<!--xCoords => x-coordinates of each mesh block vertex-->
		<xsd:attribute name="xCoords" type="real64_array" />
		<!--yCoords => y-coordinates of each mesh block vertex-->
		<xsd:attribute name="yCoords" type="real64_array" />
	</xsd:complexType>
	<xsd:complexType name="VTKMeshType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="meshLevels" type="meshLevelsType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="NumericalMethodsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="FiniteElements" type="FiniteElementsType" maxOccurs="1" />
			<xsd:element name="FiniteVolume" type="FiniteVolumeType" maxOccurs="1" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="FiniteElementsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="FiniteElementSpace" type="FiniteElementSpaceType" />
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="FiniteElementSpaceType" />
	<xsd:complexType name="LinearSolverParametersType" />
	<xsd:complexType name="NonlinearSolverParametersType">
		<!--newtonNumberOfIterations => Number of Newton's iterations.-->
		<xsd:attribute name="newtonNumberOfIterations" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="FiniteVolumeType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="HybridMimeticDiscretization" type="HybridMimeticDiscretizationType" />
			<xsd:element name="TwoPointFluxApproximation" type="TwoPointFluxApproximationType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="HybridMimeticDiscretizationType" />
	<xsd:complexType name="TwoPointFluxApproximationType">
		<!--cellStencil => (no description available)-->
		<xsd:attribute name="cellStencil" type="geosx_CellElementStencilTPFA" />
		<!--coefficientName => Name of coefficient field-->
		<xsd:attribute name="coefficientName" type="string" />
		<!--edfmStencil => (no description available)-->
		<xsd:attribute name="edfmStencil" type="geosx_EmbeddedSurfaceToCellStencil" />
		<!--faceElementToCellStencil => (no description available)-->
		<xsd:attribute name="faceElementToCellStencil" type="geosx_FaceElementToCellStencil" />
		<!--fieldName => Name of primary solution field-->
		<xsd:attribute name="fieldName" type="string" />
		<!--fractureStencil => (no description available)-->
		<xsd:attribute name="fractureStencil" type="geosx_SurfaceElementStencil" />
		<!--targetRegions => List of regions to build the stencil for-->
		<xsd:attribute name="targetRegions" type="geosx_mapBase&lt;string, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="OutputsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="Blueprint" type="BlueprintType" />
			<xsd:element name="ChomboIO" type="ChomboIOType" />
			<xsd:element name="Python" type="PythonType" />
			<xsd:element name="Restart" type="RestartType" />
			<xsd:element name="Silo" type="SiloType" />
			<xsd:element name="TimeHistory" type="TimeHistoryType" />
			<xsd:element name="VTK" type="VTKType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="BlueprintType" />
	<xsd:complexType name="ChomboIOType" />
	<xsd:complexType name="PythonType" />
	<xsd:complexType name="RestartType" />
	<xsd:complexType name="SiloType" />
	<xsd:complexType name="TimeHistoryType">
		<!--restart => The current history record to be written, on restart from an earlier time allows use to remove invalid future history.-->
		<xsd:attribute name="restart" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="VTKType" />
	<xsd:complexType name="ParametersType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="Parameter" type="ParameterType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="ParameterType" />
	<xsd:complexType name="SolversType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="AcousticSEM" type="AcousticSEMType" />
			<xsd:element name="CompositionalMultiphaseFVM" type="CompositionalMultiphaseFVMType" />
			<xsd:element name="CompositionalMultiphaseHybridFVM" type="CompositionalMultiphaseHybridFVMType" />
			<xsd:element name="CompositionalMultiphaseReservoir" type="CompositionalMultiphaseReservoirType" />
			<xsd:element name="CompositionalMultiphaseWell" type="CompositionalMultiphaseWellType" />
			<xsd:element name="ElasticSEM" type="ElasticSEMType" />
			<xsd:element name="EmbeddedSurfaceGenerator" type="EmbeddedSurfaceGeneratorType" />
			<xsd:element name="FlowProppantTransport" type="FlowProppantTransportType" />
			<xsd:element name="Hydrofracture" type="HydrofractureType" />
			<xsd:element name="LagrangianContact" type="LagrangianContactType" />
			<xsd:element name="LaplaceFEM" type="LaplaceFEMType" />
			<xsd:element name="MultiphasePoromechanics" type="MultiphasePoromechanicsType" />
			<xsd:element name="MultiphasePoromechanicsReservoir" type="MultiphasePoromechanicsReservoirType" />
			<xsd:element name="PhaseFieldDamageFEM" type="PhaseFieldDamageFEMType" />
			<xsd:element name="PhaseFieldFracture" type="PhaseFieldFractureType" />
			<xsd:element name="ProppantTransport" type="ProppantTransportType" />
			<xsd:element name="ReactiveCompositionalMultiphaseOBL" type="ReactiveCompositionalMultiphaseOBLType" />
			<xsd:element name="SinglePhaseFVM" type="SinglePhaseFVMType" />
			<xsd:element name="SinglePhaseHybridFVM" type="SinglePhaseHybridFVMType" />
			<xsd:element name="SinglePhasePoromechanics" type="SinglePhasePoromechanicsType" />
			<xsd:element name="SinglePhasePoromechanicsConformingFractures" type="SinglePhasePoromechanicsConformingFracturesType" />
			<xsd:element name="SinglePhasePoromechanicsEmbeddedFractures" type="SinglePhasePoromechanicsEmbeddedFracturesType" />
			<xsd:element name="SinglePhasePoromechanicsReservoir" type="SinglePhasePoromechanicsReservoirType" />
			<xsd:element name="SinglePhaseProppantFVM" type="SinglePhaseProppantFVMType" />
			<xsd:element name="SinglePhaseReservoir" type="SinglePhaseReservoirType" />
			<xsd:element name="SinglePhaseWell" type="SinglePhaseWellType" />
			<xsd:element name="SolidMechanicsEmbeddedFractures" type="SolidMechanicsEmbeddedFracturesType" />
			<xsd:element name="SolidMechanicsLagrangianSSLE" type="SolidMechanicsLagrangianSSLEType" />
			<xsd:element name="SolidMechanics_LagrangianFEM" type="SolidMechanics_LagrangianFEMType" />
			<xsd:element name="SurfaceGenerator" type="SurfaceGeneratorType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="AcousticSEMType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--indexSeismoTrace => Count for output pressure at receivers-->
		<xsd:attribute name="indexSeismoTrace" type="integer" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
		<!--pressureNp1AtReceivers => Pressure value at each receiver for each timestep-->
		<xsd:attribute name="pressureNp1AtReceivers" type="real32_array2d" />
		<!--receiverConstants => Constant part of the receiver for the nodes listed in m_receiverNodeIds-->
		<xsd:attribute name="receiverConstants" type="real64_array2d" />
		<!--receiverIsLocal => Flag that indicates whether the receiver is local to this MPI rank-->
		<xsd:attribute name="receiverIsLocal" type="integer_array" />
		<!--receiverNodeIds => Indices of the nodes (in the right order) for each receiver point-->
		<xsd:attribute name="receiverNodeIds" type="integer_array2d" />
		<!--sourceConstants => Constant part of the source for the nodes listed in m_sourceNodeIds-->
		<xsd:attribute name="sourceConstants" type="real64_array2d" />
		<!--sourceIsAccessible => Flag that indicates whether the source is accessible to this MPI rank-->
		<xsd:attribute name="sourceIsAccessible" type="integer_array" />
		<!--sourceNodeIds => Indices of the nodes (in the right order) for each source point-->
		<xsd:attribute name="sourceNodeIds" type="integer_array2d" />
		<!--sourceValue => Source Value of the sources-->
		<xsd:attribute name="sourceValue" type="real32_array2d" />
		<!--useDAS => Flag to indicate if DAS type of data will be modeled-->
		<xsd:attribute name="useDAS" type="integer" />
		<!--usePML => Flag to apply PML-->
		<xsd:attribute name="usePML" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="SolverStatisticsType">
		<!--numDiscardedLinearIterations => Cumulative number of discarded linear iterations-->
		<xsd:attribute name="numDiscardedLinearIterations" type="integer" />
		<!--numDiscardedNonlinearIterations => Cumulative number of discarded nonlinear iterations-->
		<xsd:attribute name="numDiscardedNonlinearIterations" type="integer" />
		<!--numDiscardedOuterLoopIterations => Cumulative number of discarded outer loop iterations-->
		<xsd:attribute name="numDiscardedOuterLoopIterations" type="integer" />
		<!--numSuccessfulLinearIterations => Cumulative number of successful linear iterations-->
		<xsd:attribute name="numSuccessfulLinearIterations" type="integer" />
		<!--numSuccessfulNonlinearIterations => Cumulative number of successful nonlinear iterations-->
		<xsd:attribute name="numSuccessfulNonlinearIterations" type="integer" />
		<!--numSuccessfulOuterLoopIterations => Cumulative number of successful outer loop iterations-->
		<xsd:attribute name="numSuccessfulOuterLoopIterations" type="integer" />
		<!--numTimeStepCuts => Number of time step cuts-->
		<xsd:attribute name="numTimeStepCuts" type="integer" />
		<!--numTimeSteps => Number of time steps-->
		<xsd:attribute name="numTimeSteps" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="CompositionalMultiphaseFVMType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="CompositionalMultiphaseHybridFVMType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="CompositionalMultiphaseReservoirType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="CompositionalMultiphaseWellType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
			<xsd:element name="WellControls" type="WellControlsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="WellControlsType">
		<!--currentControl => Current well control-->
		<xsd:attribute name="currentControl" type="geosx_WellControls_Control" />
	</xsd:complexType>
	<xsd:simpleType name="geosx_WellControls_Control">
		<xsd:restriction base="xsd:string">
			<xsd:pattern value=".*[\[\]`$].*|BHP|phaseVolRate|totalVolRate|uninitialized" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:complexType name="ElasticSEMType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--displacementXNp1AtReceivers => Displacement value at each receiver for each timestep (x-component)-->
		<xsd:attribute name="displacementXNp1AtReceivers" type="real32_array2d" />
		<!--displacementYNp1AtReceivers => Displacement value at each receiver for each timestep (y-component)-->
		<xsd:attribute name="displacementYNp1AtReceivers" type="real32_array2d" />
		<!--displacementZNp1AtReceivers => Displacement value at each receiver for each timestep (z-component)-->
		<xsd:attribute name="displacementZNp1AtReceivers" type="real32_array2d" />
		<!--indexSeismoTrace => Count for output pressure at receivers-->
		<xsd:attribute name="indexSeismoTrace" type="integer" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
		<!--receiverIsLocal => Flag that indicates whether the receiver is local to this MPI rank-->
		<xsd:attribute name="receiverIsLocal" type="integer_array" />
		<!--receiverNodeIds => Indices of the nodes (in the right order) for each receiver point-->
		<xsd:attribute name="receiverNodeIds" type="integer_array2d" />
		<!--sourceConstants => Constant part of the receiver for the nodes listed in m_receiverNodeIds-->
		<xsd:attribute name="sourceConstants" type="real64_array2d" />
		<!--sourceIsAccessible => Flag that indicates whether the source is accessible to this MPI rank-->
		<xsd:attribute name="sourceIsAccessible" type="integer_array" />
		<!--sourceNodeIds => Indices of the nodes (in the right order) for each source point-->
		<xsd:attribute name="sourceNodeIds" type="integer_array2d" />
		<!--sourceValue => Source Value of the sources-->
		<xsd:attribute name="sourceValue" type="real32_array2d" />
		<!--useDAS => Flag to indicate if DAS type of data will be modeled-->
		<xsd:attribute name="useDAS" type="integer" />
		<!--usePML => Flag to apply PML-->
		<xsd:attribute name="usePML" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="EmbeddedSurfaceGeneratorType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="FlowProppantTransportType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="HydrofractureType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="LagrangianContactType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="LaplaceFEMType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="MultiphasePoromechanicsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
		<!--performStressInitialization => Flag to indicate that the solver is going to perform stress initialization-->
		<xsd:attribute name="performStressInitialization" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="MultiphasePoromechanicsReservoirType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="PhaseFieldDamageFEMType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="PhaseFieldFractureType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="ProppantTransportType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="ReactiveCompositionalMultiphaseOBLType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SinglePhaseFVMType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SinglePhaseHybridFVMType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SinglePhasePoromechanicsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
		<!--performStressInitialization => Flag to indicate that the solver is going to perform stress initialization-->
		<xsd:attribute name="performStressInitialization" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="SinglePhasePoromechanicsConformingFracturesType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SinglePhasePoromechanicsEmbeddedFracturesType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
		<!--performStressInitialization => Flag to indicate that the solver is going to perform stress initialization-->
		<xsd:attribute name="performStressInitialization" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="SinglePhasePoromechanicsReservoirType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SinglePhaseProppantFVMType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SinglePhaseReservoirType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SinglePhaseWellType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
			<xsd:element name="WellControls" type="WellControlsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SolidMechanicsEmbeddedFracturesType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SolidMechanicsLagrangianSSLEType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxForce => The maximum force contribution in the problem domain.-->
		<xsd:attribute name="maxForce" type="real64" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SolidMechanics_LagrangianFEMType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--maxForce => The maximum force contribution in the problem domain.-->
		<xsd:attribute name="maxForce" type="real64" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="SurfaceGeneratorType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="LinearSolverParameters" type="LinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="NonlinearSolverParameters" type="NonlinearSolverParametersType" maxOccurs="1" />
			<xsd:element name="SolverStatistics" type="SolverStatisticsType" />
		</xsd:choice>
		<!--discretization => Name of discretization object (defined in the :ref:`NumericalMethodsManager`) to use for this solver. For instance, if this is a Finite Element Solver, the name of a :ref:`FiniteElement` should be specified. If this is a Finite Volume Method, the name of a :ref:`FiniteVolume` discretization should be specified.-->
		<xsd:attribute name="discretization" type="string" />
		<!--failCriterion => (no description available)-->
		<xsd:attribute name="failCriterion" type="integer" />
		<!--maxStableDt => Value of the Maximum Stable Timestep for this solver.-->
		<xsd:attribute name="maxStableDt" type="real64" />
		<!--meshTargets => MeshBody/Region combinations that the solver will be applied to.-->
		<xsd:attribute name="meshTargets" type="geosx_mapBase&lt;std_pair&lt;string, string &gt;, LvArray_Array&lt;string, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;, std_integral_constant&lt;bool, true&gt; &gt;" />
		<!--tipEdges => Set containing all the tip edges-->
		<xsd:attribute name="tipEdges" type="LvArray_SortedArray&lt;int, int, LvArray_ChaiBuffer&gt;" />
		<!--tipFaces => Set containing all the tip faces-->
		<xsd:attribute name="tipFaces" type="LvArray_SortedArray&lt;int, int, LvArray_ChaiBuffer&gt;" />
		<!--tipNodes => Set containing all the nodes at the fracture tip-->
		<xsd:attribute name="tipNodes" type="LvArray_SortedArray&lt;int, int, LvArray_ChaiBuffer&gt;" />
		<!--trailingFaces => Set containing all the trailing faces-->
		<xsd:attribute name="trailingFaces" type="LvArray_SortedArray&lt;int, int, LvArray_ChaiBuffer&gt;" />
	</xsd:complexType>
	<xsd:complexType name="TasksType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="CompositionalMultiphaseStatistics" type="CompositionalMultiphaseStatisticsType" />
			<xsd:element name="MultiphasePoromechanicsInitialization" type="MultiphasePoromechanicsInitializationType" />
			<xsd:element name="PVTDriver" type="PVTDriverType" />
			<xsd:element name="PackCollection" type="PackCollectionType" />
			<xsd:element name="ReactiveFluidDriver" type="ReactiveFluidDriverType" />
			<xsd:element name="RelpermDriver" type="RelpermDriverType" />
			<xsd:element name="SinglePhasePoromechanicsInitialization" type="SinglePhasePoromechanicsInitializationType" />
			<xsd:element name="SinglePhaseStatistics" type="SinglePhaseStatisticsType" />
			<xsd:element name="SolidMechanicsStateReset" type="SolidMechanicsStateResetType" />
			<xsd:element name="SolidMechanicsStatistics" type="SolidMechanicsStatisticsType" />
			<xsd:element name="TriaxialDriver" type="TriaxialDriverType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="CompositionalMultiphaseStatisticsType" />
	<xsd:complexType name="MultiphasePoromechanicsInitializationType" />
	<xsd:complexType name="PVTDriverType" />
	<xsd:complexType name="PackCollectionType" />
	<xsd:complexType name="ReactiveFluidDriverType" />
	<xsd:complexType name="RelpermDriverType" />
	<xsd:complexType name="SinglePhasePoromechanicsInitializationType" />
	<xsd:complexType name="SinglePhaseStatisticsType" />
	<xsd:complexType name="SolidMechanicsStateResetType" />
	<xsd:complexType name="SolidMechanicsStatisticsType" />
	<xsd:complexType name="TriaxialDriverType" />
	<xsd:complexType name="commandLineType">
		<!--beginFromRestart => Flag to indicate restart run.-->
		<xsd:attribute name="beginFromRestart" type="integer" />
		<!--inputFileName => Name of the input xml file.-->
		<xsd:attribute name="inputFileName" type="string" />
		<!--outputDirectory => Directory in which to put the output files, if not specified defaults to the current directory.-->
		<xsd:attribute name="outputDirectory" type="string" />
		<!--overridePartitionNumbers => Flag to indicate partition number override-->
		<xsd:attribute name="overridePartitionNumbers" type="integer" />
		<!--problemName => Used in writing the output files, if not specified defaults to the name of the input file.-->
		<xsd:attribute name="problemName" type="string" />
		<!--restartFileName => Name of the restart file.-->
		<xsd:attribute name="restartFileName" type="string" />
		<!--schemaFileName => Name of the output schema-->
		<xsd:attribute name="schemaFileName" type="string" />
		<!--suppressPinned => Whether to disallow using pinned memory allocations for MPI communication buffers.-->
		<xsd:attribute name="suppressPinned" type="integer" />
		<!--useNonblockingMPI => Whether to prefer using non-blocking MPI communication where implemented (results in non-deterministic DOF numbering).-->
		<xsd:attribute name="useNonblockingMPI" type="integer" />
		<!--xPartitionsOverride => Number of partitions in the x-direction-->
		<xsd:attribute name="xPartitionsOverride" type="integer" />
		<!--yPartitionsOverride => Number of partitions in the y-direction-->
		<xsd:attribute name="yPartitionsOverride" type="integer" />
		<!--zPartitionsOverride => Number of partitions in the z-direction-->
		<xsd:attribute name="zPartitionsOverride" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="domainType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="Constitutive" type="ConstitutiveType" maxOccurs="1" />
			<xsd:element name="MeshBodies" type="MeshBodiesType" />
		</xsd:choice>
		<!--Neighbors => (no description available)-->
		<xsd:attribute name="Neighbors" type="std_vector&lt;geosx_NeighborCommunicator, std_allocator&lt;geosx_NeighborCommunicator&gt; &gt;" />
		<!--partitionManager => (no description available)-->
		<xsd:attribute name="partitionManager" type="geosx_PartitionBase" />
	</xsd:complexType>
	<xsd:complexType name="ConstitutiveType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="BiotPorosity" type="BiotPorosityType" />
			<xsd:element name="BlackOilFluid" type="BlackOilFluidType" />
			<xsd:element name="BrooksCoreyBakerRelativePermeability" type="BrooksCoreyBakerRelativePermeabilityType" />
			<xsd:element name="BrooksCoreyCapillaryPressure" type="BrooksCoreyCapillaryPressureType" />
			<xsd:element name="BrooksCoreyRelativePermeability" type="BrooksCoreyRelativePermeabilityType" />
			<xsd:element name="CO2BrineEzrokhiFluid" type="CO2BrineEzrokhiFluidType" />
			<xsd:element name="CO2BrineEzrokhiThermalFluid" type="CO2BrineEzrokhiThermalFluidType" />
			<xsd:element name="CO2BrinePhillipsFluid" type="CO2BrinePhillipsFluidType" />
			<xsd:element name="CO2BrinePhillipsThermalFluid" type="CO2BrinePhillipsThermalFluidType" />
			<xsd:element name="CarmanKozenyPermeability" type="CarmanKozenyPermeabilityType" />
			<xsd:element name="CompositionalMultiphaseFluid" type="CompositionalMultiphaseFluidType" />
			<xsd:element name="CompressibleSinglePhaseFluid" type="CompressibleSinglePhaseFluidType" />
			<xsd:element name="CompressibleSolidCarmanKozenyPermeability" type="CompressibleSolidCarmanKozenyPermeabilityType" />
			<xsd:element name="CompressibleSolidConstantPermeability" type="CompressibleSolidConstantPermeabilityType" />
			<xsd:element name="CompressibleSolidParallelPlatesPermeability" type="CompressibleSolidParallelPlatesPermeabilityType" />
			<xsd:element name="CompressibleSolidSlipDependentPermeability" type="CompressibleSolidSlipDependentPermeabilityType" />
			<xsd:element name="CompressibleSolidWillisRichardsPermeability" type="CompressibleSolidWillisRichardsPermeabilityType" />
			<xsd:element name="ConstantPermeability" type="ConstantPermeabilityType" />
			<xsd:element name="Coulomb" type="CoulombType" />
			<xsd:element name="DamageElasticIsotropic" type="DamageElasticIsotropicType" />
			<xsd:element name="DamageSpectralElasticIsotropic" type="DamageSpectralElasticIsotropicType" />
			<xsd:element name="DamageVolDevElasticIsotropic" type="DamageVolDevElasticIsotropicType" />
			<xsd:element name="DeadOilFluid" type="DeadOilFluidType" />
			<xsd:element name="DelftEgg" type="DelftEggType" />
			<xsd:element name="DruckerPrager" type="DruckerPragerType" />
			<xsd:element name="ElasticIsotropic" type="ElasticIsotropicType" />
			<xsd:element name="ElasticIsotropicPressureDependent" type="ElasticIsotropicPressureDependentType" />
			<xsd:element name="ElasticOrthotropic" type="ElasticOrthotropicType" />
			<xsd:element name="ElasticTransverseIsotropic" type="ElasticTransverseIsotropicType" />
			<xsd:element name="ExtendedDruckerPrager" type="ExtendedDruckerPragerType" />
			<xsd:element name="FrictionlessContact" type="FrictionlessContactType" />
			<xsd:element name="JFunctionCapillaryPressure" type="JFunctionCapillaryPressureType" />
			<xsd:element name="ModifiedCamClay" type="ModifiedCamClayType" />
			<xsd:element name="MultiPhaseConstantThermalConductivity" type="MultiPhaseConstantThermalConductivityType" />
			<xsd:element name="MultiPhaseVolumeWeightedThermalConductivity" type="MultiPhaseVolumeWeightedThermalConductivityType" />
			<xsd:element name="NullModel" type="NullModelType" />
			<xsd:element name="ParallelPlatesPermeability" type="ParallelPlatesPermeabilityType" />
			<xsd:element name="ParticleFluid" type="ParticleFluidType" />
			<xsd:element name="PermeabilityBase" type="PermeabilityBaseType" />
			<xsd:element name="PorousDelftEgg" type="PorousDelftEggType" />
			<xsd:element name="PorousDruckerPrager" type="PorousDruckerPragerType" />
			<xsd:element name="PorousElasticIsotropic" type="PorousElasticIsotropicType" />
			<xsd:element name="PorousElasticOrthotropic" type="PorousElasticOrthotropicType" />
			<xsd:element name="PorousElasticTransverseIsotropic" type="PorousElasticTransverseIsotropicType" />
			<xsd:element name="PorousExtendedDruckerPrager" type="PorousExtendedDruckerPragerType" />
			<xsd:element name="PorousModifiedCamClay" type="PorousModifiedCamClayType" />
			<xsd:element name="PressurePorosity" type="PressurePorosityType" />
			<xsd:element name="ProppantPermeability" type="ProppantPermeabilityType" />
			<xsd:element name="ProppantPorosity" type="ProppantPorosityType" />
			<xsd:element name="ProppantSlurryFluid" type="ProppantSlurryFluidType" />
			<xsd:element name="ProppantSolidProppantPermeability" type="ProppantSolidProppantPermeabilityType" />
			<xsd:element name="ReactiveBrine" type="ReactiveBrineType" />
			<xsd:element name="ReactiveBrineThermal" type="ReactiveBrineThermalType" />
			<xsd:element name="SinglePhaseConstantThermalConductivity" type="SinglePhaseConstantThermalConductivityType" />
			<xsd:element name="SlipDependentPermeability" type="SlipDependentPermeabilityType" />
			<xsd:element name="SolidInternalEnergy" type="SolidInternalEnergyType" />
			<xsd:element name="TableCapillaryPressure" type="TableCapillaryPressureType" />
			<xsd:element name="TableRelativePermeability" type="TableRelativePermeabilityType" />
			<xsd:element name="TableRelativePermeabilityHysteresis" type="TableRelativePermeabilityHysteresisType" />
			<xsd:element name="ThermalCompressibleSinglePhaseFluid" type="ThermalCompressibleSinglePhaseFluidType" />
			<xsd:element name="VanGenuchtenBakerRelativePermeability" type="VanGenuchtenBakerRelativePermeabilityType" />
			<xsd:element name="VanGenuchtenCapillaryPressure" type="VanGenuchtenCapillaryPressureType" />
			<xsd:element name="WillisRichardsPermeability" type="WillisRichardsPermeabilityType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="BiotPorosityType">
		<!--biotCoefficient => Biot coefficient-->
		<xsd:attribute name="biotCoefficient" type="real64_array" />
		<!--dPorosity_dPressure => Derivative of rock porosity with respect to pressure-->
		<xsd:attribute name="dPorosity_dPressure" type="real64_array2d" />
		<!--initialPorosity => Initial porosity-->
		<xsd:attribute name="initialPorosity" type="real64_array2d" />
		<!--porosity => Rock porosity-->
		<xsd:attribute name="porosity" type="real64_array2d" />
		<!--porosity_n => Rock porosity at the previous converged time step-->
		<xsd:attribute name="porosity_n" type="real64_array2d" />
		<!--referencePorosity => Reference porosity-->
		<xsd:attribute name="referencePorosity" type="real64_array" />
	</xsd:complexType>
	<xsd:complexType name="BlackOilFluidType">
		<!--PVTO => (no description available)-->
		<xsd:attribute name="PVTO" type="geosx_constitutive_PVTOData" />
		<!--dPhaseCompFraction => Derivative of phase component fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseCompFraction" type="LvArray_Array&lt;double, 5, camp_int_seq&lt;long, 0l, 1l, 2l, 3l, 4l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--dPhaseDensity => Derivative of phase density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseDensity" type="real64_array4d" />
		<!--dPhaseEnthalpy => Derivative of phase enthalpy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseEnthalpy" type="real64_array4d" />
		<!--dPhaseFraction => Derivative of phase fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseFraction" type="real64_array4d" />
		<!--dPhaseInternalEnergy => Derivative of phase internal energy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseInternalEnergy" type="real64_array4d" />
		<!--dPhaseMassDensity => Derivative of phase mass density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseMassDensity" type="real64_array4d" />
		<!--dPhaseViscosity => Derivative of phase viscosity with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseViscosity" type="real64_array4d" />
		<!--dTotalDensity => Derivative of total density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dTotalDensity" type="real64_array3d" />
		<!--formationVolFactorTableWrappers => (no description available)-->
		<xsd:attribute name="formationVolFactorTableWrappers" type="LvArray_Array&lt;geosx_TableFunction_KernelWrapper, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--hydrocarbonPhaseOrder => (no description available)-->
		<xsd:attribute name="hydrocarbonPhaseOrder" type="integer_array" />
		<!--phaseCompFraction => Phase component fraction-->
		<xsd:attribute name="phaseCompFraction" type="real64_array4d" />
		<!--phaseCompFraction_n => Phase component fraction at the previous converged time step-->
		<xsd:attribute name="phaseCompFraction_n" type="real64_array4d" />
		<!--phaseDensity => Phase density-->
		<xsd:attribute name="phaseDensity" type="real64_array3d" />
		<!--phaseDensity_n => Phase density at the previous converged time step-->
		<xsd:attribute name="phaseDensity_n" type="real64_array3d" />
		<!--phaseEnthalpy => Phase enthalpy-->
		<xsd:attribute name="phaseEnthalpy" type="real64_array3d" />
		<!--phaseEnthalpy_n => Phase enthalpy at the previous converged time step-->
		<xsd:attribute name="phaseEnthalpy_n" type="real64_array3d" />
		<!--phaseFraction => Phase fraction-->
		<xsd:attribute name="phaseFraction" type="real64_array3d" />
		<!--phaseInternalEnergy => Phase internal energy-->
		<xsd:attribute name="phaseInternalEnergy" type="real64_array3d" />
		<!--phaseInternalEnergy_n => Phase internal energy at the previous converged time step-->
		<xsd:attribute name="phaseInternalEnergy_n" type="real64_array3d" />
		<!--phaseMassDensity => Phase mass density-->
		<xsd:attribute name="phaseMassDensity" type="real64_array3d" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
		<!--phaseViscosity => Phase viscosity-->
		<xsd:attribute name="phaseViscosity" type="real64_array3d" />
		<!--totalDensity => Total density-->
		<xsd:attribute name="totalDensity" type="real64_array2d" />
		<!--totalDensity_n => Total density at the previous converged time step-->
		<xsd:attribute name="totalDensity_n" type="real64_array2d" />
		<!--useMass => (no description available)-->
		<xsd:attribute name="useMass" type="integer" />
		<!--viscosityTableWrappers => (no description available)-->
		<xsd:attribute name="viscosityTableWrappers" type="LvArray_Array&lt;geosx_TableFunction_KernelWrapper, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;" />
	</xsd:complexType>
	<xsd:complexType name="BrooksCoreyBakerRelativePermeabilityType">
		<!--dPhaseRelPerm_dPhaseVolFraction => Derivative of phase relative permeability with respect to phase volume fraction-->
		<xsd:attribute name="dPhaseRelPerm_dPhaseVolFraction" type="real64_array4d" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseRelPerm => Phase relative permeability-->
		<xsd:attribute name="phaseRelPerm" type="real64_array3d" />
		<!--phaseRelPerm_n => Phase relative permeability at previous time-->
		<xsd:attribute name="phaseRelPerm_n" type="real64_array3d" />
		<!--phaseTrappedVolFraction => Phase trapped volume fraction-->
		<xsd:attribute name="phaseTrappedVolFraction" type="real64_array3d" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
		<!--volFracScale => Factor used to scale the phase capillary pressure, defined as: one minus the sum of the phase minimum volume fractions.-->
		<xsd:attribute name="volFracScale" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="BrooksCoreyCapillaryPressureType">
		<!--dPhaseCapPressure_dPhaseVolFraction => Derivative of phase capillary pressure with respect to phase volume fraction-->
		<xsd:attribute name="dPhaseCapPressure_dPhaseVolFraction" type="real64_array4d" />
		<!--phaseCapPressure => Phase capillary pressure-->
		<xsd:attribute name="phaseCapPressure" type="real64_array3d" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
		<!--volFracScale => Factor used to scale the phase capillary pressure, defined as: one minus the sum of the phase minimum volume fractions.-->
		<xsd:attribute name="volFracScale" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="BrooksCoreyRelativePermeabilityType">
		<!--dPhaseRelPerm_dPhaseVolFraction => Derivative of phase relative permeability with respect to phase volume fraction-->
		<xsd:attribute name="dPhaseRelPerm_dPhaseVolFraction" type="real64_array4d" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseRelPerm => Phase relative permeability-->
		<xsd:attribute name="phaseRelPerm" type="real64_array3d" />
		<!--phaseRelPerm_n => Phase relative permeability at previous time-->
		<xsd:attribute name="phaseRelPerm_n" type="real64_array3d" />
		<!--phaseTrappedVolFraction => Phase trapped volume fraction-->
		<xsd:attribute name="phaseTrappedVolFraction" type="real64_array3d" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
		<!--volFracScale => Factor used to scale the phase relative permeability, defined as: one minus the sum of the phase minimum volume fractions.-->
		<xsd:attribute name="volFracScale" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="CO2BrineEzrokhiFluidType">
		<!--dPhaseCompFraction => Derivative of phase component fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseCompFraction" type="LvArray_Array&lt;double, 5, camp_int_seq&lt;long, 0l, 1l, 2l, 3l, 4l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--dPhaseDensity => Derivative of phase density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseDensity" type="real64_array4d" />
		<!--dPhaseEnthalpy => Derivative of phase enthalpy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseEnthalpy" type="real64_array4d" />
		<!--dPhaseFraction => Derivative of phase fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseFraction" type="real64_array4d" />
		<!--dPhaseInternalEnergy => Derivative of phase internal energy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseInternalEnergy" type="real64_array4d" />
		<!--dPhaseMassDensity => Derivative of phase mass density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseMassDensity" type="real64_array4d" />
		<!--dPhaseViscosity => Derivative of phase viscosity with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseViscosity" type="real64_array4d" />
		<!--dTotalDensity => Derivative of total density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dTotalDensity" type="real64_array3d" />
		<!--phaseCompFraction => Phase component fraction-->
		<xsd:attribute name="phaseCompFraction" type="real64_array4d" />
		<!--phaseCompFraction_n => Phase component fraction at the previous converged time step-->
		<xsd:attribute name="phaseCompFraction_n" type="real64_array4d" />
		<!--phaseDensity => Phase density-->
		<xsd:attribute name="phaseDensity" type="real64_array3d" />
		<!--phaseDensity_n => Phase density at the previous converged time step-->
		<xsd:attribute name="phaseDensity_n" type="real64_array3d" />
		<!--phaseEnthalpy => Phase enthalpy-->
		<xsd:attribute name="phaseEnthalpy" type="real64_array3d" />
		<!--phaseEnthalpy_n => Phase enthalpy at the previous converged time step-->
		<xsd:attribute name="phaseEnthalpy_n" type="real64_array3d" />
		<!--phaseFraction => Phase fraction-->
		<xsd:attribute name="phaseFraction" type="real64_array3d" />
		<!--phaseInternalEnergy => Phase internal energy-->
		<xsd:attribute name="phaseInternalEnergy" type="real64_array3d" />
		<!--phaseInternalEnergy_n => Phase internal energy at the previous converged time step-->
		<xsd:attribute name="phaseInternalEnergy_n" type="real64_array3d" />
		<!--phaseMassDensity => Phase mass density-->
		<xsd:attribute name="phaseMassDensity" type="real64_array3d" />
		<!--phaseViscosity => Phase viscosity-->
		<xsd:attribute name="phaseViscosity" type="real64_array3d" />
		<!--totalDensity => Total density-->
		<xsd:attribute name="totalDensity" type="real64_array2d" />
		<!--totalDensity_n => Total density at the previous converged time step-->
		<xsd:attribute name="totalDensity_n" type="real64_array2d" />
		<!--useMass => (no description available)-->
		<xsd:attribute name="useMass" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="CO2BrineEzrokhiThermalFluidType">
		<!--dPhaseCompFraction => Derivative of phase component fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseCompFraction" type="LvArray_Array&lt;double, 5, camp_int_seq&lt;long, 0l, 1l, 2l, 3l, 4l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--dPhaseDensity => Derivative of phase density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseDensity" type="real64_array4d" />
		<!--dPhaseEnthalpy => Derivative of phase enthalpy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseEnthalpy" type="real64_array4d" />
		<!--dPhaseFraction => Derivative of phase fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseFraction" type="real64_array4d" />
		<!--dPhaseInternalEnergy => Derivative of phase internal energy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseInternalEnergy" type="real64_array4d" />
		<!--dPhaseMassDensity => Derivative of phase mass density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseMassDensity" type="real64_array4d" />
		<!--dPhaseViscosity => Derivative of phase viscosity with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseViscosity" type="real64_array4d" />
		<!--dTotalDensity => Derivative of total density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dTotalDensity" type="real64_array3d" />
		<!--phaseCompFraction => Phase component fraction-->
		<xsd:attribute name="phaseCompFraction" type="real64_array4d" />
		<!--phaseCompFraction_n => Phase component fraction at the previous converged time step-->
		<xsd:attribute name="phaseCompFraction_n" type="real64_array4d" />
		<!--phaseDensity => Phase density-->
		<xsd:attribute name="phaseDensity" type="real64_array3d" />
		<!--phaseDensity_n => Phase density at the previous converged time step-->
		<xsd:attribute name="phaseDensity_n" type="real64_array3d" />
		<!--phaseEnthalpy => Phase enthalpy-->
		<xsd:attribute name="phaseEnthalpy" type="real64_array3d" />
		<!--phaseEnthalpy_n => Phase enthalpy at the previous converged time step-->
		<xsd:attribute name="phaseEnthalpy_n" type="real64_array3d" />
		<!--phaseFraction => Phase fraction-->
		<xsd:attribute name="phaseFraction" type="real64_array3d" />
		<!--phaseInternalEnergy => Phase internal energy-->
		<xsd:attribute name="phaseInternalEnergy" type="real64_array3d" />
		<!--phaseInternalEnergy_n => Phase internal energy at the previous converged time step-->
		<xsd:attribute name="phaseInternalEnergy_n" type="real64_array3d" />
		<!--phaseMassDensity => Phase mass density-->
		<xsd:attribute name="phaseMassDensity" type="real64_array3d" />
		<!--phaseViscosity => Phase viscosity-->
		<xsd:attribute name="phaseViscosity" type="real64_array3d" />
		<!--totalDensity => Total density-->
		<xsd:attribute name="totalDensity" type="real64_array2d" />
		<!--totalDensity_n => Total density at the previous converged time step-->
		<xsd:attribute name="totalDensity_n" type="real64_array2d" />
		<!--useMass => (no description available)-->
		<xsd:attribute name="useMass" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="CO2BrinePhillipsFluidType">
		<!--dPhaseCompFraction => Derivative of phase component fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseCompFraction" type="LvArray_Array&lt;double, 5, camp_int_seq&lt;long, 0l, 1l, 2l, 3l, 4l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--dPhaseDensity => Derivative of phase density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseDensity" type="real64_array4d" />
		<!--dPhaseEnthalpy => Derivative of phase enthalpy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseEnthalpy" type="real64_array4d" />
		<!--dPhaseFraction => Derivative of phase fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseFraction" type="real64_array4d" />
		<!--dPhaseInternalEnergy => Derivative of phase internal energy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseInternalEnergy" type="real64_array4d" />
		<!--dPhaseMassDensity => Derivative of phase mass density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseMassDensity" type="real64_array4d" />
		<!--dPhaseViscosity => Derivative of phase viscosity with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseViscosity" type="real64_array4d" />
		<!--dTotalDensity => Derivative of total density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dTotalDensity" type="real64_array3d" />
		<!--phaseCompFraction => Phase component fraction-->
		<xsd:attribute name="phaseCompFraction" type="real64_array4d" />
		<!--phaseCompFraction_n => Phase component fraction at the previous converged time step-->
		<xsd:attribute name="phaseCompFraction_n" type="real64_array4d" />
		<!--phaseDensity => Phase density-->
		<xsd:attribute name="phaseDensity" type="real64_array3d" />
		<!--phaseDensity_n => Phase density at the previous converged time step-->
		<xsd:attribute name="phaseDensity_n" type="real64_array3d" />
		<!--phaseEnthalpy => Phase enthalpy-->
		<xsd:attribute name="phaseEnthalpy" type="real64_array3d" />
		<!--phaseEnthalpy_n => Phase enthalpy at the previous converged time step-->
		<xsd:attribute name="phaseEnthalpy_n" type="real64_array3d" />
		<!--phaseFraction => Phase fraction-->
		<xsd:attribute name="phaseFraction" type="real64_array3d" />
		<!--phaseInternalEnergy => Phase internal energy-->
		<xsd:attribute name="phaseInternalEnergy" type="real64_array3d" />
		<!--phaseInternalEnergy_n => Phase internal energy at the previous converged time step-->
		<xsd:attribute name="phaseInternalEnergy_n" type="real64_array3d" />
		<!--phaseMassDensity => Phase mass density-->
		<xsd:attribute name="phaseMassDensity" type="real64_array3d" />
		<!--phaseViscosity => Phase viscosity-->
		<xsd:attribute name="phaseViscosity" type="real64_array3d" />
		<!--totalDensity => Total density-->
		<xsd:attribute name="totalDensity" type="real64_array2d" />
		<!--totalDensity_n => Total density at the previous converged time step-->
		<xsd:attribute name="totalDensity_n" type="real64_array2d" />
		<!--useMass => (no description available)-->
		<xsd:attribute name="useMass" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="CO2BrinePhillipsThermalFluidType">
		<!--dPhaseCompFraction => Derivative of phase component fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseCompFraction" type="LvArray_Array&lt;double, 5, camp_int_seq&lt;long, 0l, 1l, 2l, 3l, 4l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--dPhaseDensity => Derivative of phase density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseDensity" type="real64_array4d" />
		<!--dPhaseEnthalpy => Derivative of phase enthalpy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseEnthalpy" type="real64_array4d" />
		<!--dPhaseFraction => Derivative of phase fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseFraction" type="real64_array4d" />
		<!--dPhaseInternalEnergy => Derivative of phase internal energy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseInternalEnergy" type="real64_array4d" />
		<!--dPhaseMassDensity => Derivative of phase mass density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseMassDensity" type="real64_array4d" />
		<!--dPhaseViscosity => Derivative of phase viscosity with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseViscosity" type="real64_array4d" />
		<!--dTotalDensity => Derivative of total density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dTotalDensity" type="real64_array3d" />
		<!--phaseCompFraction => Phase component fraction-->
		<xsd:attribute name="phaseCompFraction" type="real64_array4d" />
		<!--phaseCompFraction_n => Phase component fraction at the previous converged time step-->
		<xsd:attribute name="phaseCompFraction_n" type="real64_array4d" />
		<!--phaseDensity => Phase density-->
		<xsd:attribute name="phaseDensity" type="real64_array3d" />
		<!--phaseDensity_n => Phase density at the previous converged time step-->
		<xsd:attribute name="phaseDensity_n" type="real64_array3d" />
		<!--phaseEnthalpy => Phase enthalpy-->
		<xsd:attribute name="phaseEnthalpy" type="real64_array3d" />
		<!--phaseEnthalpy_n => Phase enthalpy at the previous converged time step-->
		<xsd:attribute name="phaseEnthalpy_n" type="real64_array3d" />
		<!--phaseFraction => Phase fraction-->
		<xsd:attribute name="phaseFraction" type="real64_array3d" />
		<!--phaseInternalEnergy => Phase internal energy-->
		<xsd:attribute name="phaseInternalEnergy" type="real64_array3d" />
		<!--phaseInternalEnergy_n => Phase internal energy at the previous converged time step-->
		<xsd:attribute name="phaseInternalEnergy_n" type="real64_array3d" />
		<!--phaseMassDensity => Phase mass density-->
		<xsd:attribute name="phaseMassDensity" type="real64_array3d" />
		<!--phaseViscosity => Phase viscosity-->
		<xsd:attribute name="phaseViscosity" type="real64_array3d" />
		<!--totalDensity => Total density-->
		<xsd:attribute name="totalDensity" type="real64_array2d" />
		<!--totalDensity_n => Total density at the previous converged time step-->
		<xsd:attribute name="totalDensity_n" type="real64_array2d" />
		<!--useMass => (no description available)-->
		<xsd:attribute name="useMass" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="CarmanKozenyPermeabilityType">
		<!--dPerm_dPorosity => (no description available)-->
		<xsd:attribute name="dPerm_dPorosity" type="real64_array3d" />
		<!--dPerm_dPressure => Derivative of rock permeability with respect to pressure-->
		<xsd:attribute name="dPerm_dPressure" type="real64_array3d" />
		<!--permeability => Rock permeability-->
		<xsd:attribute name="permeability" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="CompositionalMultiphaseFluidType">
		<!--dPhaseCompFraction => Derivative of phase component fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseCompFraction" type="LvArray_Array&lt;double, 5, camp_int_seq&lt;long, 0l, 1l, 2l, 3l, 4l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--dPhaseDensity => Derivative of phase density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseDensity" type="real64_array4d" />
		<!--dPhaseEnthalpy => Derivative of phase enthalpy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseEnthalpy" type="real64_array4d" />
		<!--dPhaseFraction => Derivative of phase fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseFraction" type="real64_array4d" />
		<!--dPhaseInternalEnergy => Derivative of phase internal energy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseInternalEnergy" type="real64_array4d" />
		<!--dPhaseMassDensity => Derivative of phase mass density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseMassDensity" type="real64_array4d" />
		<!--dPhaseViscosity => Derivative of phase viscosity with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseViscosity" type="real64_array4d" />
		<!--dTotalDensity => Derivative of total density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dTotalDensity" type="real64_array3d" />
		<!--phaseCompFraction => Phase component fraction-->
		<xsd:attribute name="phaseCompFraction" type="real64_array4d" />
		<!--phaseCompFraction_n => Phase component fraction at the previous converged time step-->
		<xsd:attribute name="phaseCompFraction_n" type="real64_array4d" />
		<!--phaseDensity => Phase density-->
		<xsd:attribute name="phaseDensity" type="real64_array3d" />
		<!--phaseDensity_n => Phase density at the previous converged time step-->
		<xsd:attribute name="phaseDensity_n" type="real64_array3d" />
		<!--phaseEnthalpy => Phase enthalpy-->
		<xsd:attribute name="phaseEnthalpy" type="real64_array3d" />
		<!--phaseEnthalpy_n => Phase enthalpy at the previous converged time step-->
		<xsd:attribute name="phaseEnthalpy_n" type="real64_array3d" />
		<!--phaseFraction => Phase fraction-->
		<xsd:attribute name="phaseFraction" type="real64_array3d" />
		<!--phaseInternalEnergy => Phase internal energy-->
		<xsd:attribute name="phaseInternalEnergy" type="real64_array3d" />
		<!--phaseInternalEnergy_n => Phase internal energy at the previous converged time step-->
		<xsd:attribute name="phaseInternalEnergy_n" type="real64_array3d" />
		<!--phaseMassDensity => Phase mass density-->
		<xsd:attribute name="phaseMassDensity" type="real64_array3d" />
		<!--phaseViscosity => Phase viscosity-->
		<xsd:attribute name="phaseViscosity" type="real64_array3d" />
		<!--totalDensity => Total density-->
		<xsd:attribute name="totalDensity" type="real64_array2d" />
		<!--totalDensity_n => Total density at the previous converged time step-->
		<xsd:attribute name="totalDensity_n" type="real64_array2d" />
		<!--useMass => (no description available)-->
		<xsd:attribute name="useMass" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="CompressibleSinglePhaseFluidType">
		<!--dDensity_dPressure => Derivative of density with respect to pressure-->
		<xsd:attribute name="dDensity_dPressure" type="real64_array2d" />
		<!--dDensity_dTemperature => Derivative of density with respect to temperature-->
		<xsd:attribute name="dDensity_dTemperature" type="real64_array2d" />
		<!--dEnthalpy_dPressure => Derivative of enthalpy with respect to pressure-->
		<xsd:attribute name="dEnthalpy_dPressure" type="real64_array2d" />
		<!--dEnthalpy_dTemperature => Derivative of enthalpy with respect to temperature-->
		<xsd:attribute name="dEnthalpy_dTemperature" type="real64_array2d" />
		<!--dInternalEnergy_dPressure => Derivative of internal energy with respect to pressure-->
		<xsd:attribute name="dInternalEnergy_dPressure" type="real64_array2d" />
		<!--dInternalEnergy_dTemperature => Derivative of internal energy with respect to temperature-->
		<xsd:attribute name="dInternalEnergy_dTemperature" type="real64_array2d" />
		<!--dViscosity_dPressure => Derivative of viscosity with respect to pressure-->
		<xsd:attribute name="dViscosity_dPressure" type="real64_array2d" />
		<!--dViscosity_dTemperature => Derivative of viscosity with respect to temperature-->
		<xsd:attribute name="dViscosity_dTemperature" type="real64_array2d" />
		<!--density => Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--density_n => Density at the previous converged time step-->
		<xsd:attribute name="density_n" type="real64_array2d" />
		<!--enthalpy => Enthalpy-->
		<xsd:attribute name="enthalpy" type="real64_array2d" />
		<!--internalEnergy => Internal energy-->
		<xsd:attribute name="internalEnergy" type="real64_array2d" />
		<!--internalEnergy_n => Fluid internal energy at the previous converged step-->
		<xsd:attribute name="internalEnergy_n" type="real64_array2d" />
		<!--viscosity => Viscosity-->
		<xsd:attribute name="viscosity" type="real64_array2d" />
	</xsd:complexType>
	<xsd:complexType name="CompressibleSolidCarmanKozenyPermeabilityType" />
	<xsd:complexType name="CompressibleSolidConstantPermeabilityType" />
	<xsd:complexType name="CompressibleSolidParallelPlatesPermeabilityType" />
	<xsd:complexType name="CompressibleSolidSlipDependentPermeabilityType" />
	<xsd:complexType name="CompressibleSolidWillisRichardsPermeabilityType" />
	<xsd:complexType name="ConstantPermeabilityType">
		<!--dPerm_dPressure => Derivative of rock permeability with respect to pressure-->
		<xsd:attribute name="dPerm_dPressure" type="real64_array3d" />
		<!--permeability => Rock permeability-->
		<xsd:attribute name="permeability" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="CoulombType">
		<!--elasticSlip => Elastic Slip-->
		<xsd:attribute name="elasticSlip" type="real64_array2d" />
	</xsd:complexType>
	<xsd:complexType name="DamageElasticIsotropicType">
		<!--bulkModulus => Elastic Bulk Modulus Field-->
		<xsd:attribute name="bulkModulus" type="real64_array" />
		<!--damage => Material Damage Variable-->
		<xsd:attribute name="damage" type="real64_array2d" />
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--extDrivingForce => External Driving Force-->
		<xsd:attribute name="extDrivingForce" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--shearModulus => Elastic Shear Modulus Field-->
		<xsd:attribute name="shearModulus" type="real64_array" />
		<!--strainEnergyDensity => Strain Energy Density-->
		<xsd:attribute name="strainEnergyDensity" type="real64_array2d" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="DamageSpectralElasticIsotropicType">
		<!--bulkModulus => Elastic Bulk Modulus Field-->
		<xsd:attribute name="bulkModulus" type="real64_array" />
		<!--damage => Material Damage Variable-->
		<xsd:attribute name="damage" type="real64_array2d" />
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--extDrivingForce => External Driving Force-->
		<xsd:attribute name="extDrivingForce" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--shearModulus => Elastic Shear Modulus Field-->
		<xsd:attribute name="shearModulus" type="real64_array" />
		<!--strainEnergyDensity => Strain Energy Density-->
		<xsd:attribute name="strainEnergyDensity" type="real64_array2d" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="DamageVolDevElasticIsotropicType">
		<!--bulkModulus => Elastic Bulk Modulus Field-->
		<xsd:attribute name="bulkModulus" type="real64_array" />
		<!--damage => Material Damage Variable-->
		<xsd:attribute name="damage" type="real64_array2d" />
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--extDrivingForce => External Driving Force-->
		<xsd:attribute name="extDrivingForce" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--shearModulus => Elastic Shear Modulus Field-->
		<xsd:attribute name="shearModulus" type="real64_array" />
		<!--strainEnergyDensity => Strain Energy Density-->
		<xsd:attribute name="strainEnergyDensity" type="real64_array2d" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="DeadOilFluidType">
		<!--dPhaseCompFraction => Derivative of phase component fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseCompFraction" type="LvArray_Array&lt;double, 5, camp_int_seq&lt;long, 0l, 1l, 2l, 3l, 4l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--dPhaseDensity => Derivative of phase density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseDensity" type="real64_array4d" />
		<!--dPhaseEnthalpy => Derivative of phase enthalpy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseEnthalpy" type="real64_array4d" />
		<!--dPhaseFraction => Derivative of phase fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseFraction" type="real64_array4d" />
		<!--dPhaseInternalEnergy => Derivative of phase internal energy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseInternalEnergy" type="real64_array4d" />
		<!--dPhaseMassDensity => Derivative of phase mass density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseMassDensity" type="real64_array4d" />
		<!--dPhaseViscosity => Derivative of phase viscosity with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseViscosity" type="real64_array4d" />
		<!--dTotalDensity => Derivative of total density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dTotalDensity" type="real64_array3d" />
		<!--formationVolFactorTableWrappers => (no description available)-->
		<xsd:attribute name="formationVolFactorTableWrappers" type="LvArray_Array&lt;geosx_TableFunction_KernelWrapper, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--hydrocarbonPhaseOrder => (no description available)-->
		<xsd:attribute name="hydrocarbonPhaseOrder" type="integer_array" />
		<!--phaseCompFraction => Phase component fraction-->
		<xsd:attribute name="phaseCompFraction" type="real64_array4d" />
		<!--phaseCompFraction_n => Phase component fraction at the previous converged time step-->
		<xsd:attribute name="phaseCompFraction_n" type="real64_array4d" />
		<!--phaseDensity => Phase density-->
		<xsd:attribute name="phaseDensity" type="real64_array3d" />
		<!--phaseDensity_n => Phase density at the previous converged time step-->
		<xsd:attribute name="phaseDensity_n" type="real64_array3d" />
		<!--phaseEnthalpy => Phase enthalpy-->
		<xsd:attribute name="phaseEnthalpy" type="real64_array3d" />
		<!--phaseEnthalpy_n => Phase enthalpy at the previous converged time step-->
		<xsd:attribute name="phaseEnthalpy_n" type="real64_array3d" />
		<!--phaseFraction => Phase fraction-->
		<xsd:attribute name="phaseFraction" type="real64_array3d" />
		<!--phaseInternalEnergy => Phase internal energy-->
		<xsd:attribute name="phaseInternalEnergy" type="real64_array3d" />
		<!--phaseInternalEnergy_n => Phase internal energy at the previous converged time step-->
		<xsd:attribute name="phaseInternalEnergy_n" type="real64_array3d" />
		<!--phaseMassDensity => Phase mass density-->
		<xsd:attribute name="phaseMassDensity" type="real64_array3d" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
		<!--phaseViscosity => Phase viscosity-->
		<xsd:attribute name="phaseViscosity" type="real64_array3d" />
		<!--totalDensity => Total density-->
		<xsd:attribute name="totalDensity" type="real64_array2d" />
		<!--totalDensity_n => Total density at the previous converged time step-->
		<xsd:attribute name="totalDensity_n" type="real64_array2d" />
		<!--useMass => (no description available)-->
		<xsd:attribute name="useMass" type="integer" />
		<!--viscosityTableWrappers => (no description available)-->
		<xsd:attribute name="viscosityTableWrappers" type="LvArray_Array&lt;geosx_TableFunction_KernelWrapper, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;" />
	</xsd:complexType>
	<xsd:complexType name="DelftEggType">
		<!--bulkModulus => Elastic Bulk Modulus Field-->
		<xsd:attribute name="bulkModulus" type="real64_array" />
		<!--cslSlope => Slope of the critical state line-->
		<xsd:attribute name="cslSlope" type="real64_array" />
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--oldPreConsolidationPressure => Old preconsolidation pressure-->
		<xsd:attribute name="oldPreConsolidationPressure" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--preConsolidationPressure => New preconsolidation pressure-->
		<xsd:attribute name="preConsolidationPressure" type="real64_array2d" />
		<!--recompressionIndex =>  Recompression index-->
		<xsd:attribute name="recompressionIndex" type="real64_array" />
		<!--shapeParameter => Shape parameter for the yield surface-->
		<xsd:attribute name="shapeParameter" type="real64_array" />
		<!--shearModulus => Elastic Shear Modulus Field-->
		<xsd:attribute name="shearModulus" type="real64_array" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
		<!--virginCompressionIndex => Virgin compression index-->
		<xsd:attribute name="virginCompressionIndex" type="real64_array" />
	</xsd:complexType>
	<xsd:complexType name="DruckerPragerType">
		<!--bulkModulus => Elastic Bulk Modulus Field-->
		<xsd:attribute name="bulkModulus" type="real64_array" />
		<!--cohesion => New cohesion state-->
		<xsd:attribute name="cohesion" type="real64_array2d" />
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--dilation => Plastic potential slope-->
		<xsd:attribute name="dilation" type="real64_array" />
		<!--friction => Yield surface slope-->
		<xsd:attribute name="friction" type="real64_array" />
		<!--hardening => Hardening rate-->
		<xsd:attribute name="hardening" type="real64_array" />
		<!--oldCohesion => Old cohesion state-->
		<xsd:attribute name="oldCohesion" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--shearModulus => Elastic Shear Modulus Field-->
		<xsd:attribute name="shearModulus" type="real64_array" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="ElasticIsotropicType">
		<!--bulkModulus => Elastic Bulk Modulus Field-->
		<xsd:attribute name="bulkModulus" type="real64_array" />
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--shearModulus => Elastic Shear Modulus Field-->
		<xsd:attribute name="shearModulus" type="real64_array" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="ElasticIsotropicPressureDependentType">
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--recompressionIndex => Recompression Index Field-->
		<xsd:attribute name="recompressionIndex" type="real64_array" />
		<!--refPressure => Reference Pressure Field-->
		<xsd:attribute name="refPressure" type="real64" />
		<!--refStrainVol => Reference Volumetric Strain-->
		<xsd:attribute name="refStrainVol" type="real64" />
		<!--shearModulus => Elastic Shear Modulus-->
		<xsd:attribute name="shearModulus" type="real64_array" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="ElasticOrthotropicType">
		<!--c11 => Elastic Stiffness Field C11-->
		<xsd:attribute name="c11" type="real64_array" />
		<!--c12 => Elastic Stiffness Field C12-->
		<xsd:attribute name="c12" type="real64_array" />
		<!--c13 => Elastic Stiffness Field C13-->
		<xsd:attribute name="c13" type="real64_array" />
		<!--c22 => Elastic Stiffness Field C22-->
		<xsd:attribute name="c22" type="real64_array" />
		<!--c23 => Elastic Stiffness Field C23-->
		<xsd:attribute name="c23" type="real64_array" />
		<!--c33 => Elastic Stiffness Field C33-->
		<xsd:attribute name="c33" type="real64_array" />
		<!--c44 => Elastic Stiffness Field C44-->
		<xsd:attribute name="c44" type="real64_array" />
		<!--c55 => Elastic Stiffness Field C55-->
		<xsd:attribute name="c55" type="real64_array" />
		<!--c66 => Elastic Stiffness Field C66-->
		<xsd:attribute name="c66" type="real64_array" />
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="ElasticTransverseIsotropicType">
		<!--c11 => Elastic Stiffness Field C11-->
		<xsd:attribute name="c11" type="real64_array" />
		<!--c13 => Elastic Stiffness Field C13-->
		<xsd:attribute name="c13" type="real64_array" />
		<!--c33 => Elastic Stiffness Field C33-->
		<xsd:attribute name="c33" type="real64_array" />
		<!--c44 => Elastic Stiffness Field C44-->
		<xsd:attribute name="c44" type="real64_array" />
		<!--c66 => Elastic Stiffness Field C66-->
		<xsd:attribute name="c66" type="real64_array" />
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="ExtendedDruckerPragerType">
		<!--bulkModulus => Elastic Bulk Modulus Field-->
		<xsd:attribute name="bulkModulus" type="real64_array" />
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--dilationRatio => Plastic potential slope ratio-->
		<xsd:attribute name="dilationRatio" type="real64_array" />
		<!--hardening => Hardening parameter-->
		<xsd:attribute name="hardening" type="real64_array" />
		<!--initialFriction => Initial yield surface slope-->
		<xsd:attribute name="initialFriction" type="real64_array" />
		<!--oldStateVariable => Old equivalent plastic shear strain-->
		<xsd:attribute name="oldStateVariable" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--pressureIntercept => Pressure point at cone vertex-->
		<xsd:attribute name="pressureIntercept" type="real64_array" />
		<!--residualFriction => Residual yield surface slope-->
		<xsd:attribute name="residualFriction" type="real64_array" />
		<!--shearModulus => Elastic Shear Modulus Field-->
		<xsd:attribute name="shearModulus" type="real64_array" />
		<!--stateVariable => New equivalent plastic shear strain-->
		<xsd:attribute name="stateVariable" type="real64_array2d" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="FrictionlessContactType" />
	<xsd:complexType name="JFunctionCapillaryPressureType">
		<!--dPhaseCapPressure_dPhaseVolFraction => Derivative of phase capillary pressure with respect to phase volume fraction-->
		<xsd:attribute name="dPhaseCapPressure_dPhaseVolFraction" type="real64_array4d" />
		<!--jFuncMultiplier => Multiplier for the Leverett J-function-->
		<xsd:attribute name="jFuncMultiplier" type="real64_array2d" />
		<!--jFunctionWrappers => (no description available)-->
		<xsd:attribute name="jFunctionWrappers" type="LvArray_Array&lt;geosx_TableFunction_KernelWrapper, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--phaseCapPressure => Phase capillary pressure-->
		<xsd:attribute name="phaseCapPressure" type="real64_array3d" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
	</xsd:complexType>
	<xsd:complexType name="ModifiedCamClayType">
		<!--cslSlope => Slope of the critical state line-->
		<xsd:attribute name="cslSlope" type="real64_array" />
		<!--density => Material Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--oldPreConsolidationPressure => Old preconsolidation pressure-->
		<xsd:attribute name="oldPreConsolidationPressure" type="real64_array2d" />
		<!--oldStress => Previous Material Stress-->
		<xsd:attribute name="oldStress" type="real64_array3d" />
		<!--preConsolidationPressure => New preconsolidation pressure-->
		<xsd:attribute name="preConsolidationPressure" type="real64_array2d" />
		<!--recompressionIndex => Recompression Index Field-->
		<xsd:attribute name="recompressionIndex" type="real64_array" />
		<!--refPressure => Reference Pressure Field-->
		<xsd:attribute name="refPressure" type="real64" />
		<!--refStrainVol => Reference Volumetric Strain-->
		<xsd:attribute name="refStrainVol" type="real64" />
		<!--shearModulus => Elastic Shear Modulus-->
		<xsd:attribute name="shearModulus" type="real64_array" />
		<!--stress => Current Material Stress-->
		<xsd:attribute name="stress" type="real64_array3d" />
		<!--virginCompressionIndex => Virgin compression index-->
		<xsd:attribute name="virginCompressionIndex" type="real64_array" />
	</xsd:complexType>
	<xsd:complexType name="MultiPhaseConstantThermalConductivityType">
		<!--dEffectiveConductivity_dPhaseVolFraction => Derivative of effective conductivity with respect to phase volume fraction-->
		<xsd:attribute name="dEffectiveConductivity_dPhaseVolFraction" type="real64_array4d" />
		<!--effectiveConductivity => Effective conductivity-->
		<xsd:attribute name="effectiveConductivity" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="MultiPhaseVolumeWeightedThermalConductivityType">
		<!--dEffectiveConductivity_dPhaseVolFraction => Derivative of effective conductivity with respect to phase volume fraction-->
		<xsd:attribute name="dEffectiveConductivity_dPhaseVolFraction" type="real64_array4d" />
		<!--effectiveConductivity => Effective conductivity-->
		<xsd:attribute name="effectiveConductivity" type="real64_array3d" />
		<!--rockThermalConductivity => Rock thermal conductivity-->
		<xsd:attribute name="rockThermalConductivity" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="NullModelType" />
	<xsd:complexType name="ParallelPlatesPermeabilityType">
		<!--dPerm_dDispJump => Derivative of rock permeability with respect to displacement jump-->
		<xsd:attribute name="dPerm_dDispJump" type="real64_array4d" />
		<!--dPerm_dPressure => Derivative of rock permeability with respect to pressure-->
		<xsd:attribute name="dPerm_dPressure" type="real64_array3d" />
		<!--permeability => Rock permeability-->
		<xsd:attribute name="permeability" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="ParticleFluidType">
		<!--collisionFactor => Collision factor-->
		<xsd:attribute name="collisionFactor" type="real64_array" />
		<!--dCollisionFactor_dProppantConcentration => Derivative of collision factor with respect to proppant concentration-->
		<xsd:attribute name="dCollisionFactor_dProppantConcentration" type="real64_array" />
		<!--dSettlingFactor_dComponentConcentration => Derivative of settling factor with respect to component concentration-->
		<xsd:attribute name="dSettlingFactor_dComponentConcentration" type="real64_array2d" />
		<!--dSettlingFactor_dPressure => Derivative of settling factor with respect to pressure-->
		<xsd:attribute name="dSettlingFactor_dPressure" type="real64_array" />
		<!--dSettlingFactor_dProppantConcentration => Derivative of settling factor with respect to proppant concentration-->
		<xsd:attribute name="dSettlingFactor_dProppantConcentration" type="real64_array" />
		<!--proppantPackPermeability => Proppant pack permeability-->
		<xsd:attribute name="proppantPackPermeability" type="real64_array" />
		<!--settlingFactor => Settling factor-->
		<xsd:attribute name="settlingFactor" type="real64_array" />
	</xsd:complexType>
	<xsd:complexType name="PermeabilityBaseType">
		<!--dPerm_dPressure => Derivative of rock permeability with respect to pressure-->
		<xsd:attribute name="dPerm_dPressure" type="real64_array3d" />
		<!--permeability => Rock permeability-->
		<xsd:attribute name="permeability" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="PorousDelftEggType" />
	<xsd:complexType name="PorousDruckerPragerType" />
	<xsd:complexType name="PorousElasticIsotropicType" />
	<xsd:complexType name="PorousElasticOrthotropicType" />
	<xsd:complexType name="PorousElasticTransverseIsotropicType" />
	<xsd:complexType name="PorousExtendedDruckerPragerType" />
	<xsd:complexType name="PorousModifiedCamClayType" />
	<xsd:complexType name="PressurePorosityType">
		<!--dPorosity_dPressure => Derivative of rock porosity with respect to pressure-->
		<xsd:attribute name="dPorosity_dPressure" type="real64_array2d" />
		<!--initialPorosity => Initial porosity-->
		<xsd:attribute name="initialPorosity" type="real64_array2d" />
		<!--porosity => Rock porosity-->
		<xsd:attribute name="porosity" type="real64_array2d" />
		<!--porosity_n => Rock porosity at the previous converged time step-->
		<xsd:attribute name="porosity_n" type="real64_array2d" />
		<!--referencePorosity => Reference porosity-->
		<xsd:attribute name="referencePorosity" type="real64_array" />
	</xsd:complexType>
	<xsd:complexType name="ProppantPermeabilityType">
		<!--dPerm_dDispJump => Derivative of rock permeability with respect to displacement jump-->
		<xsd:attribute name="dPerm_dDispJump" type="real64_array4d" />
		<!--dPerm_dPressure => Derivative of rock permeability with respect to pressure-->
		<xsd:attribute name="dPerm_dPressure" type="real64_array3d" />
		<!--permeability => Rock permeability-->
		<xsd:attribute name="permeability" type="real64_array3d" />
		<!--permeabilityMultiplier => Rock permeability multiplier-->
		<xsd:attribute name="permeabilityMultiplier" type="real64_array3d" />
		<!--proppantPackPermeability => (no description available)-->
		<xsd:attribute name="proppantPackPermeability" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="ProppantPorosityType">
		<!--dPorosity_dPressure => Derivative of rock porosity with respect to pressure-->
		<xsd:attribute name="dPorosity_dPressure" type="real64_array2d" />
		<!--initialPorosity => Initial porosity-->
		<xsd:attribute name="initialPorosity" type="real64_array2d" />
		<!--porosity => Rock porosity-->
		<xsd:attribute name="porosity" type="real64_array2d" />
		<!--porosity_n => Rock porosity at the previous converged time step-->
		<xsd:attribute name="porosity_n" type="real64_array2d" />
		<!--referencePorosity => Reference porosity-->
		<xsd:attribute name="referencePorosity" type="real64_array" />
	</xsd:complexType>
	<xsd:complexType name="ProppantSlurryFluidType">
		<!--FluidDensity => Fluid density-->
		<xsd:attribute name="FluidDensity" type="real64_array2d" />
		<!--FluidViscosity => Fluid viscosity-->
		<xsd:attribute name="FluidViscosity" type="real64_array2d" />
		<!--componentDensity => Component density-->
		<xsd:attribute name="componentDensity" type="real64_array3d" />
		<!--dCompDens_dCompConc => Derivative of component density with respect to component concentration-->
		<xsd:attribute name="dCompDens_dCompConc" type="real64_array4d" />
		<!--dCompDens_dPres => Derivative of component density with respect to pressure-->
		<xsd:attribute name="dCompDens_dPres" type="real64_array3d" />
		<!--dDens_dCompConc => Derivative of density with respect to component concentration-->
		<xsd:attribute name="dDens_dCompConc" type="real64_array3d" />
		<!--dDens_dProppantConc => Derivative of density with respect to proppant concentration-->
		<xsd:attribute name="dDens_dProppantConc" type="real64_array2d" />
		<!--dDensity_dPressure => Derivative of density with respect to pressure-->
		<xsd:attribute name="dDensity_dPressure" type="real64_array2d" />
		<!--dDensity_dTemperature => Derivative of density with respect to temperature-->
		<xsd:attribute name="dDensity_dTemperature" type="real64_array2d" />
		<!--dEnthalpy_dPressure => Derivative of enthalpy with respect to pressure-->
		<xsd:attribute name="dEnthalpy_dPressure" type="real64_array2d" />
		<!--dEnthalpy_dTemperature => Derivative of enthalpy with respect to temperature-->
		<xsd:attribute name="dEnthalpy_dTemperature" type="real64_array2d" />
		<!--dFluidDens_dCompConc => Derivative of fluid density with respect to component concentration-->
		<xsd:attribute name="dFluidDens_dCompConc" type="real64_array3d" />
		<!--dFluidDens_dPres => Derivative of fluid density with respect to pressure-->
		<xsd:attribute name="dFluidDens_dPres" type="real64_array2d" />
		<!--dFluidVisc_dCompConc => Derivative of fluid viscosity with respect to component concentration-->
		<xsd:attribute name="dFluidVisc_dCompConc" type="real64_array3d" />
		<!--dFluidVisc_dPres => Derivative of fluid viscosity with respect to pressure-->
		<xsd:attribute name="dFluidVisc_dPres" type="real64_array2d" />
		<!--dInternalEnergy_dPressure => Derivative of internal energy with respect to pressure-->
		<xsd:attribute name="dInternalEnergy_dPressure" type="real64_array2d" />
		<!--dInternalEnergy_dTemperature => Derivative of internal energy with respect to temperature-->
		<xsd:attribute name="dInternalEnergy_dTemperature" type="real64_array2d" />
		<!--dVisc_dCompConc => Derivative of viscosity with respect to component concentration-->
		<xsd:attribute name="dVisc_dCompConc" type="real64_array3d" />
		<!--dVisc_dProppantConc => Derivative of viscosity with respect to proppant concentration-->
		<xsd:attribute name="dVisc_dProppantConc" type="real64_array2d" />
		<!--dViscosity_dPressure => Derivative of viscosity with respect to pressure-->
		<xsd:attribute name="dViscosity_dPressure" type="real64_array2d" />
		<!--dViscosity_dTemperature => Derivative of viscosity with respect to temperature-->
		<xsd:attribute name="dViscosity_dTemperature" type="real64_array2d" />
		<!--density => Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--density_n => Density at the previous converged time step-->
		<xsd:attribute name="density_n" type="real64_array2d" />
		<!--enthalpy => Enthalpy-->
		<xsd:attribute name="enthalpy" type="real64_array2d" />
		<!--internalEnergy => Internal energy-->
		<xsd:attribute name="internalEnergy" type="real64_array2d" />
		<!--internalEnergy_n => Fluid internal energy at the previous converged step-->
		<xsd:attribute name="internalEnergy_n" type="real64_array2d" />
		<!--viscosity => Viscosity-->
		<xsd:attribute name="viscosity" type="real64_array2d" />
	</xsd:complexType>
	<xsd:complexType name="ProppantSolidProppantPermeabilityType" />
	<xsd:complexType name="ReactiveBrineType">
		<!--dPhaseCompFraction => Derivative of phase component fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseCompFraction" type="LvArray_Array&lt;double, 5, camp_int_seq&lt;long, 0l, 1l, 2l, 3l, 4l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--dPhaseDensity => Derivative of phase density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseDensity" type="real64_array4d" />
		<!--dPhaseEnthalpy => Derivative of phase enthalpy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseEnthalpy" type="real64_array4d" />
		<!--dPhaseFraction => Derivative of phase fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseFraction" type="real64_array4d" />
		<!--dPhaseInternalEnergy => Derivative of phase internal energy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseInternalEnergy" type="real64_array4d" />
		<!--dPhaseMassDensity => Derivative of phase mass density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseMassDensity" type="real64_array4d" />
		<!--dPhaseViscosity => Derivative of phase viscosity with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseViscosity" type="real64_array4d" />
		<!--dTotalDensity => Derivative of total density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dTotalDensity" type="real64_array3d" />
		<!--kineticReactionRates => kineticReactionRates-->
		<xsd:attribute name="kineticReactionRates" type="real64_array2d" />
		<!--phaseCompFraction => Phase component fraction-->
		<xsd:attribute name="phaseCompFraction" type="real64_array4d" />
		<!--phaseCompFraction_n => Phase component fraction at the previous converged time step-->
		<xsd:attribute name="phaseCompFraction_n" type="real64_array4d" />
		<!--phaseDensity => Phase density-->
		<xsd:attribute name="phaseDensity" type="real64_array3d" />
		<!--phaseDensity_n => Phase density at the previous converged time step-->
		<xsd:attribute name="phaseDensity_n" type="real64_array3d" />
		<!--phaseEnthalpy => Phase enthalpy-->
		<xsd:attribute name="phaseEnthalpy" type="real64_array3d" />
		<!--phaseEnthalpy_n => Phase enthalpy at the previous converged time step-->
		<xsd:attribute name="phaseEnthalpy_n" type="real64_array3d" />
		<!--phaseFraction => Phase fraction-->
		<xsd:attribute name="phaseFraction" type="real64_array3d" />
		<!--phaseInternalEnergy => Phase internal energy-->
		<xsd:attribute name="phaseInternalEnergy" type="real64_array3d" />
		<!--phaseInternalEnergy_n => Phase internal energy at the previous converged time step-->
		<xsd:attribute name="phaseInternalEnergy_n" type="real64_array3d" />
		<!--phaseMassDensity => Phase mass density-->
		<xsd:attribute name="phaseMassDensity" type="real64_array3d" />
		<!--phaseViscosity => Phase viscosity-->
		<xsd:attribute name="phaseViscosity" type="real64_array3d" />
		<!--primarySpeciesConcentration => primarySpeciesConcentration-->
		<xsd:attribute name="primarySpeciesConcentration" type="real64_array2d" />
		<!--primarySpeciesTotalConcentration => primarySpeciesTotalConcentration-->
		<xsd:attribute name="primarySpeciesTotalConcentration" type="real64_array2d" />
		<!--secondarySpeciesConcentration => secondarySpeciesConcentration-->
		<xsd:attribute name="secondarySpeciesConcentration" type="real64_array2d" />
		<!--totalDensity => Total density-->
		<xsd:attribute name="totalDensity" type="real64_array2d" />
		<!--totalDensity_n => Total density at the previous converged time step-->
		<xsd:attribute name="totalDensity_n" type="real64_array2d" />
		<!--useMass => (no description available)-->
		<xsd:attribute name="useMass" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="ReactiveBrineThermalType">
		<!--dPhaseCompFraction => Derivative of phase component fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseCompFraction" type="LvArray_Array&lt;double, 5, camp_int_seq&lt;long, 0l, 1l, 2l, 3l, 4l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--dPhaseDensity => Derivative of phase density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseDensity" type="real64_array4d" />
		<!--dPhaseEnthalpy => Derivative of phase enthalpy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseEnthalpy" type="real64_array4d" />
		<!--dPhaseFraction => Derivative of phase fraction with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseFraction" type="real64_array4d" />
		<!--dPhaseInternalEnergy => Derivative of phase internal energy with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseInternalEnergy" type="real64_array4d" />
		<!--dPhaseMassDensity => Derivative of phase mass density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseMassDensity" type="real64_array4d" />
		<!--dPhaseViscosity => Derivative of phase viscosity with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dPhaseViscosity" type="real64_array4d" />
		<!--dTotalDensity => Derivative of total density with respect to pressure, temperature, and global component fractions-->
		<xsd:attribute name="dTotalDensity" type="real64_array3d" />
		<!--kineticReactionRates => kineticReactionRates-->
		<xsd:attribute name="kineticReactionRates" type="real64_array2d" />
		<!--phaseCompFraction => Phase component fraction-->
		<xsd:attribute name="phaseCompFraction" type="real64_array4d" />
		<!--phaseCompFraction_n => Phase component fraction at the previous converged time step-->
		<xsd:attribute name="phaseCompFraction_n" type="real64_array4d" />
		<!--phaseDensity => Phase density-->
		<xsd:attribute name="phaseDensity" type="real64_array3d" />
		<!--phaseDensity_n => Phase density at the previous converged time step-->
		<xsd:attribute name="phaseDensity_n" type="real64_array3d" />
		<!--phaseEnthalpy => Phase enthalpy-->
		<xsd:attribute name="phaseEnthalpy" type="real64_array3d" />
		<!--phaseEnthalpy_n => Phase enthalpy at the previous converged time step-->
		<xsd:attribute name="phaseEnthalpy_n" type="real64_array3d" />
		<!--phaseFraction => Phase fraction-->
		<xsd:attribute name="phaseFraction" type="real64_array3d" />
		<!--phaseInternalEnergy => Phase internal energy-->
		<xsd:attribute name="phaseInternalEnergy" type="real64_array3d" />
		<!--phaseInternalEnergy_n => Phase internal energy at the previous converged time step-->
		<xsd:attribute name="phaseInternalEnergy_n" type="real64_array3d" />
		<!--phaseMassDensity => Phase mass density-->
		<xsd:attribute name="phaseMassDensity" type="real64_array3d" />
		<!--phaseViscosity => Phase viscosity-->
		<xsd:attribute name="phaseViscosity" type="real64_array3d" />
		<!--primarySpeciesConcentration => primarySpeciesConcentration-->
		<xsd:attribute name="primarySpeciesConcentration" type="real64_array2d" />
		<!--primarySpeciesTotalConcentration => primarySpeciesTotalConcentration-->
		<xsd:attribute name="primarySpeciesTotalConcentration" type="real64_array2d" />
		<!--secondarySpeciesConcentration => secondarySpeciesConcentration-->
		<xsd:attribute name="secondarySpeciesConcentration" type="real64_array2d" />
		<!--totalDensity => Total density-->
		<xsd:attribute name="totalDensity" type="real64_array2d" />
		<!--totalDensity_n => Total density at the previous converged time step-->
		<xsd:attribute name="totalDensity_n" type="real64_array2d" />
		<!--useMass => (no description available)-->
		<xsd:attribute name="useMass" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="SinglePhaseConstantThermalConductivityType">
		<!--effectiveConductivity => Effective conductivity-->
		<xsd:attribute name="effectiveConductivity" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="SlipDependentPermeabilityType">
		<!--dPerm_dDispJump => Derivative of rock permeability with respect to displacement jump-->
		<xsd:attribute name="dPerm_dDispJump" type="real64_array4d" />
		<!--dPerm_dPressure => Derivative of rock permeability with respect to pressure-->
		<xsd:attribute name="dPerm_dPressure" type="real64_array3d" />
		<!--permeability => Rock permeability-->
		<xsd:attribute name="permeability" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="SolidInternalEnergyType">
		<!--dInternalEnergy_dTemperature => Derivative of the solid internal energy w.r.t. temperature [J/(m^3.K)]-->
		<xsd:attribute name="dInternalEnergy_dTemperature" type="real64_array2d" />
		<!--internalEnergy => Internal energy of the solid per unit volume [J/m^3]-->
		<xsd:attribute name="internalEnergy" type="real64_array2d" />
		<!--internalEnergy_n => Internal energy of the solid per unit volume at the previous time-step [J/m^3]-->
		<xsd:attribute name="internalEnergy_n" type="real64_array2d" />
	</xsd:complexType>
	<xsd:complexType name="TableCapillaryPressureType">
		<!--capPresWrappers => (no description available)-->
		<xsd:attribute name="capPresWrappers" type="LvArray_Array&lt;geosx_TableFunction_KernelWrapper, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--dPhaseCapPressure_dPhaseVolFraction => Derivative of phase capillary pressure with respect to phase volume fraction-->
		<xsd:attribute name="dPhaseCapPressure_dPhaseVolFraction" type="real64_array4d" />
		<!--phaseCapPressure => Phase capillary pressure-->
		<xsd:attribute name="phaseCapPressure" type="real64_array3d" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
	</xsd:complexType>
	<xsd:complexType name="TableRelativePermeabilityType">
		<!--dPhaseRelPerm_dPhaseVolFraction => Derivative of phase relative permeability with respect to phase volume fraction-->
		<xsd:attribute name="dPhaseRelPerm_dPhaseVolFraction" type="real64_array4d" />
		<!--phaseMinVolumeFraction => (no description available)-->
		<xsd:attribute name="phaseMinVolumeFraction" type="real64_array" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseRelPerm => Phase relative permeability-->
		<xsd:attribute name="phaseRelPerm" type="real64_array3d" />
		<!--phaseRelPerm_n => Phase relative permeability at previous time-->
		<xsd:attribute name="phaseRelPerm_n" type="real64_array3d" />
		<!--phaseTrappedVolFraction => Phase trapped volume fraction-->
		<xsd:attribute name="phaseTrappedVolFraction" type="real64_array3d" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
		<!--relPermWrappers => (no description available)-->
		<xsd:attribute name="relPermWrappers" type="LvArray_Array&lt;geosx_TableFunction_KernelWrapper, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;" />
	</xsd:complexType>
	<xsd:complexType name="TableRelativePermeabilityHysteresisType">
		<!--dPhaseRelPerm_dPhaseVolFraction => Derivative of phase relative permeability with respect to phase volume fraction-->
		<xsd:attribute name="dPhaseRelPerm_dPhaseVolFraction" type="real64_array4d" />
		<!--drainagePhaseMaxVolumeFraction => (no description available)-->
		<xsd:attribute name="drainagePhaseMaxVolumeFraction" type="real64_array" />
		<!--drainagePhaseMinVolumeFraction => (no description available)-->
		<xsd:attribute name="drainagePhaseMinVolumeFraction" type="real64_array" />
		<!--drainagePhaseRelPermEndPoint => (no description available)-->
		<xsd:attribute name="drainagePhaseRelPermEndPoint" type="real64_array" />
		<!--drainageRelPermWrappers => (no description available)-->
		<xsd:attribute name="drainageRelPermWrappers" type="LvArray_Array&lt;geosx_TableFunction_KernelWrapper, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--imbibitionPhaseMaxVolumeFraction => (no description available)-->
		<xsd:attribute name="imbibitionPhaseMaxVolumeFraction" type="real64_array" />
		<!--imbibitionPhaseMinVolumeFraction => (no description available)-->
		<xsd:attribute name="imbibitionPhaseMinVolumeFraction" type="real64_array" />
		<!--imbibitionPhaseRelPermEndPoint => (no description available)-->
		<xsd:attribute name="imbibitionPhaseRelPermEndPoint" type="real64_array" />
		<!--imbibitionRelPermWrappers => (no description available)-->
		<xsd:attribute name="imbibitionRelPermWrappers" type="LvArray_Array&lt;geosx_TableFunction_KernelWrapper, 1, camp_int_seq&lt;long, 0l&gt;, int, LvArray_ChaiBuffer&gt;" />
		<!--landParameter => (no description available)-->
		<xsd:attribute name="landParameter" type="real64_array" />
		<!--phaseHasHysteresis => (no description available)-->
		<xsd:attribute name="phaseHasHysteresis" type="integer_array" />
		<!--phaseMaxHistoricalVolFraction => Phase max historical phase volume fraction-->
		<xsd:attribute name="phaseMaxHistoricalVolFraction" type="real64_array2d" />
		<!--phaseMinHistoricalVolFraction => Phase min historical phase volume fraction-->
		<xsd:attribute name="phaseMinHistoricalVolFraction" type="real64_array2d" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseRelPerm => Phase relative permeability-->
		<xsd:attribute name="phaseRelPerm" type="real64_array3d" />
		<!--phaseRelPerm_n => Phase relative permeability at previous time-->
		<xsd:attribute name="phaseRelPerm_n" type="real64_array3d" />
		<!--phaseTrappedVolFraction => Phase trapped volume fraction-->
		<xsd:attribute name="phaseTrappedVolFraction" type="real64_array3d" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
	</xsd:complexType>
	<xsd:complexType name="ThermalCompressibleSinglePhaseFluidType">
		<!--dDensity_dPressure => Derivative of density with respect to pressure-->
		<xsd:attribute name="dDensity_dPressure" type="real64_array2d" />
		<!--dDensity_dTemperature => Derivative of density with respect to temperature-->
		<xsd:attribute name="dDensity_dTemperature" type="real64_array2d" />
		<!--dEnthalpy_dPressure => Derivative of enthalpy with respect to pressure-->
		<xsd:attribute name="dEnthalpy_dPressure" type="real64_array2d" />
		<!--dEnthalpy_dTemperature => Derivative of enthalpy with respect to temperature-->
		<xsd:attribute name="dEnthalpy_dTemperature" type="real64_array2d" />
		<!--dInternalEnergy_dPressure => Derivative of internal energy with respect to pressure-->
		<xsd:attribute name="dInternalEnergy_dPressure" type="real64_array2d" />
		<!--dInternalEnergy_dTemperature => Derivative of internal energy with respect to temperature-->
		<xsd:attribute name="dInternalEnergy_dTemperature" type="real64_array2d" />
		<!--dViscosity_dPressure => Derivative of viscosity with respect to pressure-->
		<xsd:attribute name="dViscosity_dPressure" type="real64_array2d" />
		<!--dViscosity_dTemperature => Derivative of viscosity with respect to temperature-->
		<xsd:attribute name="dViscosity_dTemperature" type="real64_array2d" />
		<!--density => Density-->
		<xsd:attribute name="density" type="real64_array2d" />
		<!--density_n => Density at the previous converged time step-->
		<xsd:attribute name="density_n" type="real64_array2d" />
		<!--enthalpy => Enthalpy-->
		<xsd:attribute name="enthalpy" type="real64_array2d" />
		<!--internalEnergy => Internal energy-->
		<xsd:attribute name="internalEnergy" type="real64_array2d" />
		<!--internalEnergy_n => Fluid internal energy at the previous converged step-->
		<xsd:attribute name="internalEnergy_n" type="real64_array2d" />
		<!--viscosity => Viscosity-->
		<xsd:attribute name="viscosity" type="real64_array2d" />
	</xsd:complexType>
	<xsd:complexType name="VanGenuchtenBakerRelativePermeabilityType">
		<!--dPhaseRelPerm_dPhaseVolFraction => Derivative of phase relative permeability with respect to phase volume fraction-->
		<xsd:attribute name="dPhaseRelPerm_dPhaseVolFraction" type="real64_array4d" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseRelPerm => Phase relative permeability-->
		<xsd:attribute name="phaseRelPerm" type="real64_array3d" />
		<!--phaseRelPerm_n => Phase relative permeability at previous time-->
		<xsd:attribute name="phaseRelPerm_n" type="real64_array3d" />
		<!--phaseTrappedVolFraction => Phase trapped volume fraction-->
		<xsd:attribute name="phaseTrappedVolFraction" type="real64_array3d" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
		<!--volFracScale => Factor used to scale the phase capillary pressure, defined as: one minus the sum of the phase minimum volume fractions.-->
		<xsd:attribute name="volFracScale" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="VanGenuchtenCapillaryPressureType">
		<!--dPhaseCapPressure_dPhaseVolFraction => Derivative of phase capillary pressure with respect to phase volume fraction-->
		<xsd:attribute name="dPhaseCapPressure_dPhaseVolFraction" type="real64_array4d" />
		<!--phaseCapPressure => Phase capillary pressure-->
		<xsd:attribute name="phaseCapPressure" type="real64_array3d" />
		<!--phaseOrder => (no description available)-->
		<xsd:attribute name="phaseOrder" type="integer_array" />
		<!--phaseTypes => (no description available)-->
		<xsd:attribute name="phaseTypes" type="integer_array" />
		<!--volFracScale => Factor used to scale the phase capillary pressure, defined as: one minus the sum of the phase minimum volume fractions.-->
		<xsd:attribute name="volFracScale" type="real64" />
	</xsd:complexType>
	<xsd:complexType name="WillisRichardsPermeabilityType">
		<!--dPerm_dDispJump => Derivative of rock permeability with respect to displacement jump-->
		<xsd:attribute name="dPerm_dDispJump" type="real64_array4d" />
		<!--dPerm_dPressure => Derivative of rock permeability with respect to pressure-->
		<xsd:attribute name="dPerm_dPressure" type="real64_array3d" />
		<!--dPerm_dTraction => Derivative of rock permeability with respect to the traction vector-->
		<xsd:attribute name="dPerm_dTraction" type="real64_array4d" />
		<!--permeability => Rock permeability-->
		<xsd:attribute name="permeability" type="real64_array3d" />
	</xsd:complexType>
	<xsd:complexType name="MeshBodiesType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="InternalMesh" type="InternalMeshType" />
			<xsd:element name="InternalWellbore" type="InternalWellboreType" />
			<xsd:element name="VTKMesh" type="VTKMeshType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="meshLevelsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="Level0" type="Level0Type" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="Level0Type">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="ElementRegions" type="ElementRegionsType" maxOccurs="1" />
			<xsd:element name="edgeManager" type="edgeManagerType" />
			<xsd:element name="embeddedSurfacesEdgeManager" type="embeddedSurfacesEdgeManagerType" />
			<xsd:element name="embeddedSurfacesNodeManager" type="embeddedSurfacesNodeManagerType" />
			<xsd:element name="faceManager" type="faceManagerType" />
			<xsd:element name="nodeManager" type="nodeManagerType" />
		</xsd:choice>
		<!--meshLevel => (no description available)-->
		<xsd:attribute name="meshLevel" type="integer" />
	</xsd:complexType>
	<xsd:complexType name="ElementRegionsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="elementRegionsGroup" type="elementRegionsGroupType" />
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
			<xsd:element name="CellElementRegion" type="CellElementRegionType" />
			<xsd:element name="SurfaceElementRegion" type="SurfaceElementRegionType" />
			<xsd:element name="WellElementRegion" type="WellElementRegionType" />
		</xsd:choice>
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
	</xsd:complexType>
	<xsd:complexType name="elementRegionsGroupType" />
	<xsd:complexType name="neighborDataType" />
	<xsd:complexType name="setsType">
		<!--externalSet => (no description available)-->
		<xsd:attribute name="externalSet" type="LvArray_SortedArray&lt;int, int, LvArray_ChaiBuffer&gt;" />
	</xsd:complexType>
	<xsd:complexType name="edgeManagerType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
		</xsd:choice>
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--faceList => (no description available)-->
		<xsd:attribute name="faceList" type="geosx_InterObjectRelation&lt;LvArray_ArrayOfSets&lt;int, int, LvArray_ChaiBuffer&gt; &gt;" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
		<!--nodeList => (no description available)-->
		<xsd:attribute name="nodeList" type="geosx_InterObjectRelation&lt;LvArray_Array&lt;int, 2, camp_int_seq&lt;long, 0l, 1l&gt;, int, LvArray_ChaiBuffer&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="embeddedSurfacesEdgeManagerType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
		</xsd:choice>
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--faceList => (no description available)-->
		<xsd:attribute name="faceList" type="geosx_InterObjectRelation&lt;LvArray_ArrayOfSets&lt;int, int, LvArray_ChaiBuffer&gt; &gt;" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
		<!--nodeList => (no description available)-->
		<xsd:attribute name="nodeList" type="geosx_InterObjectRelation&lt;LvArray_Array&lt;int, 2, camp_int_seq&lt;long, 0l, 1l&gt;, int, LvArray_ChaiBuffer&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="embeddedSurfacesNodeManagerType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
		</xsd:choice>
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--edgeList => (no description available)-->
		<xsd:attribute name="edgeList" type="geosx_InterObjectRelation&lt;LvArray_ArrayOfSets&lt;int, int, LvArray_ChaiBuffer&gt; &gt;" />
		<!--elemList => (no description available)-->
		<xsd:attribute name="elemList" type="LvArray_ArrayOfArrays&lt;int, int, LvArray_ChaiBuffer&gt;" />
		<!--elemRegionList => (no description available)-->
		<xsd:attribute name="elemRegionList" type="LvArray_ArrayOfArrays&lt;int, int, LvArray_ChaiBuffer&gt;" />
		<!--elemSubRegionList => (no description available)-->
		<xsd:attribute name="elemSubRegionList" type="LvArray_ArrayOfArrays&lt;int, int, LvArray_ChaiBuffer&gt;" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
		<!--parentEdgeGlobalIndex => (no description available)-->
		<xsd:attribute name="parentEdgeGlobalIndex" type="globalIndex_array" />
		<!--parentEdgeIndex => Index of parent edge within the mesh object it is registered on. => EmbeddedSurfaceGenerator-->
		<xsd:attribute name="parentEdgeIndex" type="integer_array" />
		<!--referencePosition => (no description available)-->
		<xsd:attribute name="referencePosition" type="real64_array2d" />
	</xsd:complexType>
	<xsd:complexType name="faceManagerType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
		</xsd:choice>
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--edgeList => (no description available)-->
		<xsd:attribute name="edgeList" type="geosx_InterObjectRelation&lt;LvArray_ArrayOfArrays&lt;int, int, LvArray_ChaiBuffer&gt; &gt;" />
		<!--elemList => (no description available)-->
		<xsd:attribute name="elemList" type="integer_array2d" />
		<!--elemRegionList => (no description available)-->
		<xsd:attribute name="elemRegionList" type="integer_array2d" />
		<!--elemSubRegionList => (no description available)-->
		<xsd:attribute name="elemSubRegionList" type="integer_array2d" />
		<!--faceArea => (no description available)-->
		<xsd:attribute name="faceArea" type="real64_array" />
		<!--faceCenter => (no description available)-->
		<xsd:attribute name="faceCenter" type="real64_array2d" />
		<!--faceNormal => (no description available)-->
		<xsd:attribute name="faceNormal" type="real64_array2d" />
		<!--facePressure_n => Face pressure at the previous converged time step => CompositionalMultiphaseHybridFVM, SinglePhaseHybridFVM-->
		<xsd:attribute name="facePressure_n" type="real64_array" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
		<!--mimGravityCoefficient => Mimetic gravity coefficient => CompositionalMultiphaseHybridFVM-->
		<xsd:attribute name="mimGravityCoefficient" type="real64_array" />
		<!--nodeList => (no description available)-->
		<xsd:attribute name="nodeList" type="geosx_InterObjectRelation&lt;LvArray_ArrayOfArrays&lt;int, int, LvArray_ChaiBuffer&gt; &gt;" />
	</xsd:complexType>
	<xsd:complexType name="nodeManagerType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
		</xsd:choice>
		<!--ReferencePosition => (no description available)-->
		<xsd:attribute name="ReferencePosition" type="real64_array2d" />
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--edgeList => (no description available)-->
		<xsd:attribute name="edgeList" type="geosx_InterObjectRelation&lt;LvArray_ArrayOfSets&lt;int, int, LvArray_ChaiBuffer&gt; &gt;" />
		<!--elemList => (no description available)-->
		<xsd:attribute name="elemList" type="LvArray_ArrayOfArrays&lt;int, int, LvArray_ChaiBuffer&gt;" />
		<!--elemRegionList => (no description available)-->
		<xsd:attribute name="elemRegionList" type="LvArray_ArrayOfArrays&lt;int, int, LvArray_ChaiBuffer&gt;" />
		<!--elemSubRegionList => (no description available)-->
		<xsd:attribute name="elemSubRegionList" type="LvArray_ArrayOfArrays&lt;int, int, LvArray_ChaiBuffer&gt;" />
		<!--faceList => (no description available)-->
		<xsd:attribute name="faceList" type="geosx_InterObjectRelation&lt;LvArray_ArrayOfSets&lt;int, int, LvArray_ChaiBuffer&gt; &gt;" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
		<!--primaryField => Primary field variable-->
		<xsd:attribute name="primaryField" type="real64_array" />
	</xsd:complexType>
	<xsd:complexType name="CellElementRegionType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="elementSubRegions" type="elementSubRegionsType" />
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
		</xsd:choice>
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
	</xsd:complexType>
	<xsd:complexType name="elementSubRegionsType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="WellElementRegionUniqueSubRegion" type="WellElementRegionUniqueSubRegionType" />
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="SurfaceElementRegionType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="elementSubRegions" type="elementSubRegionsType" />
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
		</xsd:choice>
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
	</xsd:complexType>
	<xsd:complexType name="WellElementRegionType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="elementSubRegions" type="elementSubRegionsType" />
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
		</xsd:choice>
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
		<!--wellControlsName => (no description available)-->
		<xsd:attribute name="wellControlsName" type="string" />
		<!--wellGeneratorName => (no description available)-->
		<xsd:attribute name="wellGeneratorName" type="string" />
	</xsd:complexType>
	<xsd:complexType name="WellElementRegionUniqueSubRegionType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="ConstitutiveModels" type="ConstitutiveModelsType" />
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
			<xsd:element name="wellElementSubRegion" type="wellElementSubRegionType" />
		</xsd:choice>
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--elementCenter => (no description available)-->
		<xsd:attribute name="elementCenter" type="real64_array2d" />
		<!--elementVolume => (no description available)-->
		<xsd:attribute name="elementVolume" type="real64_array" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
		<!--nextWellElementIndex => (no description available)-->
		<xsd:attribute name="nextWellElementIndex" type="integer_array" />
		<!--nextWellElementIndexGlobal => (no description available)-->
		<xsd:attribute name="nextWellElementIndexGlobal" type="integer_array" />
		<!--nodeList => (no description available)-->
		<xsd:attribute name="nodeList" type="geosx_InterObjectRelation&lt;LvArray_Array&lt;int, 2, camp_int_seq&lt;long, 0l, 1l&gt;, int, LvArray_ChaiBuffer&gt; &gt;" />
		<!--numEdgesPerElement => (no description available)-->
		<xsd:attribute name="numEdgesPerElement" type="integer" />
		<!--numFacesPerElement => (no description available)-->
		<xsd:attribute name="numFacesPerElement" type="integer" />
		<!--numNodesPerElement => (no description available)-->
		<xsd:attribute name="numNodesPerElement" type="integer" />
		<!--radius => (no description available)-->
		<xsd:attribute name="radius" type="real64_array" />
		<!--topRank => (no description available)-->
		<xsd:attribute name="topRank" type="integer" />
		<!--topWellElementIndex => (no description available)-->
		<xsd:attribute name="topWellElementIndex" type="integer" />
		<!--wellControlsName => (no description available)-->
		<xsd:attribute name="wellControlsName" type="string" />
	</xsd:complexType>
	<xsd:complexType name="ConstitutiveModelsType" />
	<xsd:complexType name="wellElementSubRegionType">
		<xsd:choice minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="neighborData" type="neighborDataType" />
			<xsd:element name="sets" type="setsType" />
		</xsd:choice>
		<!--domainBoundaryIndicator => (no description available)-->
		<xsd:attribute name="domainBoundaryIndicator" type="integer_array" />
		<!--ghostRank => (no description available)-->
		<xsd:attribute name="ghostRank" type="integer_array" />
		<!--globalToLocalMap => (no description available)-->
		<xsd:attribute name="globalToLocalMap" type="geosx_mapBase&lt;long long, int, std_integral_constant&lt;bool, false&gt; &gt;" />
		<!--isExternal => (no description available)-->
		<xsd:attribute name="isExternal" type="integer_array" />
		<!--localToGlobalMap => Array that contains a map from localIndex to globalIndex.-->
		<xsd:attribute name="localToGlobalMap" type="globalIndex_array" />
		<!--location => For each perforation, physical location (x,y,z coordinates)-->
		<xsd:attribute name="location" type="real64_array2d" />
		<!--numPerforationsGlobal => (no description available)-->
		<xsd:attribute name="numPerforationsGlobal" type="globalIndex" />
		<!--reservoirElementIndex => For each perforation, element index of the perforated element-->
		<xsd:attribute name="reservoirElementIndex" type="integer_array" />
		<!--reservoirElementRegion => For each perforation, elementRegion index of the perforated element-->
		<xsd:attribute name="reservoirElementRegion" type="integer_array" />
		<!--reservoirElementSubregion => For each perforation, elementSubRegion index of the perforated element-->
		<xsd:attribute name="reservoirElementSubregion" type="integer_array" />
		<!--wellElementIndex => For each perforation, index of the well element-->
		<xsd:attribute name="wellElementIndex" type="integer_array" />
		<!--wellTransmissibility => For each perforation, well transmissibility-->
		<xsd:attribute name="wellTransmissibility" type="real64_array" />
	</xsd:complexType>
</xsd:schema>
