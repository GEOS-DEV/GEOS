@startuml(id=Discretization)

set separator ::

namespace Discretization {

abstract Class DiscretizationBase<MESHTYPE> {
Contains data/methods to describe the discretization of a **Mesh**.
--
MESHTYPE * m_mesh;
}

Class DiscretizationFEM {
There is one instantiation of DiscretizationFEM every h/p refinement of the **Mesh**
--
array1d< arrayOfArray< FEM_TYPE > > m_femTypes
}
note right of DiscretizationFEM::m_femTypes
indices are:
 ( objectType )( regionIndex, subRegionIndex ) 
endnote

class DiscretizationStencil {
    manage/allocate data on GraphNodes and GraphLinks across mesh objects.
    We want a single index space, which means we allocate/store here in a 
    complex data structure mapping to the mesh field objects
    --
    -localIndex m_numGraphNodes
    -localIndex m_numGraphLinks
    --
    scalar fields
    - array1d<arrayOfArrays< > > m_scalar

}
note right of DiscretizationStencil::m_scalar
need new contiguous array type "arrayOfArrayOfArrayOfArray"
  Indices are:
   ( objectType )( regionIndex, subRegionIndex )(index0,...)
  Requirements for new "arrayOfArrayOfArrayOfArray"
  - accessible as single index from POV of stencil since it is contiguous.
  - arrayView of slices to hang stand-alone view/slice in each object
  - lightweight single index arrayView
endnote


class DiscretizationParticle {

}

class ConstitutiveBase {
    - localIndex m_numPoints
    - array1d scalarState (numPoints) 
    - Array2d vectorState (numPoints, numComponents) 
}


class DiscretizationFunctions {

static transferOperator( to, from, fieldPath )
}

namespace MeshInterface {
class ElementManager {
    +forElementRegion(f)
    +forElementSubRegion(f)
}

class NodeFieldManager {
    holds fields on nodes
}
class EdgeFieldManager {
    holds fields on edges
    +edgeLength()
}
class FaceFieldManager {
    holds fields on faces
    +faceNormal()
}
class ElementManager {
    holds fields conatined in elements
    +elementVolume()
}

class ElementRegionBase {
    -m_scalar
}



class ConstitutiveBase {
    - int m_numQuadraturePoints
    - Array2d scalarState (numElems, m_numQuadraturePoints) 
    - Array3d vectorState (numElems, m_numQuadraturePoints, numComponents) 
}

ElementManager "1" *-- "0..n" ElementRegionBase
ElementRegionBase "1" *-- "1..n" ElementSubRegionBase
ElementSubRegionBase "1" *-- "1..n" ConstitutiveBase

} /' namespace MeshInterface '/
 

DiscretizationBase <|-- DiscretizationFEM
DiscretizationBase <|-- DiscretizationStencil

DiscretizationFEM <|-- DiscretizationMPM
DiscretizationParticle <|-- DiscretizationMPM

DiscretizationParticle *-- ConstitutiveBase

DiscretizationBase "1" *-- "1" MeshInterface::ElementManager
DiscretizationBase "1" *-- "1" MeshInterface::NodeFieldManager
DiscretizationBase "1" *-- "1" MeshInterface::EdgeFieldManager
DiscretizationBase "1" *-- "1" MeshInterface::FaceFieldManager



} /' namespace Discretization '/




@enduml