@startuml
<style>
classDiagram {
  class {
      ' attributes and methods
      FontColor blue
      ' class name
      header {
        FontSize 20
        FontStyle bold
      }
  }
}
</style>

!pragma useNewPackage
set separator .


Class Body {
Represents physical body
}


Body "1" *-- "1..*" Mesh.MeshAbstract

namespace Mesh {

abstract MeshAbstract {
Contains objects that represent a geometric description of the **Body** or portion of the **Body**
There can be multiple **Mesh** to describe a **Body** or portions of the **Body**
--
blah
--
+numVerticies()
+numEdges()
+numFaces()
+numCells()
+template< typename INDEX_TYPE > vertexCoordinate( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > edgeCenter( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > faceCenter( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > cellCenter( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > edgeLength( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > real64 const * faceNormal( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > real64 faceArea( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > real64 cellVolume( INDEX_TYPE const dims )
--
+template< typename INDEX_TYPE > edgesToVertices( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > facesToVertices( INDEX_TYPE const dims ) 
+template< typename INDEX_TYPE > facesToEdges( INDEX_TYPE const dims ) 
+template< typename INDEX_TYPE > cellsToVertices( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > cellsToEdges( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > cellsToFaces( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > vertexToEdges( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > vertexToFaces( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > vertexToCells( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > edgeToFaces( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > edgeToCells( INDEX_TYPE const dims )
+template< typename INDEX_TYPE > faceToCells( INDEX_TYPE const dims )

}

note "Need to implement a contiguous array1d<array1d<arrayofarray<TYPE>>" as N1


class MeshUnstructured {
  -array2d<real64> m_Coords
  -array2d<localIndex > m_edgesToVertices 
  -arrayOfArrays<localIndex > m_facesToVertices 
  -arrayOfArrays<localIndex > m_facesToEdges 
  -array1d< array1d< arrayOfArrays<localIndex > > > m_cellsToVertices
  -array1d< array1d< arrayOfArrays<localIndex > > > m_cellsToEdges
  -array1d< array1d< arrayOfArrays<localIndex > > > m_cellsToFaces
  -arrayOfArrays<localIndex> m_vertexToEdges
  -arrayOfArrays<localIndex> m_vertexToFaces
  -arrayOfArrays<localIndex> m_vertexToCells
  -arrayOfArrays<localIndex> m_edgeToFaces
  -arrayOfArrays<localIndex> m_edgeToCells
  -array2d<localIndex> m_faceToCells

}

class MeshUniformIJK {
  -real64 m_hx
  -real64 m_hy
  -real64 m_hz
  +linearIndex(i,j,k)
  +ijkIndex(i)

}

class MeshVariableIJK {
  -array1d<real64> m_xCoords;
  -array1d<real64> m_yCoords;
  -array1d<real64> m_zCoords;
  +linearIndex(i,j,k)
  +ijkIndex(i)

}

namespace legacyGEOS {

abstract class VertexManager {
    +edgeList()
    +faceList()
    +cellList()

}

abstract class EdgeManager {
    +nodeList()
    +faceList()
    +cellList()
}

abstract class FaceManager {
    +nodeList()
    +edgeList()
    +cellList()
}
abstract class CellManager {
    +nodeList()
    +edgeList()
    +faceList()
}

abstract class CellRegion {
    +nodeList()
    +edgeList()
    +faceList()
}

abstract class CellSubRegion {
    +nodeList()
    +edgeList()
    +faceList()
}


} /' legacyGEOS '/







MeshAbstract <|-- MeshUnstructured
MeshAbstract <|-- MeshUniformIJK
MeshAbstract <|-- MeshVariableIJK


Mesh.MeshAbstract "1" *-- "1" Mesh.legacyGEOS.VertexManager
Mesh.MeshAbstract "1" *-- "1" Mesh.legacyGEOS.EdgeManager
Mesh.MeshAbstract "1" *-- "1" Mesh.legacyGEOS.FaceManager
Mesh.MeshAbstract "1" *-- "1" Mesh.legacyGEOS.CellManager

Mesh.legacyGEOS.CellManager "1" *-- "1..*" Mesh.legacyGEOS.CellRegion
Mesh.legacyGEOS.CellRegion "1" *-- "1..*" Mesh.legacyGEOS.CellSubRegion


} /'namespace Mesh '/


Mesh.MeshUnstructured::m_cellsToVertices -- Mesh.N1 
Mesh.MeshUnstructured::m_cellsToEdges -- Mesh.N1 
Mesh.MeshUnstructured::m_cellsToFaces -- Mesh.N1 


@enduml