<!-- This solves a manufactured problem, Lap(U) + U = F, with U = 0 in all the walls. F is constructed such that the analytical solution is simply U(x,y,z) = xyz(1-x)(1-y)(1-z)-->
<Problem>

  <Solvers>
    <PhaseFieldDamageFEM name="PhaseFieldDamage"
                discretization="FE1"
                timeIntegrationOption="SteadyState"
                fieldName="Damage"
                localDissipation = "Quadratic"
                lengthScale = "0.2"
                criticalFractureEnergy = "2.7"
                solidMaterialNames="{shale}"
                logLevel="0"
                targetRegions="{Region1}">
    </PhaseFieldDamageFEM>
  </Solvers>

  <Mesh>
    <InternalMesh name="mesh1"
                  elementTypes="{C3D8}"
                  xCoords="{0, 1}"
                  yCoords="{0, 1}"
                  zCoords="{0, 1}"
                  nx="{30}"
                  ny="{30}"
                  nz="{30}"
                  cellBlockNames="{cb1}"/>
  </Mesh>

  <Events maxTime="5.0">
    <!-- This event is applied every cycle, and overrides the
    solver time-step request -->
    <PeriodicEvent name="solverApplications"
                   forceDt="1.0"
                   target="/Solvers/PhaseFieldDamage" />

    <!-- This event is applied every 1.0s.  The targetExactTimestep
    flag allows this event to request a dt modification to match an
    integer multiple of the timeFrequency. -->
    <!-- PeriodicEvent name="outputs"
                   timeFrequency="1.0"
                   targetExactTimestep="1"
                   target="/Outputs/VTKOutput" /-->

    <PeriodicEvent name="outputs"
                   timeFrequency="1.0"
                   targetExactTimestep="1"
                   target="/Outputs/VTKOutput" />

    <PeriodicEvent name="restarts"
                   timeFrequency="1e99"
                   targetExactTimestep="0"
                   target="/Outputs/restartOutput"
                   endTime="-1" />
  </Events>

  <NumericalMethods>
    <FiniteElements>
      <FiniteElementSpace name="FE1" order="1" />
    </FiniteElements>
  </NumericalMethods>

  <ElementRegions>
    <CellElementRegion name="Region1" cellBlocks="{cb1}" materialList="{shale}" />
  </ElementRegions>

  <Constitutive>
    <LinearElasticIsotropic name="granite"
                            defaultDensity="2700"
                            defaultBulkModulus="5.5556e9"
                            defaultShearModulus="4.16667e9"/>
    <LinearElasticIsotropic name="shale"
                            defaultDensity="2700"
                            defaultBulkModulus="5.5556e9"
                            defaultShearModulus="4.16667e9"/>
  </Constitutive>

  <FieldSpecifications>
    <!--<FieldSpecification name="boundary"
                        fieldName="Damage"
                        objectPath="nodeManager"
                        scale="0"
                        setNames="{xneg, xpos}"/> -->

    <FieldSpecification name="pointSource"
                        fieldName="Damage"
                        objectPath="nodeManager"
                        scale="1"
                        setNames="{centerPlane}"/>

    <FieldSpecification name="diffusionCoeff"
                        initialCondition="0"
                        setNames="{all}"
                        objectPath="ElementRegions"
                        fieldName="coeffField"
                        scale="0.375"
                        functionName="f_b"
                        />
  </FieldSpecifications>


  <Functions>
    <!-- These are example mathpresso functions.  In order to use them, you need to specify the order that the
    symbolic math function should expect the variables to be given, and an expression that it will compile.
    A list of available functions is given here: https://github.com/kobalicek/mathpresso -->
    <SymbolicFunction name="f_b"
                      inputVarNames="{time, elementCenter}"
                      variableNames="{t, x, y, z}"
                      expression="t*(12*x*x-12*x+2-50)/(-1+x*x*(1-x)*(1-x))"/>

  </Functions>

  <Outputs>
    <!-- <Silo name="SiloOutput" parallelThreads="1" plotFileRoot="plot"/> -->
    <VTK name="VTKOutput" parallelThreads="1" plotFileRoot="plot"/>
    <Restart name="restartOutput"/>
  </Outputs>

  <Geometry>
    <Box name="centerPlane" xMin="0.499, -0.001, -0.001" xMax="+0.501, +1.001, +1.001"/>
  </Geometry>

</Problem>
