#include "physicsSolvers/multiphysics/poromechanicsKernels/MultiphasePoromechanics_impl.hpp"
#include "physicsSolvers/multiphysics/poromechanicsKernels/SinglePhasePoromechanics_impl.hpp"
#include "physicsSolvers/multiphysics/poromechanicsKernels/SinglePhasePoromechanicsEFEM_impl.hpp"
#include "physicsSolvers/multiphysics/poromechanicsKernels/ThermalMultiphasePoromechanics_impl.hpp"
#include "physicsSolvers/multiphysics/poromechanicsKernels/ThermalSinglePhasePoromechanics_impl.hpp"
#include "physicsSolvers/multiphysics/poromechanicsKernels/ThermalSinglePhasePoromechanicsEFEM_impl.hpp"

using ThermalMultiphasePoromechanicsPolicy = @ThermalMultiphasePoromechanicsPolicy@;
using ThermalSinglePhasePoromechanicsPolicy = @ThermalSinglePhasePoromechanicsPolicy@;
using ThermalSinglePhasePoromechanicsEFEMPolicy = @ThermalSinglePhasePoromechanicsEFEMPolicy@;

#define INSTANTIATION( NAME )\
template class NAME < @SUBREGION_TYPE@, @CONSTITUTIVE_TYPE@, @FE_TYPE@ >; \
template real64 NAME < @SUBREGION_TYPE@, @CONSTITUTIVE_TYPE@, @FE_TYPE@ >::kernelLaunch< NAME##Policy, \
                                                                                        NAME < @SUBREGION_TYPE@, @CONSTITUTIVE_TYPE@, @FE_TYPE@ > > \
                                                                                      ( localIndex const, \
                                                                                        NAME < @SUBREGION_TYPE@, @CONSTITUTIVE_TYPE@, @FE_TYPE@ > const & ); \

namespace geos
{
using namespace constitutive;
using namespace finiteElement;
namespace thermalPoromechanicsKernels
{
  INSTANTIATION( ThermalMultiphasePoromechanics )
  INSTANTIATION( ThermalSinglePhasePoromechanics )
}

namespace thermoPoromechanicsEFEMKernels
{
  INSTANTIATION( ThermalSinglePhasePoromechanicsEFEM )
}

}

#undef INSTANTIATION
