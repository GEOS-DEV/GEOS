###############################################################################
XML Schema Guidelines
###############################################################################


XML Schema
=================================

A schema is a useful tool for validating input xml files.
The following sections will discuss how a schema may be generated from GEOSX, and how it is used.



Automatic Generation
------------------------------
A comprehensive schema for GEOSX may be generated by running the code with the schema keyword, e.g.: ``geosx -s schema.xsd``.
This is done by:
- Walking through the datastructure and expanding catalogs where necessary to create a skeleton structure (To do this, each object manager needs to override ``ManagedGroup::ExpandObjectCatalogs()``).

- Creating an initial schema file that includes any available data types that we wish to accept.
- Beggining with the Problem Manager:
   - For each subgroup:
      - Add an element to the schema that points to the subgroup
      - Define the frequency that the element may occur.
      - Create a complex type for the subgroup in the schema root
      - Recursively build it and its children.
   - Handle any deviations from the input structure defined in SetSchemaDeviations.
   - For each view attached to the group:
      - Include the view description in a comment.
      - Create an xml attribute, and define its name, type, default, and use.


InputFlags Applied to Nodes
------------------------------
Similar to Wrappers, each object derived from ManagedGroup has an InputFlag defined.
If this flag is set to the default value (INVALID), the code will not include the group or its children in the schema.
The available options for node input flags are: OPTIONAL, OPTIONAL_NONUNIQUE, REQUIRED, and REQUIRED_NONUNIQUE.

Note: when GEOSX registers groups to the datastructure, if the xml element includes a name attribute it will use that as the registered group name.
Otherwise, the code will use the element tag as the group name.
While this is not strictly necessary, to avoid any naming issues, the schema will require the name attribute for nonunique-type nodes, and will throw an error if it is otherwise included.


Data Type Regular Expressions
------------------------------
For each input datatype in GEOSX, there is a corresponding regular expression defined in ``src/coreComponents/common/DataTypes.hpp``.
These are defined at the head of the schema, and are used to validate attribute values.
If the regex for a particular datatype is an empty string, the code schema will allow an alphanumeric string with the following special characters: "(", ")", ",", "_", "+", "-", "/", "*", " ", and "\\n".


Schema Use
------------------------------
The internal parser in GEOSX does not validate the xml using the schema (it will throw errors if issues arise, however).
Instead, we reccomend that use an external tool such as python-lxml.
The pygeos package, which is located in ``src/coreComponents/python/modules/pygeos_package``, is a tool for building and preprocessing advanced xml files.
The ``pygeos.validateXML(input_xml, schema)`` can be used to validate inputs and parse any errors.


XML Formatting
------------------------------
All xml element tags should use Pascal case, and all attributes should use Camal case.
If an element does not have any available child elements defined in the schema, it should use the complete-tag style, e.g.: ``<Tag attributes="..." />``.
Comments are denoted as follows: ``<!-- comments  -->``.



XML Input Documentation
===============================

Generation
-------------------------------
The python script ``src/coreComponents/fileIO/schema/SchemaToRSTDocumentation.py`` will parse the schema generated by GEOSX, and create a series of .rst formatted tables in the ``src/coreComponents/fileIO/schema/docs`` directory.
These tables have columns that define the name, type, default value, and description for each input attribute and node.


Use
-------------------------------
Each of the generated tables are included in the Complete XML Structure page.
These can also manually included where desired in the user documentation.




