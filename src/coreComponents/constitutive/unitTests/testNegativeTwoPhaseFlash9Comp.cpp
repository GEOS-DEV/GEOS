/*
 * ------------------------------------------------------------------------------------------------------------
 * SPDX-License-Identifier: LGPL-2.1-only
 *
 * Copyright (c) 2018-2020 Lawrence Livermore National Security LLC
 * Copyright (c) 2018-2020 The Board of Trustees of the Leland Stanford Junior University
 * Copyright (c) 2018-2020 TotalEnergies
 * Copyright (c) 2019-     GEOSX Contributors
 * All rights reserved
 *
 * See top level LICENSE, COPYRIGHT, CONTRIBUTORS, NOTICE, and ACKNOWLEDGEMENTS files for details.
 * ------------------------------------------------------------------------------------------------------------
 */

// Source includes
#include "codingUtilities/UnitTestUtilities.hpp"
#include "constitutive/fluid/multifluid/compositional/functions/NegativeTwoPhaseFlash.hpp"
#include "constitutive/fluid/multifluid/compositional/functions/CubicEOSPhaseModel.hpp"
#include "TestFluid.hpp"
#include "TestFluidUtilities.hpp"

using namespace geos::constitutive::compositional;

namespace geos
{
namespace testing
{

static constexpr integer numComps = 9;

using FlashData = std::tuple<
  real64 const,             // pressure
  real64 const,             // temperature
  Feed< numComps > const,   // total composition
  int,                      // expected flash status (success (1)/failure (0))
  real64 const,             // expected vapour fraction
  Feed< 2 > const,          // expected liquid composition (2 selected components)
  Feed< 2 > const           // expected vapour composition (2 selected components)
  >;

template< EquationOfStateType EOS_TYPE >
class NegativeTwoPhaseFlashTest9CompFixture :  public ::testing::TestWithParam< FlashData >
{
  static constexpr real64 relTol = 1.0e-5;
  static constexpr real64 absTol = 1.0e-7;
  static constexpr int numDofs = numComps + 2;
  // Selected components for test
  static constexpr int comp0 = 0;
  static constexpr int comp1 = numComps-1;
  using Deriv = geos::constitutive::multifluid::DerivativeOffset;
public:
  NegativeTwoPhaseFlashTest9CompFixture()
    : m_fluid( createFluid() )
  {}

  ~NegativeTwoPhaseFlashTest9CompFixture() = default;

  void testFlash( FlashData const & data )
  {
    auto componentProperties = this->m_fluid->createKernelWrapper();

    real64 const pressure = std::get< 0 >( data );
    real64 const temperature = std::get< 1 >( data );
    stackArray1d< real64, numComps > composition;
    TestFluid< numComps >::createArray( composition, std::get< 2 >( data ));

    bool const expectedStatus = std::get< 3 >( data );
    real64 const expectedVapourFraction = std::get< 4 >( data );

    stackArray1d< real64, numComps > expectedLiquidComposition;
    stackArray1d< real64, numComps > expectedVapourComposition;
    TestFluid< numComps >::createArray( expectedLiquidComposition, std::get< 5 >( data ));
    TestFluid< numComps >::createArray( expectedVapourComposition, std::get< 6 >( data ));

    real64 vapourFraction = -1.0;
    stackArray1d< real64, numComps > liquidComposition( numComps );
    stackArray1d< real64, numComps > vapourComposition( numComps );
    stackArray2d< real64, numComps > kValues( 1, numComps );
    kValues.zero();

    bool status = NegativeTwoPhaseFlash::compute(
      numComps,
      pressure,
      temperature,
      composition.toSliceConst(),
      componentProperties,
      EOS_TYPE,
      EOS_TYPE,
      kValues.toSlice(),
      vapourFraction,
      liquidComposition.toSlice(),
      vapourComposition.toSlice() );

    // Check the flash success result
    ASSERT_EQ( expectedStatus, status );

    if( !expectedStatus )
    {
      return;
    }

    // Check the vaopur fraction
    checkRelativeError( expectedVapourFraction, vapourFraction, relTol, absTol );

    // Check liquid composition
    if( expectedVapourFraction < 1.0 - absTol )
    {
      checkRelativeError( expectedLiquidComposition[0], liquidComposition[comp0], relTol, absTol );
      checkRelativeError( expectedLiquidComposition[1], liquidComposition[comp1], relTol, absTol );
    }

    // Check vapour composition
    if( absTol < expectedVapourFraction )
    {
      checkRelativeError( expectedVapourComposition[0], vapourComposition[comp0], relTol, absTol );
      checkRelativeError( expectedVapourComposition[1], vapourComposition[comp1], relTol, absTol );
    }
  }

  void testFlashDerivatives( FlashData const & data )
  {
    // Number of output values from each flash calculation
    constexpr integer numValues = 1 + 2*numComps;

    auto componentProperties = this->m_fluid->createKernelWrapper();

    bool const expectedStatus = std::get< 3 >( data );
    if( !expectedStatus ) return;

    real64 const pressure = std::get< 0 >( data );
    real64 const temperature = std::get< 1 >( data );
    stackArray1d< real64, numComps > composition;
    TestFluid< numComps >::createArray( composition, std::get< 2 >( data ));

    real64 vapourFraction = -1.0;
    stackArray1d< real64, numComps > liquidComposition( numComps );
    stackArray1d< real64, numComps > vapourComposition( numComps );
    stackArray2d< real64, numComps > kValues( 1, numComps );
    kValues.zero();

    stackArray1d< real64, numDofs > vapourFractionDerivs( numDofs );
    stackArray2d< real64, numComps * numDofs > liquidCompositionDerivs( numComps, numDofs );
    stackArray2d< real64, numComps * numDofs > vapourCompositionDerivs( numComps, numDofs );
    stackArray1d< real64, numValues > derivatives( numValues );

    // Combine values and derivatives into a single output
    auto const concatDerivatives = []( integer const kc, auto & derivs, auto const & v, auto const & xmf, auto const & ymf ){
      derivs[0] = v[kc];
      for( integer ic = 0; ic < numComps; ++ic )
      {
        derivs[1+ic] = xmf( ic, kc );
        derivs[1+ic+numComps] = ymf( ic, kc );
      }
    };

    auto const evaluateFlash = [&]( real64 const p, real64 const t, auto const & zmf, auto & values ){
      stackArray1d< real64, numComps > displacedLiquidComposition( numComps );
      stackArray1d< real64, numComps > displacedVapourComposition( numComps );

      NegativeTwoPhaseFlash::compute(
        numComps,
        p,
        t,
        zmf.toSliceConst(),
        componentProperties,
        EOS_TYPE,
        EOS_TYPE,
        kValues.toSlice(),
        values[0],
        displacedLiquidComposition.toSlice(),
        displacedVapourComposition.toSlice() );
      for( integer ic = 0; ic < numComps; ++ic )
      {
        values[1+ic] = displacedLiquidComposition[ic];
        values[1+ic+numComps] = displacedVapourComposition[ic];
      }
    };

    NegativeTwoPhaseFlash::compute(
      numComps,
      pressure,
      temperature,
      composition.toSliceConst(),
      componentProperties,
      EOS_TYPE,
      EOS_TYPE,
      kValues.toSlice(),
      vapourFraction,
      liquidComposition.toSlice(),
      vapourComposition.toSlice() );

    NegativeTwoPhaseFlash::computeDerivatives(
      numComps,
      pressure,
      temperature,
      composition.toSliceConst(),
      componentProperties,
      EOS_TYPE,
      EOS_TYPE,
      vapourFraction,
      liquidComposition.toSliceConst(),
      vapourComposition.toSliceConst(),
      vapourFractionDerivs.toSlice(),
      liquidCompositionDerivs.toSlice(),
      vapourCompositionDerivs.toSlice() );

    // Test against numerically calculated values
    // --- Pressure derivatives ---
    concatDerivatives( Deriv::dP, derivatives, vapourFractionDerivs, liquidCompositionDerivs, vapourCompositionDerivs );
    real64 const dp = 1.0e-4 * pressure;
    geos::testing::internal::testNumericalDerivative< numValues >(
      pressure, dp, derivatives,
      [&]( real64 const p, auto & values ) {
      evaluateFlash( p, temperature, composition, values );
    } );

    // --- Temperature derivatives ---
    concatDerivatives( Deriv::dT, derivatives, vapourFractionDerivs, liquidCompositionDerivs, vapourCompositionDerivs );
    real64 const dT = 1.0e-6 * temperature;
    geos::testing::internal::testNumericalDerivative< numValues >(
      temperature, dT, derivatives,
      [&]( real64 const t, auto & values ) {
      evaluateFlash( pressure, t, composition, values );
    } );

    // --- Composition derivatives ---
    real64 constexpr dz = 1.0e-7;
    for( integer jc = 0; jc < numComps; ++jc )
    {
      if( composition[jc] < 1.0e-6 ) continue;
      integer const kc = Deriv::dC + jc;
      concatDerivatives( kc, derivatives, vapourFractionDerivs, liquidCompositionDerivs, vapourCompositionDerivs );
      geos::testing::internal::testNumericalDerivative< numValues >(
        0.0, dz, derivatives,
        [&]( real64 const z, auto & values ) {
        real64 const originalFraction = composition[jc];
        composition[jc] += z;
        evaluateFlash( pressure, temperature, composition, values );
        composition[jc] = originalFraction;
      }, 10*relTol, 10*absTol );
    }
  }

protected:
  std::unique_ptr< TestFluid< numComps > > m_fluid{};
private:
  static std::unique_ptr< TestFluid< numComps > > createFluid();
};

template< EquationOfStateType EOS_TYPE >
std::unique_ptr< TestFluid< numComps > > NegativeTwoPhaseFlashTest9CompFixture< EOS_TYPE >::createFluid()
{
  std::unique_ptr< TestFluid< numComps > > fluid = TestFluid< numComps >::create( {0, 0, 0, 0, 0, 0, 0, 0, 0} );
  // Manually populate
  TestFluid< numComps >::populateArray( fluid->criticalPressure, Feed< 9 >{73.8659e5, 33.9439e5, 46.0421e5, 48.8387e5, 42.4552e5, 37.47e5, 33.5892e5, 30.1037e5, 20.549e5} );
  TestFluid< numComps >::populateArray( fluid->criticalTemperature, Feed< 9 >{304.7, 126.2, 190.6, 305.43, 369.8, 419.5, 465.9, 507.5, 678.8} );
  TestFluid< numComps >::populateArray( fluid->criticalVolume, Feed< 9 >{9.3999e-05, 9.0001e-05, 9.7999e-05, 1.4800e-04, 2.0000e-04, 2.5800e-04, 3.1000e-04, 3.5100e-04, 6.8243e-04} );
  TestFluid< numComps >::populateArray( fluid->acentricFactor, Feed< 9 >{0.225, 0.04, 0.013, 0.0986, 0.1524, 0.1956, 0.2413, 0.299, 0.5618} );
  TestFluid< numComps >::populateArray( fluid->molecularWeight, Feed< 9 >{44.01e-3, 28.01e-3, 16.04e-3, 30.07e-3, 44.1e-3, 58.12e-3, 72.15e-3, 84e-3, 173e-3} );
  TestFluid< numComps >::populateArray( fluid->volumeShift, Feed< 9 >{ -0.04958, -0.136012, -0.1486264, -0.10863408, -0.08349872, -0.06331568, -0.04196464, -0.0150072, 0.0000 } );
  fluid->setBinaryCoefficients( Feed< 36 >{
        1.0000e-02,
        0.0000e+00, 3.7320e-03,
        0.0000e+00, 1.0000e-02, 0.0000e+00,
        0.0000e+00, 1.0000e-02, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.0000e-02, 0.0000e+00, 2.8000e-02, 1.0000e-02, 1.0000e-02, 0.0000e+00, 0.0000e+00,
        1.0000e-02, 0.0000e+00, 4.5320e-02, 1.0000e-02, 1.0000e-02, 0.0000e+00, 0.0000e+00, 0.0000e+00
      } );
  return fluid;
}

using PengRobinson = NegativeTwoPhaseFlashTest9CompFixture< EquationOfStateType::PengRobinson >;
using SoaveRedlichKwong = NegativeTwoPhaseFlashTest9CompFixture< EquationOfStateType::SoaveRedlichKwong >;

TEST_P( PengRobinson, testNegativeFlash )
{
  testFlash( GetParam() );
}

TEST_P( PengRobinson, testNegativeFlashDerivatives )
{
  testFlashDerivatives( GetParam() );
}

TEST_P( SoaveRedlichKwong, testNegativeFlash )
{
  testFlash( GetParam() );
}

TEST_P( SoaveRedlichKwong, testNegativeFlashDerivatives )
{
  testFlashDerivatives( GetParam() );
}

//-------------------------------------------------------------------------------
// Data
//-------------------------------------------------------------------------------

/* UNCRUSTIFY-OFF */

INSTANTIATE_TEST_SUITE_P(
  NegativeTwoPhaseFlash, PengRobinson,
  ::testing::Values(
    FlashData( 1.000000e+05, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+05, 2.781500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.798353, {0.000363, 0.839010}, {0.011181, 0.000020} ),
    FlashData( 1.000000e+05, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998685, {0.000228, 0.938644}, {0.007035, 0.000022} ),
    FlashData( 1.013250e+05, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.013250e+05, 2.781500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.798070, {0.000368, 0.837836}, {0.011184, 0.000020} ),
    FlashData( 1.013250e+05, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998684, {0.000231, 0.937856}, {0.007035, 0.000022} ),
    FlashData( 1.000000e+06, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 2.781500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.700780, {0.003486, 0.565464}, {0.011355, 0.000003} ),
    FlashData( 1.000000e+06, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.997643, {0.002159, 0.531971}, {0.007037, 0.000002} ),
    FlashData( 1.000000e+07, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 2.781500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.349114, {0.010010, 0.259905}, {0.007116, 0.000090} ),
    FlashData( 1.000000e+07, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.991703, {0.009755, 0.140969}, {0.007003, 0.000087} ),
    FlashData( 1.500000e+07, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 2.781500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.176058, {0.009422, 0.205086}, {0.007026, 0.001256} ),
    FlashData( 1.500000e+07, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.009422, 0.205089}, {0.007026, 0.001256} ),
    FlashData( 5.000000e+07, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+08, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+05, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.001168, {0.000348, 0.839991}, {0.013059, 0.000053} ),
    FlashData( 1.000000e+05, 2.886500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.805671, {0.000295, 0.870461}, {0.011100, 0.000055} ),
    FlashData( 1.000000e+05, 2.886500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998750, {0.000187, 0.957531}, {0.007035, 0.000059} ),
    FlashData( 1.013250e+05, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.001057, {0.000350, 0.839898}, {0.012947, 0.000052} ),
    FlashData( 1.013250e+05, 2.886500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.805431, {0.000299, 0.869390}, {0.011102, 0.000054} ),
    FlashData( 1.013250e+05, 2.886500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998749, {0.000189, 0.956982}, {0.007035, 0.000058} ),
    FlashData( 1.000000e+06, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 2.886500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.719045, {0.002880, 0.602213}, {0.011391, 0.000007} ),
    FlashData( 1.000000e+06, 2.886500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998097, {0.001770, 0.656139}, {0.007036, 0.000007} ),
    FlashData( 1.000000e+07, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 2.886500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.391974, {0.009806, 0.278198}, {0.007750, 0.000123} ),
    FlashData( 1.000000e+07, 2.886500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.994318, {0.008887, 0.201207}, {0.007015, 0.000113} ),
    FlashData( 1.500000e+07, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 2.886500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.231493, {0.009474, 0.219807}, {0.007427, 0.001195} ),
    FlashData( 1.500000e+07, 2.886500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999406, {0.009004, 0.228228}, {0.007025, 0.001121} ),
    FlashData( 5.000000e+07, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+05, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.002535, {0.000327, 0.841142}, {0.014448, 0.000119} ),
    FlashData( 1.000000e+05, 2.981500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.811028, {0.000249, 0.894832}, {0.011039, 0.000125} ),
    FlashData( 1.000000e+05, 2.981500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998841, {0.000158, 0.968326}, {0.007034, 0.000134} ),
    FlashData( 1.013250e+05, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.002401, {0.000329, 0.841029}, {0.014353, 0.000118} ),
    FlashData( 1.013250e+05, 2.981500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.810823, {0.000253, 0.893869}, {0.011041, 0.000124} ),
    FlashData( 1.013250e+05, 2.981500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998839, {0.000161, 0.967914}, {0.007034, 0.000132} ),
    FlashData( 1.000000e+06, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 2.981500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.733594, {0.002451, 0.635078}, {0.011378, 0.000016} ),
    FlashData( 1.000000e+06, 2.981500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998313, {0.001505, 0.734457}, {0.007035, 0.000017} ),
    FlashData( 1.000000e+07, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 2.981500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.426139, {0.009539, 0.294719}, {0.008274, 0.000169} ),
    FlashData( 1.000000e+07, 2.981500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.995698, {0.008127, 0.256601}, {0.007021, 0.000153} ),
    FlashData( 1.500000e+07, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 2.981500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.275063, {0.009454, 0.232929}, {0.007803, 0.001242} ),
    FlashData( 1.500000e+07, 2.981500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999403, {0.008577, 0.252667}, {0.007025, 0.001106} ),
    FlashData( 5.000000e+07, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+05, 3.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.009514, {0.000227, 0.847062}, {0.014475, 0.000776} ),
    FlashData( 1.000000e+05, 3.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.820830, {0.000171, 0.940506}, {0.010927, 0.000840} ),
    FlashData( 1.000000e+05, 3.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999605, {0.000110, 0.982954}, {0.007029, 0.000869} ),
    FlashData( 1.013250e+05, 3.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.009213, {0.000231, 0.846804}, {0.014528, 0.000766} ),
    FlashData( 1.013250e+05, 3.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.820694, {0.000173, 0.939845}, {0.010929, 0.000829} ),
    FlashData( 1.013250e+05, 3.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999594, {0.000111, 0.982731}, {0.007029, 0.000858} ),
    FlashData( 1.000000e+06, 3.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 3.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.763803, {0.001692, 0.716010}, {0.011260, 0.000105} ),
    FlashData( 1.000000e+06, 3.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998655, {0.001048, 0.848573}, {0.007034, 0.000115} ),
    FlashData( 1.000000e+07, 3.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 3.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.500392, {0.008630, 0.338259}, {0.009369, 0.000406} ),
    FlashData( 1.000000e+07, 3.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.997667, {0.006476, 0.384497}, {0.007027, 0.000360} ),
    FlashData( 1.500000e+07, 3.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 3.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.367748, {0.009160, 0.266615}, {0.008725, 0.001720} ),
    FlashData( 1.500000e+07, 3.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 5.000000e+07, 3.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+05, 3.531500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.031155, {0.000097, 0.865831}, {0.008647, 0.004929} ),
    FlashData( 1.000000e+05, 3.531500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.829852, {0.000120, 0.968392}, {0.010821, 0.005338} ),
    FlashData( 1.000000e+05, 3.531500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.013250e+05, 3.531500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.030488, {0.000099, 0.865241}, {0.008755, 0.004866} ),
    FlashData( 1.013250e+05, 3.531500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.829724, {0.000121, 0.968002}, {0.010822, 0.005269} ),
    FlashData( 1.013250e+05, 3.531500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+06, 3.531500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 3.531500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.787992, {0.001191, 0.795638}, {0.011101, 0.000658} ),
    FlashData( 1.000000e+06, 3.531500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999382, {0.000748, 0.906103}, {0.007030, 0.000696} ),
    FlashData( 1.000000e+07, 3.531500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 3.531500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.567463, {0.007479, 0.389712}, {0.010159, 0.001120} ),
    FlashData( 1.000000e+07, 3.531500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999429, {0.005131, 0.493383}, {0.007027, 0.000975} ),
    FlashData( 1.500000e+07, 3.531500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 3.531500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.449715, {0.008545, 0.304966}, {0.009556, 0.003072} ),
    FlashData( 1.500000e+07, 3.531500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+05, 3.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.053370, {0.000054, 0.885524}, {0.005836, 0.013991} ),
    FlashData( 1.000000e+05, 3.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.839835, {0.000099, 0.977972}, {0.010698, 0.014959} ),
    FlashData( 1.000000e+05, 3.731500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.013250e+05, 3.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.052543, {0.000056, 0.884773}, {0.005903, 0.013808} ),
    FlashData( 1.013250e+05, 3.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.839621, {0.000100, 0.977689}, {0.010700, 0.014767} ),
    FlashData( 1.013250e+05, 3.731500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+06, 3.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 3.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.799362, {0.000988, 0.836026}, {0.011011, 0.001828} ),
    FlashData( 1.000000e+06, 3.731500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+07, 3.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 3.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.602229, {0.006805, 0.422215}, {0.010450, 0.002084} ),
    FlashData( 1.000000e+07, 3.731500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.500000e+07, 3.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 3.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.492074, {0.008098, 0.328602}, {0.009931, 0.004663} ),
    FlashData( 1.500000e+07, 3.731500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+05, 3.931500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.078426, {0.000034, 0.907428}, {0.004230, 0.035040} ),
    FlashData( 1.000000e+05, 3.931500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.860286, {0.000083, 0.983960}, {0.010448, 0.036880} ),
    FlashData( 1.000000e+05, 3.931500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.013250e+05, 3.931500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.077531, {0.000035, 0.906620}, {0.004269, 0.034580} ),
    FlashData( 1.013250e+05, 3.931500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.859825, {0.000084, 0.983745}, {0.010454, 0.036407} ),
    FlashData( 1.000000e+06, 3.931500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 3.931500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.808966, {0.000846, 0.866838}, {0.010926, 0.004456} ),
    FlashData( 1.000000e+07, 3.931500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.630979, {0.006236, 0.452193}, {0.010617, 0.003695} ),
    FlashData( 1.500000e+07, 3.931500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.527277, {0.007678, 0.350047}, {0.010185, 0.007065} ),
    FlashData( 1.500000e+07, 3.931500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 5.000000e+07, 3.931500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.013250e+05, 5.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+06, 5.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.013401, {0.000295, 0.847670}, {0.005333, 0.201455} ),
    FlashData( 1.000000e+06, 5.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 1.000000, {0.009000, 0.169200}, {0.009000, 0.169200} ),
    FlashData( 1.000000e+07, 5.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 5.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.783614, {0.004654, 0.554668}, {0.010200, 0.062757} ),
    FlashData( 1.500000e+07, 5.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 5.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.717160, {0.006496, 0.400841}, {0.009988, 0.077843} ),
    FlashData( 1.013250e+05, 5.731500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+06, 5.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.166124, {0.000103, 0.906268}, {0.001666, 0.501402} ),
    FlashData( 1.000000e+07, 5.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.947056, {0.004797, 0.541766}, {0.009235, 0.148372} ),
    FlashData( 8.000000e+07, 8.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 8.000000e+07, 8.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 1.000000, {0.009000, 0.169200}, {0.009000, 0.169200} ),
    FlashData( 8.000000e+07, 8.731500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+08, 8.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+08, 8.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 1.000000, {0.009000, 0.169200}, {0.009000, 0.169200} ),
    FlashData( 1.000000e+08, 8.731500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} )    
   )
  );

INSTANTIATE_TEST_SUITE_P(
  NegativeTwoPhaseFlash, SoaveRedlichKwong,
  ::testing::Values( 
    FlashData( 1.000000e+05, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000197, {0.000361, 0.839175}, {0.010852, 0.000016} ),
    FlashData( 1.000000e+05, 2.781500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.798097, {0.000372, 0.837963}, {0.011183, 0.000016} ),
    FlashData( 1.000000e+05, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998678, {0.000233, 0.937435}, {0.007035, 0.000017} ),
    FlashData( 1.013250e+05, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000102, {0.000362, 0.839096}, {0.010741, 0.000015} ),
    FlashData( 1.013250e+05, 2.781500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.797815, {0.000377, 0.836797}, {0.011185, 0.000015} ),
    FlashData( 1.013250e+05, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998677, {0.000236, 0.936631}, {0.007035, 0.000017} ),
    FlashData( 1.000000e+06, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 2.781500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.701296, {0.003551, 0.566442}, {0.011321, 0.000002} ),
    FlashData( 1.000000e+06, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.997601, {0.002208, 0.522879}, {0.007038, 0.000002} ),
    FlashData( 1.000000e+07, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 2.781500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.355337, {0.010126, 0.262428}, {0.006957, 0.000064} ),
    FlashData( 1.000000e+07, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.990607, {0.010007, 0.127315}, {0.006998, 0.000061} ),
    FlashData( 1.500000e+07, 2.781500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 2.781500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.189968, {0.009500, 0.208646}, {0.006869, 0.001001} ),
    FlashData( 1.500000e+07, 2.781500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998881, {0.009683, 0.203759}, {0.007023, 0.001029} ),
    FlashData( 1.000000e+05, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.001347, {0.000346, 0.840142}, {0.012715, 0.000042} ),
    FlashData( 1.000000e+05, 2.886500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.805502, {0.000302, 0.869750}, {0.011100, 0.000044} ),
    FlashData( 1.000000e+05, 2.886500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998737, {0.000191, 0.957109}, {0.007035, 0.000047} ),
    FlashData( 1.013250e+05, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.001238, {0.000348, 0.840050}, {0.012604, 0.000042} ),
    FlashData( 1.013250e+05, 2.886500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.805263, {0.000306, 0.868685}, {0.011102, 0.000043} ),
    FlashData( 1.013250e+05, 2.886500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998736, {0.000193, 0.956554}, {0.007035, 0.000047} ),
    FlashData( 1.000000e+06, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 2.886500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.719517, {0.002933, 0.603231}, {0.011365, 0.000006} ),
    FlashData( 1.000000e+06, 2.886500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998081, {0.001810, 0.651470}, {0.007036, 0.000006} ),
    FlashData( 1.000000e+07, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 2.886500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.396003, {0.009922, 0.280076}, {0.007594, 0.000088} ),
    FlashData( 1.000000e+07, 2.886500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.993728, {0.009141, 0.187545}, {0.007013, 0.000080} ),
    FlashData( 1.500000e+07, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 2.886500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.240606, {0.009550, 0.222512}, {0.007264, 0.000938} ),
    FlashData( 1.500000e+07, 2.886500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998414, {0.009259, 0.224729}, {0.007022, 0.000901} ),
    FlashData( 5.000000e+07, 2.886500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+05, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.002711, {0.000326, 0.841291}, {0.014087, 0.000098} ),
    FlashData( 1.000000e+05, 2.981500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.810920, {0.000255, 0.894421}, {0.011039, 0.000103} ),
    FlashData( 1.000000e+05, 2.981500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998816, {0.000162, 0.968232}, {0.007034, 0.000110} ),
    FlashData( 1.013250e+05, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.002578, {0.000328, 0.841178}, {0.013993, 0.000096} ),
    FlashData( 1.013250e+05, 2.981500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.810716, {0.000258, 0.893460}, {0.011041, 0.000101} ),
    FlashData( 1.013250e+05, 2.981500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998814, {0.000164, 0.967820}, {0.007034, 0.000108} ),
    FlashData( 1.000000e+06, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 2.981500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.734036, {0.002496, 0.636140}, {0.011357, 0.000013} ),
    FlashData( 1.000000e+06, 2.981500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998304, {0.001539, 0.732405}, {0.007035, 0.000014} ),
    FlashData( 1.000000e+07, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 2.981500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.428647, {0.009656, 0.296047}, {0.008126, 0.000123} ),
    FlashData( 1.000000e+07, 2.981500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.995306, {0.008367, 0.244161}, {0.007020, 0.000110} ),
    FlashData( 1.500000e+07, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 2.981500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.280995, {0.009532, 0.234947}, {0.007638, 0.000967} ),
    FlashData( 1.500000e+07, 2.981500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998466, {0.008825, 0.247830}, {0.007023, 0.000877} ),
    FlashData( 5.000000e+07, 2.981500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+05, 3.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.009799, {0.000227, 0.847306}, {0.014141, 0.000671} ),
    FlashData( 1.000000e+05, 3.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.820760, {0.000174, 0.940659}, {0.010927, 0.000727} ),
    FlashData( 1.000000e+05, 3.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999486, {0.000112, 0.983094}, {0.007030, 0.000751} ),
    FlashData( 1.013250e+05, 3.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.009494, {0.000230, 0.847045}, {0.014191, 0.000663} ),
    FlashData( 1.013250e+05, 3.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.820626, {0.000176, 0.940001}, {0.010929, 0.000717} ),
    FlashData( 1.013250e+05, 3.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999476, {0.000113, 0.982873}, {0.007030, 0.000741} ),
    FlashData( 1.000000e+06, 3.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 3.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.764168, {0.001724, 0.717170}, {0.011245, 0.000089} ),
    FlashData( 1.000000e+06, 3.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.998636, {0.001071, 0.849075}, {0.007034, 0.000098} ),
    FlashData( 1.000000e+07, 3.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.500247, {0.008751, 0.338258}, {0.009248, 0.000309} ),
    FlashData( 1.000000e+07, 3.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.997385, {0.006666, 0.376212}, {0.007027, 0.000273} ),
    FlashData( 1.500000e+07, 3.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 3.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.368341, {0.009249, 0.267083}, {0.008574, 0.001342} ),
    FlashData( 1.500000e+07, 3.231500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999515, {0.007646, 0.315975}, {0.007026, 0.001103} ),
    FlashData( 1.000000e+05, 3.531500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.031804, {0.000097, 0.866423}, {0.008470, 0.004481} ),
    FlashData( 1.000000e+05, 3.531500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.829483, {0.000122, 0.968691}, {0.010825, 0.004849} ),
    FlashData( 1.000000e+05, 3.531500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.013250e+05, 3.531500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.031134, {0.000099, 0.865829}, {0.008574, 0.004423} ),
    FlashData( 1.013250e+05, 3.531500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.829361, {0.000124, 0.968304}, {0.010826, 0.004786} ),
    FlashData( 1.013250e+05, 3.531500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+06, 3.531500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 3.531500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.788230, {0.001216, 0.796793}, {0.011091, 0.000588} ),
    FlashData( 1.000000e+06, 3.531500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999299, {0.000766, 0.906819}, {0.007030, 0.000621} ),
    FlashData( 1.000000e+07, 3.531500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 3.531500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.565606, {0.007602, 0.388344}, {0.010074, 0.000894} ),
    FlashData( 1.000000e+07, 3.531500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 0.999017, {0.005276, 0.488289}, {0.007028, 0.000777} ),
    FlashData( 1.500000e+07, 3.531500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 3.531500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.446859, {0.008647, 0.303916}, {0.009437, 0.002442} ),
    FlashData( 1.500000e+07, 3.531500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+05, 3.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.054177, {0.000055, 0.886321}, {0.005743, 0.013044} ),
    FlashData( 1.000000e+05, 3.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.838983, {0.000101, 0.978218}, {0.010708, 0.013933} ),
    FlashData( 1.000000e+05, 3.731500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.013250e+05, 3.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.053352, {0.000056, 0.885570}, {0.005808, 0.012873} ),
    FlashData( 1.013250e+05, 3.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.838780, {0.000102, 0.977938}, {0.010710, 0.013754} ),
    FlashData( 1.000000e+06, 3.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.799463, {0.001011, 0.837056}, {0.011004, 0.001676} ),
    FlashData( 1.000000e+07, 3.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.599654, {0.006926, 0.420077}, {0.010385, 0.001707} ),
    FlashData( 1.500000e+07, 3.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.487747, {0.008205, 0.326722}, {0.009835, 0.003763} ),
    FlashData( 1.000000e+05, 3.931500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.079189, {0.000034, 0.908297}, {0.004184, 0.033343} ),
    FlashData( 1.000000e+05, 3.931500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.858658, {0.000085, 0.984127}, {0.010467, 0.035057} ),
    FlashData( 1.013250e+05, 3.931500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.078302, {0.000035, 0.907492}, {0.004221, 0.032904} ),
    FlashData( 1.013250e+05, 3.931500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.858220, {0.000086, 0.983915}, {0.010473, 0.034607} ),
    FlashData( 1.013250e+05, 3.931500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} ),
    FlashData( 1.000000e+06, 3.931500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+06, 3.931500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.808878, {0.000868, 0.867643}, {0.010922, 0.004171} ),
    FlashData( 1.000000e+07, 3.931500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.627809, {0.006355, 0.449384}, {0.010568, 0.003096} ),
    FlashData( 1.500000e+07, 3.931500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.521757, {0.007786, 0.347485}, {0.010113, 0.005784} ),
    FlashData( 1.000000e+06, 5.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.013083, {0.000299, 0.847460}, {0.005181, 0.201586} ),
    FlashData( 1.000000e+07, 5.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 5.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.771605, {0.004757, 0.549320}, {0.010256, 0.056684} ),
    FlashData( 1.500000e+07, 5.231500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.500000e+07, 5.231500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.692342, {0.006548, 0.399534}, {0.010089, 0.066846} ),
    FlashData( 1.000000e+06, 5.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.168528, {0.000106, 0.906625}, {0.001631, 0.505413} ),
    FlashData( 1.000000e+07, 5.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+07, 5.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.914262, {0.004869, 0.538035}, {0.009387, 0.134611} ),
    FlashData( 1.500000e+07, 5.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 0.986509, {0.007097, 0.343039}, {0.009026, 0.166823} ),
    FlashData( 1.000000e+08, 8.731500e+02, {0.000363, 0.000007, 0.003471, 0.006007, 0.018423, 0.034034, 0.042565, 0.056120, 0.839010}, 1, 0.000000, {0.000363, 0.839010}, {0.000363, 0.839010} ),
    FlashData( 1.000000e+08, 8.731500e+02, {0.009000, 0.003000, 0.534700, 0.114600, 0.087900, 0.045600, 0.020900, 0.015100, 0.169200}, 1, 1.000000, {0.009000, 0.169200}, {0.009000, 0.169200} ),
    FlashData( 1.000000e+08, 8.731500e+02, {0.007026, 0.006161, 0.827761, 0.091046, 0.045353, 0.015026, 0.004474, 0.001898, 0.001256}, 1, 1.000000, {0.007026, 0.001256}, {0.007026, 0.001256} )
   )
  );

/* UNCRUSTIFY-ON */

} // testing

} // geos
