@startuml Logger Class

<style>
note {
  MaximumWidth 350
}
</style>

set namespaceSeparator ::


' --------------------------
' Message Data Structure
' --------------------------

enum LogLevel <<enum>> {
  Important = 0
  Progress = 1
  Detailed = 2
  Trace = 3
  Debug = 4
  DebugTrace = 5

  Silent = -1
}

enum LogMsgType <<enum>> {
  Info
  Warning
  Error
  Stats?
  Iteration?
  ...?
}

struct SourceFileLocation <<struct>> {
  + string m_sourceFile
  + int m_line
}

struct LogMsgCallParams <<struct>> #text:Green {
}
note left: Parameters of the log call.

struct LogMsgGeneralContext <<struct>> #text:DarkCyan {
  + integer m_rank
  + SystemClock m_rankTimeStamp
  + string m_logSectionTitle
  + real64 m_timeStepStart
}
note right: If more efficient, types could be changed to string.

struct LogMsgTargetContext <<struct>> #text:DarkMagenta {
  + string m_targetName
  + string m_targetDataContext
}
note bottom: Pretransformed string values.\nValues can be zero (GeneralLogger)

struct LogMsgContext <<struct>> #text:Blue {
}
note right: Context data collected by the LoggingObject.\nData could be a map<string,string>

struct LogMsg <<struct>> #text:OrangeRed {
  + string m_text
}
note left: Message data structure.

LogMsgCallParams *---> "1" SourceFileLocation
LogMsgCallParams *---> "1" LogMsgType
' LogMsgCallParams *--> "1 m_callLevel\n1 m_msgLevel" LogLevel
LogMsgCallParams *-d--> "1\nm_msgLevel" LogLevel
LogMsgCallParams *-d--> "1\nm_callLevel" LogLevel
LogMsgContext *--> "1" LogMsgCallParams
LogMsgContext *--> "1" LogMsgGeneralContext
LogMsgContext *--> "1" LogMsgTargetContext
LogMsg *--> "1" LogMsgContext

LogMsgCallParams -r[hidden]- LogMsgTargetContext
LogMsgTargetContext -r[hidden]- LogMsgGeneralContext

LogLevel ---r[hidden]- LogMsgType
LogMsgType ---r[hidden]- SourceFileLocation
' SourceFileLocation --r[hidden]- LogLevel
' LogLevel --r[hidden]- LogMsgType
' LogMsgType --r[hidden]- LogLevel
' LogLevel --r[hidden]- SourceFileLocation
' SourceFileLocation --r[hidden]- LogMsgType
' LogMsgType --r[hidden]- LogLevel


' --------------------------
' Log outputs
' --------------------------


interface LogOutput <<interface>> #text:DarkRed {
  + void log( <color:OrangeRed>LogMsg message</color> )
}
<> LogOutputImplementations
LogOutput <|.. LogOutputImplementations : implements

class LogCompositeOutput {
  + addOutput( <color:DarkRed>LogOutput logOutput</color> )
}
LogOutputImplementations .. LogCompositeOutput
LogCompositeOutput *---> "1..n\nm_subOutputs" LogOutput #OrangeRed;text:OrangeRed : routes to

class LogHDF5Output {
  - hid_t file_id
  - ...
}
LogOutputImplementations .. LogHDF5Output

class LogTextOutput {
  - std::ostream * m_outStream
}
LogOutputImplementations .. LogTextOutput

LogTextOutput .l[hidden].. LogHDF5Output
LogHDF5Output .l[hidden].. LogCompositeOutput


class LogErrorHistory {
  -- Settings --
  - integer storeTimeStepsCount = 2
  - bool storeOnlyRank0 = false
  + void setTimeStepToKeep( integer value )
  + void storeOnlyRank0( bool value )
  -- Control --
  + void flushOldMessages()
  -- Internal data --
  - real64 storedTimeSteps[]
}
note as LogErrorHistoryNote
  Stores all messages, and when an error occurs, dump them all in the rank error trace file.

  Settings should be configurable on Problem & command line.

  "flushOldMessages()" should be called on each timesteps.
end note
LogErrorHistory .. LogErrorHistoryNote
LogErrorHistory o--l--> "0..n" LogMsg #OrangeRed;text:OrangeRed : Stores last timesteps


class LogRouter #text:DarkRed {
  -- Static Members --
  + {static} LogOutput s_main
  -- Instance Members --
  - LogLevel errorHistoryMaxLevel = Debug
  + void setFileOutput( LogOutput output )
  + void setFileOutput( LoggingStrategy strat )
  + void setErrorHistoryLogLevel( LogLevel errorHistoryMaxLevel )
}
note top: Filters the messages and send them in the LogOutput and / or in the LogErrorHistory
LogRouter *-d-> "1" LogErrorHistory #OrangeRed;text:OrangeRed : "Filter & Sends messages to"
LogRouter *-r-> "1" LogOutput #OrangeRed;text:OrangeRed : "Filter & Sends messages to"


' --------------------------
' Message Producers
' --------------------------


interface LoggingObject<CONTEXT_T> <<interface>> {
  + void setLogLevel( LogLevel objectLevel )
  + void log( <color:Green>LogMsgCallParams msgCtx</color>, <color:OrangeRed>string msg</color>, <color:DarkRed>LogRouter router = <u>LogRouter::s_main</u></color> )
  + void logIf( <color:Green>LogMsgCallParams msgCtx</color>, <color:OrangeRed>string msg</color>, <color:DarkRed>LogRouter router = <u>LogRouter::s_main</u></color> )
  + void logRank0( <color:Green>LogMsgCallParams msgCtx</color>, <color:OrangeRed>string msg</color>, <color:DarkRed>LogRouter router = <u>LogRouter::s_main</u></color> )
  + void logRank0If( <color:Green>LogMsgCallParams msgCtx</color>, <color:OrangeRed>string msg</color>, <color:DarkRed>LogRouter router = <u>LogRouter::s_main</u></color> )
  # <color:Blue>LogMsgContext</color> createMsgContext( <color:Green>LogMsgCallParams msgParams</color> )
  # <i>CONTEXT_T</i> getContext()
}
note right: Interface for producer of LogMsg structures.\n\nDefaultValue for logOutput is the main LogCompositeOutput.\n\nIf there can be more that one Problem (-> more than one GeneralLogger),\nWe should add one more parameter, the GeneralLogger (with a default instance).



class GeneralLogger {
  -- Global Variables --
  + {static} GeneralLogger logger
  -- Context / Logging Data --
  - LogLevel m_generalLogLevel
  - int m_rank
  - int m_ranksCount
  - real64 m_timeStepStart
  - string m_logSectionTitle
  - <color:DarkCyan>LogMsgGeneralContext currentContext</color>
  -- Context Update Methods --
  + void setRank( int value )
  + void setRanksCount( int value )
  + void setTimeStepStart( real64 value )
  + void setLogSectionTitle( string value )
}
note as GeneralLoggerNote
  "logger" is a global instance for general messages (this global is allowed as long as "Problem" is a singleton).

  "m_generalLogLevel" should be configurable on Problem and in a command line parameter.
end note
GeneralLogger .d. GeneralLoggerNote
GeneralLogger [<i>CONTEXT_T</i> =\n<color:DarkCyan>LogMessageGeneralContext</color>] ..u..|> LoggingObject : implements
GeneralLogger .d..> LogMsg : Produces
GeneralLogger ..r..> LogRouter #OrangeRed;text:OrangeRed : "Sends messages to"


class TargetedLogger {
  -- Context / Logging Data --
  - LogLevel m_logLevel
  - <color:DarkMagenta>LogMsgTargetContext currentContext</color>
  -- Context Update Methods --
  + void setTargetName( int value )
  + void setTargetDataContext( int value )
}
package dataRepository {
  class Group {
    + <color:Grey>string getName()</color>
    + <color:Grey>string getDataContext()</color>
    - <color:Red><s>int m_logLevel</s></color>
  }
}
TargetedLogger [<i>CONTEXT_T</i> =\n<color:DarkMagenta>LogMsgTargetContext</color>] ..u..|> LoggingObject : implements
Group *-u-> "m_logger\n1" TargetedLogger

TargetedLogger ..r..> LogRouter #OrangeRed;text:OrangeRed : "Sends messages to"
TargetedLogger ..r..> GeneralLogger #Blue;text:Blue : "Sub-calls logger.ceateMsgContext()"
TargetedLogger .d..> LogMsg : Produces


@enduml