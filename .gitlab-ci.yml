variables:
  PROJECT_ALLOC_NAME: ${CI_PROJECT_NAME}_ci_${CI_PIPELINE_ID}
  BUILD_ROOT: ${CI_PROJECT_DIR}
  # Should make it so we aren't doing fresh clones of GEOS all the time
  GIT_STRATEGY: fetch
  # Manually update submodules
  GIT_SUBMODULE_STRATEGY: none

stages:
  - build
  - nightly

####
# Template
.build_script:
  script:
    # Change submodule paths to absolute github paths (default is relative to GEOS gitlab path)
    - git submodule set-url src/coreComponents/LvArray https://github.com/GEOS-DEV/LvArray.git
    - git submodule set-url src/cmake/blt https://github.com/LLNL/blt.git
    - git submodule set-url src/coreComponents/constitutive/PVTPackage https://github.com/GEOS-DEV/PVTPackage.git
    - git submodule set-url integratedTests git@github.com:GEOS-DEV/integratedTests.git
    - git submodule set-url src/coreComponents/fileIO/coupling/hdf5_interface https://github.com/GEOS-DEV/hdf5_interface.git

    # Update submodules
    - git submodule update --init --recursive src/cmake/blt
    - git submodule update --init --recursive src/coreComponents/LvArray
    - git submodule update --init --recursive src/coreComponents/constitutive/PVTPackage
    - git submodule update --init --recursive integratedTests
    - git submodule update --init --recursive src/coreComponents/fileIO/coupling/hdf5_interface

    - mkdir ${SYSTEM_COMPILER}

    # newer geosxats needs python3 to run
    - module load python/3

    # GEOS requires CMake >=3.23
    - module load cmake/3.23.1

    # CONFIGURE
    - echo "~~~~~~~~~~ START - configure ~~~~~~~~~~~"
    - config_code=0
    #- python scripts/config-build.py -hc host-configs/LLNL/${HOST_CONFIG} -bt Release -bp build -DENABLE_DOXYGEN=OFF 2>&1 | tee ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_configure.log || config_code=$?
    - echo Testing 2>&1 | tee ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_configure.log || config_code=$?
    - mv ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_configure.log ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_configure_$([ $config_code == 0 ] && echo "SUCCESS" || echo "FAILURE").log
    - echo "~~~~~~~~~~ END - configure ~~~~~~~~~~~~~"

    # BUILD
    - echo "~~~~~~~~~~ START - build ~~~~~~~~~~~"
    - build_code=0
    # - ${ALLOC_COMMAND} make VERBOSE=1 -C build -j ${NPROC:-16} 2>&1 | tee ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_build.log || build_code=$?
    - echo Testing 1 2>&1 | tee ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_build.log || build_code=$?
    - mv ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_build.log ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_build_$([ $build_code == 0 ] && echo "SUCCESS" || echo "FAILURE").log
    - echo "~~~~~~~~~~ END - build ~~~~~~~~~~~~~"

    # UNIT TEST
    - echo "~~~~~~~~~~ START - unit tests ~~~~~~~~~~~"
    - unit_code=0
    - cd build
    # - ${ALLOC_COMMAND} ctest --output-on-failure  2>&1 | tee ../${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_unit_test.log || unit_code=$?
    - echo Testing 2  2>&1 | tee ../${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_unit_test.log || unit_code=$?
    - cd ..
    - mv ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_unit_test.log ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_unit_test_$([ $unit_code == 0 ] && echo "SUCCESS" || echo "FAILURE").log
    - echo "~~~~~~~~~~ END - unit tests ~~~~~~~~~~~~~"

    # INTEGRATED TEST
    - echo "~~~~~~~~~~ START - integrated tests ~~~~~~~~~~~"
    - cd build
    # - make ats_clean
    # - make ats_environment
    # Hard code integrated test failure status until optional fail flag fixed
    - integrated_code=1
    # - ${INTEGRATED_ALLOC_COMMAND} ./integratedTests/geos_ats.sh --failIfTestsFail 2>&1 | tee ../${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_integrated_test.log || integrated_code=1
    #- ${INTEGRATED_ALLOC_COMMAND} ./integratedTests/geos_ats.sh --failIfTestsFail 2>&1 | tee ../${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_integrated_test.log || integrated_code=$?
    - cd ..
    # - mv ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_integrated_test.log ${SYSTEM_COMPILER}/${SYSTEM_COMPILER}_integrated_test_$([ $integrated_code == 0 ] && echo "SUCCESS" || echo "FAILURE").log
    - cp -rL build/integratedTests/TestResults ${SYSTEM_COMPILER}/
    - echo "~~~~~~~~~~ END - integrated tests ~~~~~~~~~~~~~"

    # CLEANUP + PRINT SUCCESS/FAILURES
    - echo "~~~~~~~~~~ START - cleanup ~~~~~~~~~~~"
    - cd build
    # - make ats_clean
    - cd ..
    - rm -rf build
    - if [[ $config_code -ne 0 ]]; then echo "Configuration failed"; else echo "Configuration succeeded"; fi
    - if [[ $build_code -ne 0 ]]; then echo "Build failed"; else echo "Build succeeded"; fi
    - if [[ $unit_code -ne 0 ]]; then echo "Unit tests failed"; else echo "Unit tests succeeded"; fi
    - if [[ $integrated_code -ne 0 ]]; then echo "Integrated tests failed"; else echo "Integrated tests succeeded"; fi
    - exit_val=$(( 0 | $config_code | $build_code | $unit_code | $integrated_code ))
    - exit $exit_val
    - echo "~~~~~~~~~~ END - cleanup ~~~~~~~~~~~~~"
  # Job only triggers for scheduled pipelines and through web interface
  only:
    refs:
      - schedules
      - web
  # Output a folder of logs files; these are automatically inherited by nightly-job
  artifacts:
    when: always
    paths:
      - quartz/
      - lassen/
      - tioga/
  # Allow job to always fail, so nightly-job in next stage will run
  allow_failure: true

####
# quartz template
.build_on_quartz:
  stage: build
  variables:
    ALLOC_COMMAND: "salloc -N1 -ppdebug"
    INTEGRATED_ALLOC_COMMAND: "salloc -N1 -n 36 -ppdebug"
    SYSTEM_COMPILER: "quartz"
  tags:
    - shell
    - quartz
  extends: [.build_script]

####
# tioga template
.build_on_tioga:
  stage: build
  variables:
    ALLOC_COMMAND: "salloc -N1 -ppdebug"
    INTEGRATED_ALLOC_COMMAND: "salloc -N 10 -p pbatch"
  before_script:
    - module load rocm/5.4.3
    - module load cce/15.0.0
    - module load cmake/3.23.1
  tags:
    - shell
    - tioga
  extends: [.build_script]

####
# lassen template
.build_on_lassen:
  stage: build
  variables:
    ALLOC_COMMAND: "lalloc 1"
    INTEGRATED_ALLOC_COMMAND: "lalloc 10"
  tags:
    - shell
    - lassen
  extends: [.build_script]

####
# quartz jobs
quartz_clang_14_build:
  variables:
    HOST_CONFIG: "quartz-clang-14.cmake"
    SYSTEM_COMPILER: "quartz-clang-14"
  extends: [.build_on_quartz]

quartz_gcc_12_build:
  variables:
    HOST_CONFIG: "quartz-gcc-12.cmake"
    SYSTEM_COMPILER: "quartz-gcc-12"
  extends: [.build_on_quartz]

####
# tioga job
tioga_cce_15_build:
  variables:
    HOST_CONFIG: "tioga-cce-15.cmake"
    SYSTEM_COMPILER: "tioga-cce-15"
  extends: [.build_on_tioga]

####
# lassen jobs
lassen_clang_10_cuda_11_build:
  variables:
    HOST_CONFIG: "lassen-clang-10-cuda-11.cmake"
    SYSTEM_COMPILER: "lassen-clang-10-cuda-11"
  extends: [.build_on_lassen]

lassen_clang_13_cuda_11_build:
  variables:
    HOST_CONFIG: "lassen-clang-13-cuda-11.cmake"
    SYSTEM_COMPILER: "lassen-clang-13-cuda-11"
  extends: [.build_on_lassen]

####
# Pull nightlyTests repo and update files
nightly-job:
  stage: nightly
  script:
    - |
      echo "~~~~~~~~~~ START - write to nightlyTests Repo ~~~~~~~~~~~~~"
      git clone git@github.com:GEOS-DEV/nightlyTests.git
      cd nightlyTests
      ./update.sh \
        quartz-clang-14 \
        quartz-gcc-12 \
        lassen-clang-10-cuda-11 \
        lassen-gcc-8-cuda-11 \
        tioga-cce-15
      echo "~~~~~~~~~~ END - write to nightlyTests Repo ~~~~~~~~~~~~~"
  only:
    refs:
      - schedules
      - web
    variables:
      - $NIGHTLY_TEST_ENABLED
  tags:
   - shell
   - quartz
