language: shell
os: linux
dist: focal

vm:
  size: large

env:
  global:
  - GEOSX_TPL_TAG=203-915
  - secure: CGs2uH6efq1Me6xJWRr0BnwtwxoujzlowC4FHXHdWbNOkPsXf7nCgdaW5vthfD3bhnOeEUQSrfxdhTRtyU/NfcKLmKgGBnZOdUG4/JJK4gDSJ2Wp8LZ/mB0QEoODKVxbh+YtoAiHe3y4M9PGCs+wkNDw/3eEU00cK12DZ6gad0RbLjI3xkhEr/ZEZDZkcYg9yHAhl5bmpqoh/6QGnIg8mxIqdAtGDw+6tT0EgUqjeqc5bG5WwsamKzJItHSXD5zx8IJAlgDk4EzEGjZe0m56YnNfb9iwqqUsmL3Cuwgs7ByVDYw78JC5Kv42YqoxA5BxMT2mFsEe37TpYNXlzofU7ma2Duw9DGXWQd4IkTCcBxlyR0I0bfo0TmgO+y7PYG9lIyHPUkENemdozsZcWamqqkqegiEdRhDVYlSRo3mu7iCwTS6ZTALliVyEYjYxYb7oAnR3cNywXjblTCI8oKfgLSY+8WijM9SRl57JruIHLkLMCjmRI+cZBfv5tS2tYQTBPkygGrigrrN77ZiC7/TGyfggSN0+y0oYtOAgqEnBcKcreiibMW7tKcV2Z1RFD9ZvIkSc1EXLUPDP8FX1oyhmqBMqVo8LksrYLDJHQ05+F3YNgl2taSt7uMjQ4e8iZ3/IjFeMnbylDw+cj/RbS520HXsFPbWFm2Pb9pceA9n6GnY=

# The integrated test repository contains large data (using git lfs) and we do not use them here.
# To save time (and money) we do not let travis automatically clone all our (lfs) subrepositories and do it by hand.
git:
  submodules: false

__geosx_before_script: &__geosx_before_script
  before_script:
    - git submodule update --init --recursive src/cmake/blt
    - git submodule update --init --recursive src/coreComponents/LvArray
    - git submodule update --init --recursive src/coreComponents/constitutive/PVTPackage
    - git submodule update --init --recursive src/coreComponents/fileIO/coupling/hdf5_interface

__geosx_linux_build: &__geosx_linux_build
  services: docker
  <<: *__geosx_before_script
  script:
    # The linux build relies on two environment variables DOCKER_REPOSITORY and GEOSX_TPL_TAG to define the TPL version.
    # And another CMAKE_BUILD_TYPE to define the build type we want for GEOSX.
    # Optional BUILD_AND_TEST_ARGS to pass arguments to travis_build_and_test.sh script.
    #
    # We extract the location of the GEOSX_TPL from the container...
  - GEOSX_TPL_DIR=$(docker run --rm ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG} /bin/bash -c 'echo ${GEOSX_TPL_DIR}')
    # ... so we can install GEOSX alongside. This is assumed for bundling the binaries, so consider modifying with care.
  - GEOSX_DIR=${GEOSX_TPL_DIR}/../GEOSX-${TRAVIS_COMMIT:0:7}
    # We need to know where the code folder is mounted inside the container so we can run the script at the proper location!
    # Since this information is repeated twice, we use a variable.
  - TRAVIS_BUILD_DIR_MOUNT_POINT=/tmp/GEOSX
    # We need to keep track of the building container (hence the `CONTAINER_NAME`)
    # so we can extract the data from it later (if needed). Another solution would have been to use a mount point,
    # but that would not have solved the problem for the TPLs (we would require extra action to copy them to the mount point).
  - CONTAINER_NAME=geosx_build
    # Now we can build GEOSX.
  - docker run
    --name=${CONTAINER_NAME}
    --volume=${TRAVIS_BUILD_DIR}:${TRAVIS_BUILD_DIR_MOUNT_POINT}
    --cap-add=SYS_PTRACE
    -e HOST_CONFIG=${HOST_CONFIG:-host-configs/environment.cmake}
    -e CMAKE_BUILD_TYPE
    -e GEOSX_DIR=${GEOSX_DIR}
    -e ENABLE_HYPRE=${ENABLE_HYPRE:-OFF}
    -e ENABLE_HYPRE_CUDA=${ENABLE_HYPRE_CUDA:-OFF}
    -e ENABLE_TRILINOS=${ENABLE_TRILINOS:-ON}
    ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG}
    ${TRAVIS_BUILD_DIR_MOUNT_POINT}/scripts/travis_build_and_test.sh ${BUILD_AND_TEST_ARGS};

__geosx_auto_deploy: &__geosx_auto_deploy
  <<: *__geosx_linux_build
  # We use the most recent ubuntu distribution available in travis-ci to ensure maximum support of google cloud's sdk.
  dist: focal
  addons:
    apt:
      sources:
        - sourceline: 'deb https://packages.cloud.google.com/apt cloud-sdk main'
          key_url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
      packages:
        - google-cloud-sdk
  after_success:
    # The temporary variable used at multiple locations.
  - TMP_DIR=/tmp
    # Extracting both GEOSX and its TPL from the stopped container...
  - GEOSX_EXPORT_DIR=GEOSX-and-TPL-${TRAVIS_COMMIT:0:7}
  - docker cp -a ${CONTAINER_NAME}:${GEOSX_TPL_DIR}/.. ${TMP_DIR}/${GEOSX_EXPORT_DIR}
    # ... and packing it.
  - GEOSX_BUNDLE=${TMP_DIR}/${GEOSX_EXPORT_DIR}.tar.gz
  - tar czf ${GEOSX_BUNDLE} --directory=${TMP_DIR} ${GEOSX_EXPORT_DIR}
    # Uploading to GCP/GCS using gcloud CLI
  - GEOSX_GCLOUD_KEY=/tmp/geosx-key.json
  - openssl aes-256-cbc -K $encrypted_5ac030ea614b_key -iv $encrypted_5ac030ea614b_iv
    -in ${TRAVIS_BUILD_DIR}/geosx-key.json.enc -out ${GEOSX_GCLOUD_KEY} -d
  - gcloud auth activate-service-account --key-file=${GEOSX_GCLOUD_KEY}
  - CLOUDSDK_PYTHON=python3 gsutil cp -a public-read ${GEOSX_BUNDLE} gs://${GCP_BUCKET}/

__geosx_draft_script: &__geosx_draft_script
  script:
  # TRAVIS_PULL_REQUEST is false if job is not from a PR
  - if [[ $TRAVIS_PULL_REQUEST == false ]]; then exit 0; fi;
  - |
    is_draft=$(curl -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/$TRAVIS_PULL_REQUEST | \
        jq ".draft")

  # CI jobs will be cancelled if PR is a draft.
  # PR status must be "Open" to run CI.
  - |
    if [[ $is_draft == true ]]; then
      curl -sS -H "Travis-API-Version: 3" \
      -H "Authorization: token $AUTH_VAR" \
      -X POST https://api.travis-ci.com/build/$TRAVIS_BUILD_ID/cancel
      exit 1
    else
      exit 0
    fi

# PR must be assigned to be merged.
# This script will fail if this is not the case.
__geosx_assigned_script: &__geosx_assigned_script
  script:
  # TRAVIS_PULL_REQUEST is false if job is not from a PR
  - if [[ $TRAVIS_PULL_REQUEST == false ]]; then exit 0; fi;
  - |
    is_assigned=$(curl -H "Accept: application/vnd.github.v3+json" \
        https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/$TRAVIS_PULL_REQUEST | \
        jq ".assignees|length")
  - if [[ $is_assigned == 0 ]]; then exit 1; else exit 0; fi

__geosx_return_script: &__geosx_return_script
  script:
  # Verifies if all the "non_blocking_failures" jobs passed
  - |
    exit $(curl -sS -H "Travis-API-Version: 3" \
           -X GET https://api.travis-ci.com/build/$TRAVIS_BUILD_ID/jobs | \
           jq '[ .jobs[] | select( (.stage.name == "non_blocking_failures") and (.allow_failure == true) and (.state != "passed")) ] | length')

stages:
- check_that_pull_request_is_not_a_draft
- non_blocking_failures
- builds
- check_that_non_blocking_failure_jobs_succeeded

jobs:
  allow_failures:
  - name: code_style
  - name: documentation
  - name: check_submodules
  - name: check_that_pull_request_is_assigned
  include:
  - stage: check_that_pull_request_is_not_a_draft
    name: Check that the PR is not a draft (cancel job otherwise).
    <<: *__geosx_draft_script
  - stage: non_blocking_failures
    name: code_style
    <<: *__geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu20.04-gcc9
    - CMAKE_BUILD_TYPE=Release
    - BUILD_AND_TEST_ARGS=--test-code-style
  - stage: non_blocking_failures
    name: documentation
    <<: *__geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu20.04-gcc9
    - CMAKE_BUILD_TYPE=Release
    - BUILD_AND_TEST_ARGS=--test-documentation
  - stage: non_blocking_failures
    name: check_submodules
    script: scripts/test_submodule_updated.sh
  - stage: non_blocking_failures
    name: check_that_pull_request_is_assigned
    <<: *__geosx_assigned_script
  - stage: builds
    name: Ubuntu CUDA debug (20.04, clang 10.0.0 + gcc 9.4.0, open-mpi 4.0.3, cuda-11.2.152)
    <<: *__geosx_linux_build
    # Builds only the geosx executable (timeout when building tests)
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu20.04-clang10.0.0-cuda11.2.152
    - CMAKE_BUILD_TYPE=Debug
    - BUILD_AND_TEST_ARGS="--disable-unit-tests --build-exe-only --disable-schema-deployment"
    - ENABLE_HYPRE=ON
    - ENABLE_HYPRE_CUDA=ON
    - ENABLE_TRILINOS=OFF
  - stage: builds
    name: Ubuntu CUDA (20.04, clang 10.0.0 + gcc 9.4.0, open-mpi 4.0.3, cuda-11.2.152)
    <<: *__geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu20.04-clang10.0.0-cuda11.2.152
    - CMAKE_BUILD_TYPE=Release
    - BUILD_AND_TEST_ARGS="--disable-unit-tests --disable-schema-deployment"
    - ENABLE_HYPRE=ON
    - ENABLE_HYPRE_CUDA=ON
    - ENABLE_TRILINOS=OFF
  - stage: builds
    name: Centos (7.6, gcc 8.3.1, open-mpi 1.10.7, cuda 10.1.243)
    <<: *__geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/centos7.6.1810-gcc8.3.1-cuda10.1.243
    - CMAKE_BUILD_TYPE=Release
    - BUILD_AND_TEST_ARGS="--disable-unit-tests --disable-schema-deployment"
  - stage: builds
    name: Pecan GPU (centos 7.7, gcc 8.2.0, open-mpi 4.0.1, mkl 2019.5, cuda 10.2.89p2)
    <<: *__geosx_auto_deploy
    env:
    - DOCKER_REPOSITORY=geosx/pecan-gpu-gcc8.2.0-openmpi4.0.1-mkl2019.5-cuda10.2.89p2
    - CMAKE_BUILD_TYPE=Release
    - BUILD_AND_TEST_ARGS="--disable-unit-tests --disable-schema-deployment"
    - HOST_CONFIG=host-configs/TOTAL/pecan-GPU.cmake
    - GCP_BUCKET=geosx/Pecan-GPU
  - stage: builds
    name: Pecan CPU (centos 7.7, gcc 8.2.0, open-mpi 4.0.1, mkl 2019.5)
    <<: *__geosx_auto_deploy
    env:
    - DOCKER_REPOSITORY=geosx/pecan-cpu-gcc8.2.0-openmpi4.0.1-mkl2019.5
    - CMAKE_BUILD_TYPE=Release
    - HOST_CONFIG=host-configs/TOTAL/pecan-CPU.cmake
    - GCP_BUCKET=geosx/Pecan-CPU
  - stage: builds
    name: Pangea 2 (centos 7.6, gcc 8.3.0, open-mpi 2.1.5, mkl 2019.3)
    <<: *__geosx_auto_deploy
    env:
    - DOCKER_REPOSITORY=geosx/pangea2-gcc8.3.0-openmpi2.1.5-mkl2019.3
    - CMAKE_BUILD_TYPE=Release
    - GCP_BUCKET=geosx/Pangea2
    - ENABLE_HYPRE=ON
    - ENABLE_TRILINOS=OFF
  - stage: builds
    name: Sherlock CPU (centos 7.9.2009, gcc 10.1.0, open-mpi 4.1.2, openblas 0.3.10)
    <<: *__geosx_auto_deploy
    env:
      - DOCKER_REPOSITORY=geosx/sherlock-gcc10.1.0-openmpi4.1.2-openblas0.3.10-zlib1.2.11
      - CMAKE_BUILD_TYPE=Release
      - HOST_CONFIG=host-configs/Stanford/sherlock-gcc10-ompi4.1.2-openblas0.3.10.cmake
      - GCP_BUCKET=geosx/Sherlock-CPU
      - ENABLE_HYPRE=ON
      - ENABLE_TRILINOS=OFF
  - stage: builds
    name: Ubuntu (20.04, gcc 9.3.0, open-mpi 4.0.3)
    <<: *__geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu20.04-gcc9
    - CMAKE_BUILD_TYPE=Release
  - stage: builds
    name: Ubuntu debug (20.04, gcc 10.3.0, open-mpi 4.0.3)
    <<: *__geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu20.04-gcc10
    - CMAKE_BUILD_TYPE=Debug
  - stage: builds
    name: Ubuntu (20.04, gcc 10.3.0, open-mpi 4.0.3)
    <<: *__geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu20.04-gcc10
    - CMAKE_BUILD_TYPE=Release
  - stage: builds
    name: Ubuntu (22.04, gcc 11.2.0, open-mpi 4.1.2)
    <<: *__geosx_auto_deploy
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu22.04-gcc11
    - CMAKE_BUILD_TYPE=Release
    - GCP_BUCKET=geosx/ubuntu22.04-gcc11
  - stage: check_that_non_blocking_failure_jobs_succeeded
    name: Checking if all the non blocking failures jobs (i.e. fail-at-end jobs) have succeeded...
    <<: *__geosx_return_script
