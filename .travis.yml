language: minimal

env:
  global:
  - GEOSX_TPL_TAG=104-383

# The integrated test repository contains large data (using git lfs) and we do not use them here.
# To save time (and money) we do not let travis automatically clone all our (lfs) subrepositories and do it by hand.
git:
  submodules: false
geosx_before_script: &geosx_before_script
  before_script:
  - git submodule update --init --recursive src/coreComponents/cxx-utilities
  - git submodule update --init --recursive src/cmake/blt
  - git submodule update --init --recursive src/externalComponents/PVTPackage
  - git submodule update --init --recursive src/externalComponents/PAMELA
  - git submodule update --init --recursive src/coreComponents/fileIO/coupling/hdf5_interface
  - git submodule update --init --recursive src/coreComponents/physicsSolvers/GEOSX_PTP

geosx_linux_build: &geosx_linux_build
  stage: build
  services: docker
  <<: *geosx_before_script
  script:
    # The linux build relies on two environment variables DOCKER_REPOSITORY and GEOSX_TPL_TAG to define the TPL version.
    # And another CMAKE_BUILD_TYPE to define the build type we want for GEOSX.
    # Optional BUILD_AND_TEST_ARGS to pass arguments to travis_build_and_test.sh script.
    #
    # We extract the location of the GEOSX_TPL from the container...
  - GEOSX_TPL_DIR=$(docker run --rm ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG} /bin/bash -c 'echo ${GEOSX_TPL_DIR}')
    # ... so we can install GEOSX alongside. This is assumed for bundling the binaries, so consider modifying with care.
  - GEOSX_DIR=${GEOSX_TPL_DIR}/../GEOSX-${TRAVIS_COMMIT:0:7}
    # We need to know where the code folder is mounted inside the container so we can run the script at the proper location!
    # Since this information is repeated twice, we use a variable.
  - TRAVIS_BUILD_DIR_MOUNT_POINT=/tmp/GEOSX
    # We need to keep track of the building container (hence the `CONTAINER_NAME`)
    # so we can extract the data from it later (if needed). Another solution would have been to use a mount point,
    # but that would not have solved the problem for the TPLs (we would require extra action to copy them to the mount point).
  - CONTAINER_NAME=geosx_build
    # Now we can build GEOSX.
  - docker run
    --name=${CONTAINER_NAME}
    --volume=${TRAVIS_BUILD_DIR}:${TRAVIS_BUILD_DIR_MOUNT_POINT}
    -e CMAKE_BUILD_TYPE
    -e GEOSX_DIR=${GEOSX_DIR}
    ${DOCKER_REPOSITORY}:${GEOSX_TPL_TAG}
    ${TRAVIS_BUILD_DIR_MOUNT_POINT}/scripts/travis_build_and_test.sh ${BUILD_AND_TEST_ARGS};

geosx_osx_build: &geosx_osx_build
  stage: build
  os: osx
  osx_image: xcode11.2
  install:
  - TPL_METADATA_URL=https://www.googleapis.com/storage/v1/b/geosx/o/TPL%2Fosx-${GEOSX_TPL_TAG}.tar
  - TPL_BULK_URL=${TPL_METADATA_URL}?alt=media
    # Extracting the GEOSX_TPL installation directory
  - METADATA=$(curl -s "${TPL_METADATA_URL}")
  - GEOSX_TPL_DIR=$(echo -n ${METADATA} | python3 -c "import sys, json; print(json.load(sys.stdin)['metadata']['GEOSX_TPL_DIR'], end='')")
  - sudo mkdir -p -m a=rwx ${GEOSX_TPL_DIR}
    # Then download the TPLs and uncompress where needed
  - curl -s "${TPL_BULK_URL}" | tar --strip-component=1 --directory=${GEOSX_TPL_DIR} -xf -
    # Now let's deal with Homebrew third parties
  - BREW_HASH=$(echo -n ${METADATA} | python3 -c "import sys, json; print(json.load(sys.stdin)['metadata']['BREW_HASH'], end='')")
  - BREW_URL=https://raw.github.com/Homebrew/homebrew-core/${BREW_HASH}
  - brew install ${BREW_URL}/Formula/open-mpi.rb
  <<: *geosx_before_script
  script:
  - python ${TRAVIS_BUILD_DIR}/scripts/config-build.py
    -hc ${TRAVIS_BUILD_DIR}/host-configs/darwin-clang.cmake
    -DGEOSX_TPL_DIR=${GEOSX_TPL_DIR}
    -DBLT_MPI_COMMAND_APPEND:STRING="--oversubscribe"
    -DENABLE_GEOSX_PTP:BOOL=ON -DENABLE_DOXYGEN:BOOL=OFF
  - cd build-darwin-clang-debug
  - make -j $(nproc) VERBOSE=1
  - ctest -V

geosx_pangea_build: &geosx_pangea_build
  <<: *geosx_linux_build
  # We use the most recent ubuntu distribution available in travis-ci to ensure maximum support of google cloud's sdk.
  dist: bionic
  addons:
    apt:
      sources:
        - sourceline: 'deb https://packages.cloud.google.com/apt cloud-sdk main'
          key_url: 'https://packages.cloud.google.com/apt/doc/apt-key.gpg'
      packages:
        - google-cloud-sdk
  after_success:
    # The temporary variable used at multiple locations.
  - TMP_DIR=/tmp
    # Extracting both GEOSX and its TPL from the stopped container...
  - GEOSX_EXPORT_DIR=GEOSX-and-TPL-${TRAVIS_COMMIT:0:7}
  - docker cp -a ${CONTAINER_NAME}:${GEOSX_TPL_DIR}/.. ${TMP_DIR}/${GEOSX_EXPORT_DIR}
    # ... and packing it.
  - GEOSX_BUNDLE=${TMP_DIR}/${GEOSX_EXPORT_DIR}.tar.gz
  - tar cvzf ${GEOSX_BUNDLE} --directory=${TMP_DIR} ${GEOSX_EXPORT_DIR}
    # Uploading to GCP/GCS using gcloud CLI
  - GEOSX_GCLOUD_KEY=/tmp/geosx-key.json
  - openssl aes-256-cbc -K $encrypted_5ac030ea614b_key -iv $encrypted_5ac030ea614b_iv
    -in ${TRAVIS_BUILD_DIR}/geosx-key.json.enc -out ${GEOSX_GCLOUD_KEY} -d
  - gcloud auth activate-service-account --key-file=${GEOSX_GCLOUD_KEY}
  - gsutil cp -a public-read ${GEOSX_BUNDLE} gs://geosx/Pangea2/

stages:
  - build
  - check_submodules

jobs:
  include:
  - <<: *geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu18.04-clang8.0.0-cuda10.1.243
    - CMAKE_BUILD_TYPE=Release
    - BUILD_AND_TEST_ARGS=--disable-unit-tests
  - <<: *geosx_pangea_build
    env:
    - DOCKER_REPOSITORY=geosx/pangea2-gcc8.3.0-openmpi2.1.5-mkl2019.3
    - CMAKE_BUILD_TYPE=Release
    - BUILD_AND_TEST_ARGS=--disable-unit-tests
  - <<: *geosx_osx_build
  - <<: *geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/centos7.7.1908-clang9.0.0
    - CMAKE_BUILD_TYPE=Release
  - <<: *geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu18.04-gcc8
    - CMAKE_BUILD_TYPE=Release
  - <<: *geosx_linux_build
    env:
    - DOCKER_REPOSITORY=geosx/ubuntu18.04-gcc8
    - CMAKE_BUILD_TYPE=Debug
  - stage: check_submodules
    script: scripts/test_submodule_updated.sh
