import sys

#
# git log --since="2010-01-01" --until="2026-11-31" --all --pretty="%an" | sort | uniq | tr -d " ' " | xargs python3 repositoryStats_condenseDev.py
#

# Define the username mapping dictionary
username_mapping = {
"AleksNovikov" : "aleksnovikov",
"AlexandreLapene" : "alexandrelapene",
"Algiane" : "algiane",
"AlgianeFroehly" : "algianefroehly",
"AmmarAlali" : "ammaralali",
"AndreaBorio" : "andreaborio",
"AndreaFranceschini" : "andreafranceschini",
"AndreCosta" : "andrecosta",
"AndreMacieiraBragaCosta" : "andrecosta",
"andrembcosta" : "andrecosta",
"AntoineMazuyer" : "antoinemazuyer",
"mazuyer" : "antoinemazuyer",
"ArnaudDUDES" : "arnauddudes",
"arng40" : "arnauddudes",
"ArturoVargas" : "arturovargas",
"Aurelien" : "aurelien",
"acitrain" : "aurelien",
"aure-lily" : "aurelily",
"Ben" : "bencorbett",
"BenCorbett" : "bencorbett",
"BenjaminCorbett" : "bencorbett",
"BenjaminCurticeCorbett" : "bencorbett",
"BenjaminT.Liu" : "benjamintliu",
"BertrandThierry" : "bertrandthierry",
"BrianHan" : "brianhan",
"BrianManhHienHan" : "brianhan",
"CameronCrook" : "cameroncrook",
"CameronMikelCrook" : "cameroncrook",
"cmcrook5" : "cameroncrook",
"Castelletto" : "castelletto",
"Castelletto1" : "castelletto",
"NicolaCastelletto" : "castelletto",
"castelletto1" : "castelletto",
"ChaoyiWang" : "chaoyiwang",
"ChristopherSherman" : "christophersherman",
"ChrisWhite" : "chriswhite",
"DanielOsei-Kuffuor" : "danieloseikuffuor",
"david4utd" : "ruiwang",
"DicksonKachuma" : "dicksonkachuma",
"dkachuma" : "dicksonkachuma",
"FrancoisHamon" : "francoishamon",
"francoishamon" : "francoishamon",
"FanFei" : "frankfeifan",
"Fei" : "frankfeifan",
"frankfeifan" : "frankfeifan",
"fanfei" : "frankfeifan",
"fei2" : "frankfeifan",
"Gaetan" : "gaetanfuss",
"GaetanFuss" : "gaetanfuss",
"GerasimosChourdakis" : "gerasimoschourdakis",
"Guotong" : "guotongren",
"GuotongRen" : "guotongren",
"Guotong-Ren" : "guotongren",
"hannah_mairs" : "hannahmairs",
"HerveGross" : "hervegross",
"HeweiTang" : "heweitang",
"HuiWu" : "huiwu",
"IbrahimIsraa" : "ibrahimisraa",
"IgorShovkun" : "igorshovkun",
"IsaacJu" : "isaacju",
"IsaacJu-debug" : "isaacju",
"JacquesFranc" : "jacquesfranc",
"jacques" : "jacquesfranc",
"jacquesn7" : "jacquesfranc",
"jafranc" : "jacquesfranc",
"jfranc" : "jacquesfranc",
"JaisreeIyer" : "jaisreeiyer",
"JamesCorbett" : "jamescorbett",
"jay-a" : "jay-a",
"JeannePellerin" : "jeannepellerin",
"JieMeng" : "jiemeng",
"jiamin.jiang" : "jiaminjiang",
"jiemeng-total" : "jiemeng",
"jhuang2601" : "jianhuang",
"JianHUANG" : "jianhuang",
"JianHuang" : "jianhuang",
"JixiangHuang" : "jixianghuang",
"JoshuaWhite" : "joshuawhite",
"joshua-white" : "joshuawhite",
"joshwhite" : "joshuawhite",
"julia.camargo" : "juliacamargo",
"juliatcamargo" : "juliacamargo",
"BESSETJulien" : "julienrenethomasbesset",
"Julien" : "julienrenethomasbesset",
"JulienReneThomasBesset" : "julienrenethomasbesset",
"KevinJ.Dugan" : "kevinjdugan",
"labesse40" : "julienrenethomasbesset",
"liyangrock" : "liyangrock",
"LionelUntereiner" : "lioneluntereiner",
"LucasVALARCHER" : "lucasvalarcher",
"ŁukaszŁaniewski-Wołłk" : "lukaszlaniewski-wollk",
"MadonnaYoder" : "madonnayoder",
"MamadouN'diaye" : "mamadoundiaye",
"MamadouNdiaye" : "mamadoundiaye",
"mndiaye24" : "mamadoundiaye",
"MarkKhait" : "markkhait",
"mkhait" : "markkhait",
"Cusini" : "matteocusini",
"Matteo" : "matteocusini",
"MatteoCusini" : "matteocusini",
"MatteoFrigo" : "matteofrigo5",
"matteofrigo5" : "matteofrigo5",
"mfrigo" : "matteofrigo5",
"Matthias" : "matthiascremon",
"MatthiasCremon" : "matthiascremon",
"MelReyCG" : "melreycg",
"MichaelHomel" : "michaelhomel",
"MiladBader" : "miladbader",
"MohammadKarimi-Fard" : "mohammadkarimifard",
"OluwatobiQuadriRaji" : "oluwatobiquadri",
"Oluwatobi-PM" : "oluwatobiquadri",
"Ouassim" : "ouassim",
"paloma-martinez" : "palomamartinez",
"PavelTomin" : "paveltomin",
"paveltomin" : "paveltomin",
"PengchengFu" : "pengchengfu",
"PeterB.Robinson" : "peterbrobinson",
"robinspb" : "peterbrobinson",
"PhillipChacon" : "phillipchacon",
"TheLastBlockbender" : "phillipchacon",
"QuanBui" : "quanbui",
"RandolphR.Settgast" : "randolphrsettgast",
"RandolphSettgast" : "randolphrsettgast",
"RandySettgast" : "randolphrsettgast",
"UncrustifyRobot" : "randolphrsettgast",
"dependabot[bot]" : "randolphrsettgast",
"geosadmn" : "randolphrsettgast",
"rasimHZ" : "rasimhz",
"Ron-Wang" : "ronwang",
"rustem.zaydullin@totalenergies.com" : "rustemzaydullin",
"RyanARONSON(X)" : "ryanaronson",
"RyanAronson" : "ryanaronson",
"SergeyKlevtsov" : "sergeyklevtsov",
"Shabnam" : "shabnamjandaghisemnani",
"ShabnamJandaghiSemnani" : "shabnamjandaghisemnani",
"shabnamjs" : "shabnamjandaghisemnani",
"SohailWaziri" : "sohailwaziri",
"sohailwaziri" : "sohailwaziri",
"StefanoFrambati" : "stefanoframbati",
"j0405284" : "stefanoframbati",
"sframba" : "stefanoframbati",
"StefanPovolny" : "stefanpovolny",
"povolny1" : "stefanpovolny",
"stenix" : "stenix",
"Sy-TuanNguyen" : "sytuannguyen",
"sytuannguyen" : "sytuannguyen",
"TaehoKim" : "taehokim",
"kimtaeho07" : "taehokim",
"TaoJin" : "taojin",
"tbeltzun" : "tbeltzun",
"TerryLigocki" : "terryligocki",
"ThomasGAZZOLA" : "thomasgazzola",
"ThomasGazzola" : "thomasgazzola",
"TotoGaz" : "thomasgazzola",
"TomByer" : "tombyer",
"ThomasJamesByer" : "tombyer",
"tjb" : "tombyer",
"tony" : "tony",
"VictorA.P.Magri" : "victorapmagri",
"VictorA.PaludettoMagri" : "victorapmagri",
"WilliamRTobin" : "williamrtobin",
"WilliamTobin" : "williamrtobin",
"wrtobin" : "williamrtobin",
"WuHuiLLNL" : "wuhuillnl",
"XavierLacoste" : "xavierlacoste",
"YohannDudouit" : "yohanndudouit",
"YueHao" : "yuehao"
}

inverse_username_mapping = {
 "aleksnovikov":"Aleks Novikov" ,
 "alexandrelapene":"Alexandre Lapene" ,
 "algianefroehly":"Algiane Froehly" ,
 "ammaralali":"Ammar Alali" ,
 "andreaborio":"Andrea Borio" ,
 "andreafranceschini":"Andrea Franceschini" ,
 "andrecosta":"Andre Macieira Braga Costa" ,
 "antoinemazuyer":"Antoine Mazuyer" ,
 "arnauddudes":"Arnaud Dudes" ,
 "arturovargas":"Arturo Vargas" ,
 "aurelien":"Aurelien Citrain" ,
 "aurelily":"aure-lily" ,
 "bencorbett":"Benjamin Curtice Corbett" ,
 "benjamintliu":"Benjamin T. Liu" ,
 "bertrandthierry":"Bertrand Thierry" ,
 "brianhan":"Brian Manh Hien Han" ,
 "cameroncrook":"Cameron Mikel Crook" ,
 "castelletto":"Nicola Castelletto" ,
 "chaoyiwang":"Chaoyi Wang" ,
 "christophersherman":"Christopher Sherman" ,
 "chriswhite":"Chris White" ,
 "danieloseikuffuor":"Daniel Osei-Kuffuor" ,
 "ruiwang":"Rui Wang" ,
 "dicksonkachuma":"Dickson Kachuma" ,
 "francoishamon":"Francois Hamon" ,
 "frankfeifan":"Fan Fei" ,
 "gaetanfuss":"Gaetan Fuss" ,
 "gerasimoschourdakis":"Gerasimos Chourdakis" ,
 "guotongren":"Guotong" ,
 "guotongren":"Guotong Ren" ,
 "hannahmairs" : "hannah mairs",
 "hervegross":"Herve Gross" ,
 "heweitang":"Hewei Tang" ,
 "huiwu":"Hui Wu" ,
 "ibrahimisraa":"Ibrahim Israa" ,
 "igorshovkun":"Igor Shovkun" ,
 "isaacju":"Isaac Ju" ,
 "jacquesfranc":"Jacques Franc" ,
 "jaisreeiyer":"Jaisree Iyer" ,
 "jamescorbett":"James Corbett" ,
 "jay-a":"Jay Appleton" ,
 "jeannepellerin":"Jeanne Pellerin" ,
 "jiemeng":"Jie Meng" ,
 "jiaminjiang":"Jiamin Jiang" ,
 "jianhuang":"Jian Huang" ,
 "jixianghuang":"Jixian Huang" ,
 "joshuawhite":"Joshua White" ,
 "juliacamargo":"Julia T. Camargo" ,
 "julienrenethomasbesset":"Julien Rene Thomas Besset" ,
 "kevinjdugan":"Kevin J. Dugan" ,
 "kimtaeho07":"Taeho Kim" ,
 "liyangrock":"Li Yang" ,
 "lioneluntereiner":"Lionel Untereiner" ,
 "lucasvalarcher":"Lucas Valarcher" ,
 "lukaszlaniewski-wollk":"ŁukaszŁaniewski-Wołłk" ,
 "madonnayoder":"Madonna Yoder" ,
 "mamadoundiaye":"Mamadou N'diaye" ,
 "markkhait":"Mark Khait" ,
 "matteocusini":"Matteo Cusini" ,
 "matteofrigo5":"Matteo Frigo" ,
 "matthiascremon":"Matthias Cremon" ,
 "melreycg":"Mel Rey" ,
 "michaelhomel":"Michael Homel" ,
 "miladbader":"Milad Bader" ,
 "mohammadkarimifard":"Mohammad Karimi-Fard" ,
 "oluwatobiquadri":"Oluwatobi Quadri Raji" ,
 "ouassim":"Ouassim Khebzegga" ,
 "palomamartinez":"Paloma Martinez" ,
 "paveltomin":"Pavel Tomin" ,
 "pengchengfu":"Pengcheng Fu" ,
 "peterbrobinson":"Peter B. Robinson" ,
 "phillipchacon":"Phillip Chacon" ,
 "quanbui":"Quan Bui" ,
 "randolphrsettgast":"Randolph R.Settgast" ,
 "rasimhz":"Rasim Hasanzade" ,
 "ronwang":"Ron Wang" ,
 "rustemzaydullin":"Rustem Zaydullin" ,
 "ryanaronson":"Ryan Aronson" ,
 "sergeyklevtsov":"Sergey Klevtsov" ,
 "shabnamjandaghisemnani":"Shabnam Jandaghi Semnani" ,
 "sohailwaziri":"Sohail Waziri" ,
 "stefanoframbati":"Stefano Frambati" ,
 "stefanpovolny":"Stefan Povolny" ,
 "stenix":"stenix" ,
 "sytuannguyen":"Sy-Tuan Nguyen" ,
 "taehokim":"TaehoKim" ,
 "taojin":"Tao Jin" ,
 "tbeltzun":"tbeltzun" ,
 "terryligocki":"Terry Ligocki" ,
 "thomasgazzola":"ThomasGazzola" ,
 "tombyer":"Thomas James Byer" ,
 "tony":"Tony ?" ,
 "victorapmagri":"Victor Paludetto Magri" ,
 "williamrtobin":"William R. Tobin" ,
 "wuhuillnl":"Wu Hui" ,
 "xavierlacoste":"Xavier Lacoste" ,
 "yohanndudouit":"Yohann Dudouit" ,
 "yuehao":"Yue Hao"
}

def count_unique_users(usernames):
    # Substitute usernames using the username mapping dictionary
    #substituted_usernames = [username_mapping.get(username.strip(), username.strip()) for username in usernames]

    # sorted_username_mapping = dict(sorted(username_mapping.items(), key=lambda item: item[1]))
    # for key, value in sorted_username_mapping.items():
    #     print(f'{key}: {value}')

    substituted_usernames = []
    for username in usernames:
        stripped_username = username.strip()
        if stripped_username not in username_mapping:
            raise ValueError(f"Username '{stripped_username}' not found in username_mapping")
        substituted_usernames.append(username_mapping[stripped_username])


    # Count the number of unique usernames
    unique_usernames = set(substituted_usernames)
#    print ("unique_usernames:", sorted(unique_usernames))

    for username in unique_usernames:
#        print( "- username: \"" + username + "\"")
        name = inverse_username_mapping[username]
        splitName = name.split()
        givenNames = " ".join(splitName[:-1])
        lastName = splitName[-1]
        print( "- family-names: \"" + lastName + "\"")
        print( "  given-names: \"" + givenNames + "\"")

    num_unique_users = len(unique_usernames)
    return num_unique_users

# Example usage:
if __name__ == "__main__":
    # Read usernames from command line arguments
    usernames = sys.argv[1:]
    #print ("usernames:", usernames)

    # Count unique users
    num_unique_users = count_unique_users(usernames)
    
    # Output the number of unique users
    print(num_unique_users)
